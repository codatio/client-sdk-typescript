/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";
import * as z from "zod";

export type CreateCustomerRequest = {
    /**
     * Unique identifier for a company.
     */
    companyId: string;
    /**
     * Unique identifier for a connection.
     */
    connectionId: string;
    /**
     * Time limit for the push operation to complete before it is timed out.
     */
    timeoutInMinutes?: number | undefined;
    /**
     * Allow a sync upon push completion.
     */
    allowSyncOnPushComplete?: boolean | undefined;
    customer?: shared.Customer | null | undefined;
};

/** @internal */
export const CreateCustomerRequest$inboundSchema: z.ZodType<
    CreateCustomerRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        companyId: z.string(),
        connectionId: z.string(),
        timeoutInMinutes: z.number().int().optional(),
        allowSyncOnPushComplete: z.boolean().default(true),
        Customer: z.nullable(shared.Customer$inboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            Customer: "customer",
        });
    });

/** @internal */
export type CreateCustomerRequest$Outbound = {
    companyId: string;
    connectionId: string;
    timeoutInMinutes?: number | undefined;
    allowSyncOnPushComplete: boolean;
    Customer?: shared.Customer$Outbound | null | undefined;
};

/** @internal */
export const CreateCustomerRequest$outboundSchema: z.ZodType<
    CreateCustomerRequest$Outbound,
    z.ZodTypeDef,
    CreateCustomerRequest
> = z
    .object({
        companyId: z.string(),
        connectionId: z.string(),
        timeoutInMinutes: z.number().int().optional(),
        allowSyncOnPushComplete: z.boolean().default(true),
        customer: z.nullable(shared.Customer$outboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            customer: "Customer",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerRequest$ {
    /** @deprecated use `CreateCustomerRequest$inboundSchema` instead. */
    export const inboundSchema = CreateCustomerRequest$inboundSchema;
    /** @deprecated use `CreateCustomerRequest$outboundSchema` instead. */
    export const outboundSchema = CreateCustomerRequest$outboundSchema;
    /** @deprecated use `CreateCustomerRequest$Outbound` instead. */
    export type Outbound = CreateCustomerRequest$Outbound;
}
