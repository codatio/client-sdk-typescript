/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type UpdateReimbursableExpenseTransactionRequest = {
  /**
   * Unique identifier for a company.
   */
  companyId: string;
  /**
   * The unique identifier for your SMB's transaction.
   */
  transactionId: string;
  updateReimbursableExpenseTransactionRequest?:
    | shared.UpdateReimbursableExpenseTransactionRequest
    | undefined;
};

/** @internal */
export const UpdateReimbursableExpenseTransactionRequest$inboundSchema:
  z.ZodType<
    UpdateReimbursableExpenseTransactionRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    companyId: z.string(),
    transactionId: z.string(),
    UpdateReimbursableExpenseTransactionRequest: shared
      .UpdateReimbursableExpenseTransactionRequest$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "UpdateReimbursableExpenseTransactionRequest":
        "updateReimbursableExpenseTransactionRequest",
    });
  });

/** @internal */
export type UpdateReimbursableExpenseTransactionRequest$Outbound = {
  companyId: string;
  transactionId: string;
  UpdateReimbursableExpenseTransactionRequest?:
    | shared.UpdateReimbursableExpenseTransactionRequest$Outbound
    | undefined;
};

/** @internal */
export const UpdateReimbursableExpenseTransactionRequest$outboundSchema:
  z.ZodType<
    UpdateReimbursableExpenseTransactionRequest$Outbound,
    z.ZodTypeDef,
    UpdateReimbursableExpenseTransactionRequest
  > = z.object({
    companyId: z.string(),
    transactionId: z.string(),
    updateReimbursableExpenseTransactionRequest: shared
      .UpdateReimbursableExpenseTransactionRequest$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      updateReimbursableExpenseTransactionRequest:
        "UpdateReimbursableExpenseTransactionRequest",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateReimbursableExpenseTransactionRequest$ {
  /** @deprecated use `UpdateReimbursableExpenseTransactionRequest$inboundSchema` instead. */
  export const inboundSchema =
    UpdateReimbursableExpenseTransactionRequest$inboundSchema;
  /** @deprecated use `UpdateReimbursableExpenseTransactionRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdateReimbursableExpenseTransactionRequest$outboundSchema;
  /** @deprecated use `UpdateReimbursableExpenseTransactionRequest$Outbound` instead. */
  export type Outbound = UpdateReimbursableExpenseTransactionRequest$Outbound;
}

export function updateReimbursableExpenseTransactionRequestToJSON(
  updateReimbursableExpenseTransactionRequest:
    UpdateReimbursableExpenseTransactionRequest,
): string {
  return JSON.stringify(
    UpdateReimbursableExpenseTransactionRequest$outboundSchema.parse(
      updateReimbursableExpenseTransactionRequest,
    ),
  );
}

export function updateReimbursableExpenseTransactionRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateReimbursableExpenseTransactionRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateReimbursableExpenseTransactionRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateReimbursableExpenseTransactionRequest' from JSON`,
  );
}
