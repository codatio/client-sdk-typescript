/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreatePartnerExpenseConnectionRequest = {
  /**
   * Unique identifier for a company.
   */
  companyId: string;
};

/** @internal */
export const CreatePartnerExpenseConnectionRequest$inboundSchema: z.ZodType<
  CreatePartnerExpenseConnectionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  companyId: z.string(),
});

/** @internal */
export type CreatePartnerExpenseConnectionRequest$Outbound = {
  companyId: string;
};

/** @internal */
export const CreatePartnerExpenseConnectionRequest$outboundSchema: z.ZodType<
  CreatePartnerExpenseConnectionRequest$Outbound,
  z.ZodTypeDef,
  CreatePartnerExpenseConnectionRequest
> = z.object({
  companyId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePartnerExpenseConnectionRequest$ {
  /** @deprecated use `CreatePartnerExpenseConnectionRequest$inboundSchema` instead. */
  export const inboundSchema =
    CreatePartnerExpenseConnectionRequest$inboundSchema;
  /** @deprecated use `CreatePartnerExpenseConnectionRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreatePartnerExpenseConnectionRequest$outboundSchema;
  /** @deprecated use `CreatePartnerExpenseConnectionRequest$Outbound` instead. */
  export type Outbound = CreatePartnerExpenseConnectionRequest$Outbound;
}

export function createPartnerExpenseConnectionRequestToJSON(
  createPartnerExpenseConnectionRequest: CreatePartnerExpenseConnectionRequest,
): string {
  return JSON.stringify(
    CreatePartnerExpenseConnectionRequest$outboundSchema.parse(
      createPartnerExpenseConnectionRequest,
    ),
  );
}

export function createPartnerExpenseConnectionRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreatePartnerExpenseConnectionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreatePartnerExpenseConnectionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePartnerExpenseConnectionRequest' from JSON`,
  );
}
