/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";
import * as z from "zod";

export type UpdateCustomerRequest = {
    /**
     * Unique identifier for a company.
     */
    companyId: string;
    /**
     * Unique identifier for a connection.
     */
    connectionId: string;
    /**
     * Unique identifier for a customer.
     */
    customerId: string;
    /**
     * Time limit for the push operation to complete before it is timed out.
     */
    timeoutInMinutes?: number | undefined;
    /**
     * Allow a sync upon push completion.
     */
    allowSyncOnPushComplete?: boolean | undefined;
    /**
     * When updating data in the destination platform Codat checks the `sourceModifiedDate` against the `lastupdated` date from the accounting platform, if they're different Codat will return an error suggesting you should initiate another pull of the data. If this is set to `true` then the update will override this check.
     */
    forceUpdate?: boolean | undefined;
    customer?: shared.Customer | null | undefined;
};

/** @internal */
export const UpdateCustomerRequest$inboundSchema: z.ZodType<
    UpdateCustomerRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        companyId: z.string(),
        connectionId: z.string(),
        customerId: z.string(),
        timeoutInMinutes: z.number().int().optional(),
        allowSyncOnPushComplete: z.boolean().default(true),
        forceUpdate: z.boolean().default(false),
        Customer: z.nullable(shared.Customer$inboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            Customer: "customer",
        });
    });

/** @internal */
export type UpdateCustomerRequest$Outbound = {
    companyId: string;
    connectionId: string;
    customerId: string;
    timeoutInMinutes?: number | undefined;
    allowSyncOnPushComplete: boolean;
    forceUpdate: boolean;
    Customer?: shared.Customer$Outbound | null | undefined;
};

/** @internal */
export const UpdateCustomerRequest$outboundSchema: z.ZodType<
    UpdateCustomerRequest$Outbound,
    z.ZodTypeDef,
    UpdateCustomerRequest
> = z
    .object({
        companyId: z.string(),
        connectionId: z.string(),
        customerId: z.string(),
        timeoutInMinutes: z.number().int().optional(),
        allowSyncOnPushComplete: z.boolean().default(true),
        forceUpdate: z.boolean().default(false),
        customer: z.nullable(shared.Customer$outboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            customer: "Customer",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCustomerRequest$ {
    /** @deprecated use `UpdateCustomerRequest$inboundSchema` instead. */
    export const inboundSchema = UpdateCustomerRequest$inboundSchema;
    /** @deprecated use `UpdateCustomerRequest$outboundSchema` instead. */
    export const outboundSchema = UpdateCustomerRequest$outboundSchema;
    /** @deprecated use `UpdateCustomerRequest$Outbound` instead. */
    export type Outbound = UpdateCustomerRequest$Outbound;
}
