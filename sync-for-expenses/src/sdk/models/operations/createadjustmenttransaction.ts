/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type CreateAdjustmentTransactionRequest = {
  /**
   * Unique identifier for a company.
   */
  companyId: string;
  requestBody?: Array<shared.AdjustmentTransactionRequest> | undefined;
};

/** @internal */
export const CreateAdjustmentTransactionRequest$inboundSchema: z.ZodType<
  CreateAdjustmentTransactionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  companyId: z.string(),
  RequestBody: z.array(shared.AdjustmentTransactionRequest$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreateAdjustmentTransactionRequest$Outbound = {
  companyId: string;
  RequestBody?: Array<shared.AdjustmentTransactionRequest$Outbound> | undefined;
};

/** @internal */
export const CreateAdjustmentTransactionRequest$outboundSchema: z.ZodType<
  CreateAdjustmentTransactionRequest$Outbound,
  z.ZodTypeDef,
  CreateAdjustmentTransactionRequest
> = z.object({
  companyId: z.string(),
  requestBody: z.array(shared.AdjustmentTransactionRequest$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAdjustmentTransactionRequest$ {
  /** @deprecated use `CreateAdjustmentTransactionRequest$inboundSchema` instead. */
  export const inboundSchema = CreateAdjustmentTransactionRequest$inboundSchema;
  /** @deprecated use `CreateAdjustmentTransactionRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreateAdjustmentTransactionRequest$outboundSchema;
  /** @deprecated use `CreateAdjustmentTransactionRequest$Outbound` instead. */
  export type Outbound = CreateAdjustmentTransactionRequest$Outbound;
}

export function createAdjustmentTransactionRequestToJSON(
  createAdjustmentTransactionRequest: CreateAdjustmentTransactionRequest,
): string {
  return JSON.stringify(
    CreateAdjustmentTransactionRequest$outboundSchema.parse(
      createAdjustmentTransactionRequest,
    ),
  );
}

export function createAdjustmentTransactionRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateAdjustmentTransactionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAdjustmentTransactionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAdjustmentTransactionRequest' from JSON`,
  );
}
