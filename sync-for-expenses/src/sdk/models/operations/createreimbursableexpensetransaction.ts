/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type CreateReimbursableExpenseTransactionRequest = {
  /**
   * Unique identifier for a company.
   */
  companyId: string;
  requestBody?: Array<shared.ReimbursableExpenseTransaction> | undefined;
};

/** @internal */
export const CreateReimbursableExpenseTransactionRequest$inboundSchema:
  z.ZodType<
    CreateReimbursableExpenseTransactionRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    companyId: z.string(),
    RequestBody: z.array(shared.ReimbursableExpenseTransaction$inboundSchema)
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      "RequestBody": "requestBody",
    });
  });

/** @internal */
export type CreateReimbursableExpenseTransactionRequest$Outbound = {
  companyId: string;
  RequestBody?:
    | Array<shared.ReimbursableExpenseTransaction$Outbound>
    | undefined;
};

/** @internal */
export const CreateReimbursableExpenseTransactionRequest$outboundSchema:
  z.ZodType<
    CreateReimbursableExpenseTransactionRequest$Outbound,
    z.ZodTypeDef,
    CreateReimbursableExpenseTransactionRequest
  > = z.object({
    companyId: z.string(),
    requestBody: z.array(shared.ReimbursableExpenseTransaction$outboundSchema)
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      requestBody: "RequestBody",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateReimbursableExpenseTransactionRequest$ {
  /** @deprecated use `CreateReimbursableExpenseTransactionRequest$inboundSchema` instead. */
  export const inboundSchema =
    CreateReimbursableExpenseTransactionRequest$inboundSchema;
  /** @deprecated use `CreateReimbursableExpenseTransactionRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreateReimbursableExpenseTransactionRequest$outboundSchema;
  /** @deprecated use `CreateReimbursableExpenseTransactionRequest$Outbound` instead. */
  export type Outbound = CreateReimbursableExpenseTransactionRequest$Outbound;
}

export function createReimbursableExpenseTransactionRequestToJSON(
  createReimbursableExpenseTransactionRequest:
    CreateReimbursableExpenseTransactionRequest,
): string {
  return JSON.stringify(
    CreateReimbursableExpenseTransactionRequest$outboundSchema.parse(
      createReimbursableExpenseTransactionRequest,
    ),
  );
}

export function createReimbursableExpenseTransactionRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateReimbursableExpenseTransactionRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateReimbursableExpenseTransactionRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateReimbursableExpenseTransactionRequest' from JSON`,
  );
}
