/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../types/decimal.js";
import {
    ValidTransactionTypes,
    ValidTransactionTypes$inboundSchema,
    ValidTransactionTypes$outboundSchema,
} from "./validtransactiontypes.js";
import * as z from "zod";

export type TaxRateMappingInfo = {
    /**
     * Unique identifier of tax rate.
     */
    id?: string | undefined;
    /**
     * Name of the tax rate in the accounting platform.
     */
    name?: string | undefined;
    /**
     * Code for the tax rate from the accounting platform.
     */
    code?: string | null | undefined;
    /**
     * Effective tax rate.
     */
    effectiveTaxRate?: Decimal$ | number | undefined;
    /**
     * Total (not compounded) sum of the components of a tax rate.
     */
    totalTaxRate?: Decimal$ | number | undefined;
    /**
     * Supported transaction types for the account.
     */
    validTransactionTypes?: Array<ValidTransactionTypes> | undefined;
};

/** @internal */
export const TaxRateMappingInfo$inboundSchema: z.ZodType<
    TaxRateMappingInfo,
    z.ZodTypeDef,
    unknown
> = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    code: z.nullable(z.string()).optional(),
    effectiveTaxRate: z
        .number()
        .transform((v) => new Decimal$(v))
        .optional(),
    totalTaxRate: z
        .number()
        .transform((v) => new Decimal$(v))
        .optional(),
    validTransactionTypes: z.array(ValidTransactionTypes$inboundSchema).optional(),
});

/** @internal */
export type TaxRateMappingInfo$Outbound = {
    id?: string | undefined;
    name?: string | undefined;
    code?: string | null | undefined;
    effectiveTaxRate?: number | undefined;
    totalTaxRate?: number | undefined;
    validTransactionTypes?: Array<string> | undefined;
};

/** @internal */
export const TaxRateMappingInfo$outboundSchema: z.ZodType<
    TaxRateMappingInfo$Outbound,
    z.ZodTypeDef,
    TaxRateMappingInfo
> = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    code: z.nullable(z.string()).optional(),
    effectiveTaxRate: z
        .union([z.instanceof(Decimal$), z.number()])
        .transform((v) => (typeof v === "number" ? v : v.toNumber()))
        .optional(),
    totalTaxRate: z
        .union([z.instanceof(Decimal$), z.number()])
        .transform((v) => (typeof v === "number" ? v : v.toNumber()))
        .optional(),
    validTransactionTypes: z.array(ValidTransactionTypes$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaxRateMappingInfo$ {
    /** @deprecated use `TaxRateMappingInfo$inboundSchema` instead. */
    export const inboundSchema = TaxRateMappingInfo$inboundSchema;
    /** @deprecated use `TaxRateMappingInfo$outboundSchema` instead. */
    export const outboundSchema = TaxRateMappingInfo$outboundSchema;
    /** @deprecated use `TaxRateMappingInfo$Outbound` instead. */
    export type Outbound = TaxRateMappingInfo$Outbound;
}
