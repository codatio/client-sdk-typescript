/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    AddresseItems,
    AddresseItems$inboundSchema,
    AddresseItems$Outbound,
    AddresseItems$outboundSchema,
} from "./addresseitems.js";
import {
    CustomerStatus,
    CustomerStatus$inboundSchema,
    CustomerStatus$outboundSchema,
} from "./customerstatus.js";
import {
    PhoneNumberType,
    PhoneNumberType$inboundSchema,
    PhoneNumberType$outboundSchema,
} from "./phonenumbertype.js";
import * as z from "zod";

export type Phone = {
    /**
     * A phone number.
     */
    number?: string | null | undefined;
    /**
     * The type of phone number
     */
    type: PhoneNumberType;
};

export type Contact = {
    /**
     * Name of a contact for a customer.
     */
    name?: string | null | undefined;
    /**
     * Email of a contact for a customer.
     */
    email?: string | null | undefined;
    /**
     * An array of Phone numbers.
     */
    phone?: Array<Phone> | null | undefined;
    address?: AddresseItems | undefined;
    /**
     * Status of customer.
     */
    status: CustomerStatus;
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    modifiedDate?: string | undefined;
};

/** @internal */
export const Phone$inboundSchema: z.ZodType<Phone, z.ZodTypeDef, unknown> = z.object({
    number: z.nullable(z.string()).optional(),
    type: PhoneNumberType$inboundSchema,
});

/** @internal */
export type Phone$Outbound = {
    number?: string | null | undefined;
    type: string;
};

/** @internal */
export const Phone$outboundSchema: z.ZodType<Phone$Outbound, z.ZodTypeDef, Phone> = z.object({
    number: z.nullable(z.string()).optional(),
    type: PhoneNumberType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Phone$ {
    /** @deprecated use `Phone$inboundSchema` instead. */
    export const inboundSchema = Phone$inboundSchema;
    /** @deprecated use `Phone$outboundSchema` instead. */
    export const outboundSchema = Phone$outboundSchema;
    /** @deprecated use `Phone$Outbound` instead. */
    export type Outbound = Phone$Outbound;
}

/** @internal */
export const Contact$inboundSchema: z.ZodType<Contact, z.ZodTypeDef, unknown> = z.object({
    name: z.nullable(z.string()).optional(),
    email: z.nullable(z.string()).optional(),
    phone: z.nullable(z.array(z.lazy(() => Phone$inboundSchema))).optional(),
    address: AddresseItems$inboundSchema.optional(),
    status: CustomerStatus$inboundSchema,
    modifiedDate: z.string().optional(),
});

/** @internal */
export type Contact$Outbound = {
    name?: string | null | undefined;
    email?: string | null | undefined;
    phone?: Array<Phone$Outbound> | null | undefined;
    address?: AddresseItems$Outbound | undefined;
    status: string;
    modifiedDate?: string | undefined;
};

/** @internal */
export const Contact$outboundSchema: z.ZodType<Contact$Outbound, z.ZodTypeDef, Contact> = z.object({
    name: z.nullable(z.string()).optional(),
    email: z.nullable(z.string()).optional(),
    phone: z.nullable(z.array(z.lazy(() => Phone$outboundSchema))).optional(),
    address: AddresseItems$outboundSchema.optional(),
    status: CustomerStatus$outboundSchema,
    modifiedDate: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Contact$ {
    /** @deprecated use `Contact$inboundSchema` instead. */
    export const inboundSchema = Contact$inboundSchema;
    /** @deprecated use `Contact$outboundSchema` instead. */
    export const outboundSchema = Contact$outboundSchema;
    /** @deprecated use `Contact$Outbound` instead. */
    export type Outbound = Contact$Outbound;
}
