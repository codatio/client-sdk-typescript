/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Decimal as Decimal$ } from "../../types/decimal.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ExpenseContactRef,
  ExpenseContactRef$inboundSchema,
  ExpenseContactRef$Outbound,
  ExpenseContactRef$outboundSchema,
} from "./expensecontactref.js";
import {
  ExpenseTransactionLine,
  ExpenseTransactionLine$inboundSchema,
  ExpenseTransactionLine$Outbound,
  ExpenseTransactionLine$outboundSchema,
} from "./expensetransactionline.js";

/**
 * The type of transaction.
 */
export const Type = {
  Payment: "Payment",
  Refund: "Refund",
  Reward: "Reward",
  Chargeback: "Chargeback",
} as const;
/**
 * The type of transaction.
 */
export type Type = ClosedEnum<typeof Type>;

export type BankAccountReference = {
  /**
   * Identifier of the bank account.
   */
  id?: string | undefined;
};

export type ExpenseTransaction = {
  /**
   * Your unique identifier for the transaction.
   */
  id: string;
  /**
   * The type of transaction.
   */
  type: Type;
  /**
   * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
   *
   * @remarks
   *
   * ```
   * 2020-10-08T22:40:50Z
   * 2021-01-01T00:00:00
   * ```
   *
   * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
   *
   * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
   * - Unqualified local time: `2021-11-15T01:00:00`
   * - UTC time offsets: `2021-11-15T01:00:00-05:00`
   *
   * > Time zones
   * >
   * > Not all dates from Codat will contain information about time zones.
   * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
   */
  issueDate: string;
  /**
   * Currency the transaction was recorded in.
   */
  currency: string;
  /**
   * Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
   *
   * @remarks
   *
   * Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.
   *
   * It is not possible to perform the currency conversion with two or more non-base currencies participating in the transaction. For example, if a company's base currency is USD, and it has a bill issued in EUR, then the bill payment must happen in USD or EUR.
   *
   * Where the currency rate is provided by the underlying accounting software, it will be available from Codat with the same precision (up to a maximum of 9 decimal places).
   *
   * For accounting software which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
   *
   * ## Examples with base currency of GBP
   *
   * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
   * | :--------------- | :------------- | :------------ | :------------------------- |
   * | **USD**          | $20            | 0.781         | £15.62                     |
   * | **EUR**          | €20            | 0.885         | £17.70                     |
   * | **RUB**          | ₽20            | 0.011         | £0.22                      |
   *
   * ## Examples with base currency of USD
   *
   * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
   * | :--------------- | :------------- | :------------ | :------------------------- |
   * | **GBP**          | £20            | 1.277         | $25.54                     |
   * | **EUR**          | €20            | 1.134         | $22.68                     |
   * | **RUB**          | ₽20            | 0.015         | $0.30                      |
   *
   * ### Integration-specific details
   *
   * | Integration       | Scenario                                        | System behavior                                                                                                                                                      |
   * |-------------------|-------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|
   * | QuickBooks Online | Transaction currency differs from base currency | If currency rate value is left `null`, a rate of 1 will be used by QBO by default. To override this, specify a currencyRate in the request body.  |
   */
  currencyRate?: Decimal$ | number | null | undefined;
  contactRef?: ExpenseContactRef | undefined;
  bankAccountRef?: BankAccountReference | undefined;
  /**
   * User-friendly reference for the expense transaction.
   */
  reference?: string | null | undefined;
  /**
   * Name of the merchant where the purchase took place
   */
  merchantName?: string | undefined;
  /**
   * Array of transaction lines.
   */
  lines?: Array<ExpenseTransactionLine> | undefined;
  /**
   * Any private, company notes about the transaction.
   */
  notes?: string | undefined;
  /**
   * This optional property, when set to true, posts the transaction to a drafted state. Note that postAsDraft is only supported in Microsoft Dynamics 365 Business Central.
   */
  postAsDraft?: boolean | null | undefined;
};

/** @internal */
export const Type$inboundSchema: z.ZodNativeEnum<typeof Type> = z.nativeEnum(
  Type,
);

/** @internal */
export const Type$outboundSchema: z.ZodNativeEnum<typeof Type> =
  Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Type$ {
  /** @deprecated use `Type$inboundSchema` instead. */
  export const inboundSchema = Type$inboundSchema;
  /** @deprecated use `Type$outboundSchema` instead. */
  export const outboundSchema = Type$outboundSchema;
}

/** @internal */
export const BankAccountReference$inboundSchema: z.ZodType<
  BankAccountReference,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
});

/** @internal */
export type BankAccountReference$Outbound = {
  id?: string | undefined;
};

/** @internal */
export const BankAccountReference$outboundSchema: z.ZodType<
  BankAccountReference$Outbound,
  z.ZodTypeDef,
  BankAccountReference
> = z.object({
  id: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BankAccountReference$ {
  /** @deprecated use `BankAccountReference$inboundSchema` instead. */
  export const inboundSchema = BankAccountReference$inboundSchema;
  /** @deprecated use `BankAccountReference$outboundSchema` instead. */
  export const outboundSchema = BankAccountReference$outboundSchema;
  /** @deprecated use `BankAccountReference$Outbound` instead. */
  export type Outbound = BankAccountReference$Outbound;
}

export function bankAccountReferenceToJSON(
  bankAccountReference: BankAccountReference,
): string {
  return JSON.stringify(
    BankAccountReference$outboundSchema.parse(bankAccountReference),
  );
}

export function bankAccountReferenceFromJSON(
  jsonString: string,
): SafeParseResult<BankAccountReference, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BankAccountReference$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BankAccountReference' from JSON`,
  );
}

/** @internal */
export const ExpenseTransaction$inboundSchema: z.ZodType<
  ExpenseTransaction,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: Type$inboundSchema,
  issueDate: z.string(),
  currency: z.string(),
  currencyRate: z.nullable(z.number().transform(v => new Decimal$(v)))
    .optional(),
  contactRef: ExpenseContactRef$inboundSchema.optional(),
  bankAccountRef: z.lazy(() => BankAccountReference$inboundSchema).optional(),
  reference: z.nullable(z.string()).optional(),
  merchantName: z.string().optional(),
  lines: z.array(ExpenseTransactionLine$inboundSchema).optional(),
  notes: z.string().optional(),
  postAsDraft: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type ExpenseTransaction$Outbound = {
  id: string;
  type: string;
  issueDate: string;
  currency: string;
  currencyRate?: number | null | undefined;
  contactRef?: ExpenseContactRef$Outbound | undefined;
  bankAccountRef?: BankAccountReference$Outbound | undefined;
  reference?: string | null | undefined;
  merchantName?: string | undefined;
  lines?: Array<ExpenseTransactionLine$Outbound> | undefined;
  notes?: string | undefined;
  postAsDraft?: boolean | null | undefined;
};

/** @internal */
export const ExpenseTransaction$outboundSchema: z.ZodType<
  ExpenseTransaction$Outbound,
  z.ZodTypeDef,
  ExpenseTransaction
> = z.object({
  id: z.string(),
  type: Type$outboundSchema,
  issueDate: z.string(),
  currency: z.string(),
  currencyRate: z.nullable(
    z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
      typeof v === "number" ? v : v.toNumber()
    ),
  ).optional(),
  contactRef: ExpenseContactRef$outboundSchema.optional(),
  bankAccountRef: z.lazy(() => BankAccountReference$outboundSchema).optional(),
  reference: z.nullable(z.string()).optional(),
  merchantName: z.string().optional(),
  lines: z.array(ExpenseTransactionLine$outboundSchema).optional(),
  notes: z.string().optional(),
  postAsDraft: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExpenseTransaction$ {
  /** @deprecated use `ExpenseTransaction$inboundSchema` instead. */
  export const inboundSchema = ExpenseTransaction$inboundSchema;
  /** @deprecated use `ExpenseTransaction$outboundSchema` instead. */
  export const outboundSchema = ExpenseTransaction$outboundSchema;
  /** @deprecated use `ExpenseTransaction$Outbound` instead. */
  export type Outbound = ExpenseTransaction$Outbound;
}

export function expenseTransactionToJSON(
  expenseTransaction: ExpenseTransaction,
): string {
  return JSON.stringify(
    ExpenseTransaction$outboundSchema.parse(expenseTransaction),
  );
}

export function expenseTransactionFromJSON(
  jsonString: string,
): SafeParseResult<ExpenseTransaction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExpenseTransaction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExpenseTransaction' from JSON`,
  );
}
