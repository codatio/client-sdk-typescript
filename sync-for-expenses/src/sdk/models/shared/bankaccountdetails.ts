/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type BankAccountDetails = {
  /**
   * The id of the account from which purchases are made
   */
  id?: string | undefined;
};

/** @internal */
export const BankAccountDetails$inboundSchema: z.ZodType<
  BankAccountDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
});

/** @internal */
export type BankAccountDetails$Outbound = {
  id?: string | undefined;
};

/** @internal */
export const BankAccountDetails$outboundSchema: z.ZodType<
  BankAccountDetails$Outbound,
  z.ZodTypeDef,
  BankAccountDetails
> = z.object({
  id: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BankAccountDetails$ {
  /** @deprecated use `BankAccountDetails$inboundSchema` instead. */
  export const inboundSchema = BankAccountDetails$inboundSchema;
  /** @deprecated use `BankAccountDetails$outboundSchema` instead. */
  export const outboundSchema = BankAccountDetails$outboundSchema;
  /** @deprecated use `BankAccountDetails$Outbound` instead. */
  export type Outbound = BankAccountDetails$Outbound;
}

export function bankAccountDetailsToJSON(
  bankAccountDetails: BankAccountDetails,
): string {
  return JSON.stringify(
    BankAccountDetails$outboundSchema.parse(bankAccountDetails),
  );
}

export function bankAccountDetailsFromJSON(
  jsonString: string,
): SafeParseResult<BankAccountDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BankAccountDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BankAccountDetails' from JSON`,
  );
}
