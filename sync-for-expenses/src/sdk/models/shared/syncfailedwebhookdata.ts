/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SyncFailedWebhookData = {
  /**
   * Unique identifier for the failed sync.
   */
  syncId?: string | undefined;
  /**
   * The type of sync being performed.
   */
  syncType?: string | undefined;
  /**
   * The stage of the job the sync failed.
   */
  failureStage?: string | undefined;
};

/** @internal */
export const SyncFailedWebhookData$inboundSchema: z.ZodType<
  SyncFailedWebhookData,
  z.ZodTypeDef,
  unknown
> = z.object({
  syncId: z.string().optional(),
  syncType: z.string().optional(),
  FailureStage: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "FailureStage": "failureStage",
  });
});

/** @internal */
export type SyncFailedWebhookData$Outbound = {
  syncId?: string | undefined;
  syncType?: string | undefined;
  FailureStage?: string | undefined;
};

/** @internal */
export const SyncFailedWebhookData$outboundSchema: z.ZodType<
  SyncFailedWebhookData$Outbound,
  z.ZodTypeDef,
  SyncFailedWebhookData
> = z.object({
  syncId: z.string().optional(),
  syncType: z.string().optional(),
  failureStage: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    failureStage: "FailureStage",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SyncFailedWebhookData$ {
  /** @deprecated use `SyncFailedWebhookData$inboundSchema` instead. */
  export const inboundSchema = SyncFailedWebhookData$inboundSchema;
  /** @deprecated use `SyncFailedWebhookData$outboundSchema` instead. */
  export const outboundSchema = SyncFailedWebhookData$outboundSchema;
  /** @deprecated use `SyncFailedWebhookData$Outbound` instead. */
  export type Outbound = SyncFailedWebhookData$Outbound;
}

export function syncFailedWebhookDataToJSON(
  syncFailedWebhookData: SyncFailedWebhookData,
): string {
  return JSON.stringify(
    SyncFailedWebhookData$outboundSchema.parse(syncFailedWebhookData),
  );
}

export function syncFailedWebhookDataFromJSON(
  jsonString: string,
): SafeParseResult<SyncFailedWebhookData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SyncFailedWebhookData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SyncFailedWebhookData' from JSON`,
  );
}
