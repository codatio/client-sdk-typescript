/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  BankAccountDetails,
  BankAccountDetails$inboundSchema,
  BankAccountDetails$Outbound,
  BankAccountDetails$outboundSchema,
} from "./bankaccountdetails.js";
import {
  CustomerDetails,
  CustomerDetails$inboundSchema,
  CustomerDetails$Outbound,
  CustomerDetails$outboundSchema,
} from "./customerdetails.js";
import {
  SupplierDetails,
  SupplierDetails$inboundSchema,
  SupplierDetails$Outbound,
  SupplierDetails$outboundSchema,
} from "./supplierdetails.js";

export type CompanyConfiguration = {
  bankAccount: BankAccountDetails;
  supplier: SupplierDetails;
  customer: CustomerDetails;
};

/** @internal */
export const CompanyConfiguration$inboundSchema: z.ZodType<
  CompanyConfiguration,
  z.ZodTypeDef,
  unknown
> = z.object({
  bankAccount: BankAccountDetails$inboundSchema,
  supplier: SupplierDetails$inboundSchema,
  customer: CustomerDetails$inboundSchema,
});

/** @internal */
export type CompanyConfiguration$Outbound = {
  bankAccount: BankAccountDetails$Outbound;
  supplier: SupplierDetails$Outbound;
  customer: CustomerDetails$Outbound;
};

/** @internal */
export const CompanyConfiguration$outboundSchema: z.ZodType<
  CompanyConfiguration$Outbound,
  z.ZodTypeDef,
  CompanyConfiguration
> = z.object({
  bankAccount: BankAccountDetails$outboundSchema,
  supplier: SupplierDetails$outboundSchema,
  customer: CustomerDetails$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompanyConfiguration$ {
  /** @deprecated use `CompanyConfiguration$inboundSchema` instead. */
  export const inboundSchema = CompanyConfiguration$inboundSchema;
  /** @deprecated use `CompanyConfiguration$outboundSchema` instead. */
  export const outboundSchema = CompanyConfiguration$outboundSchema;
  /** @deprecated use `CompanyConfiguration$Outbound` instead. */
  export type Outbound = CompanyConfiguration$Outbound;
}

export function companyConfigurationToJSON(
  companyConfiguration: CompanyConfiguration,
): string {
  return JSON.stringify(
    CompanyConfiguration$outboundSchema.parse(companyConfiguration),
  );
}

export function companyConfigurationFromJSON(
  jsonString: string,
): SafeParseResult<CompanyConfiguration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompanyConfiguration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompanyConfiguration' from JSON`,
  );
}
