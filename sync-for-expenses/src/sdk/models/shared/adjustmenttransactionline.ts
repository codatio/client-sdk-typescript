/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../types/decimal.js";
import {
    InvoiceTo,
    InvoiceTo$inboundSchema,
    InvoiceTo$Outbound,
    InvoiceTo$outboundSchema,
} from "./invoiceto.js";
import {
    RecordRef,
    RecordRef$inboundSchema,
    RecordRef$Outbound,
    RecordRef$outboundSchema,
} from "./recordref.js";
import {
    TrackingRef,
    TrackingRef$inboundSchema,
    TrackingRef$Outbound,
    TrackingRef$outboundSchema,
} from "./trackingref.js";
import * as z from "zod";

export type AdjustmentTransactionLine = {
    /**
     * Amount of the line. A positive line represents a debit; a negative line represents a credit.
     */
    amount: Decimal$ | number;
    accountRef: RecordRef;
    /**
     * Any private, company notes about the transaction.
     */
    description?: string | undefined;
    trackingRefs?: Array<TrackingRef> | null | undefined;
    /**
     * Unique identifier of the customer the expense is billable to. The invoiceTo object is currently only supported for QBO and QBD.
     */
    invoiceTo?: InvoiceTo | null | undefined;
};

/** @internal */
export const AdjustmentTransactionLine$inboundSchema: z.ZodType<
    AdjustmentTransactionLine,
    z.ZodTypeDef,
    unknown
> = z.object({
    amount: z.number().transform((v) => new Decimal$(v)),
    accountRef: RecordRef$inboundSchema,
    description: z.string().optional(),
    trackingRefs: z.nullable(z.array(TrackingRef$inboundSchema)).optional(),
    invoiceTo: z.nullable(InvoiceTo$inboundSchema).optional(),
});

/** @internal */
export type AdjustmentTransactionLine$Outbound = {
    amount: number;
    accountRef: RecordRef$Outbound;
    description?: string | undefined;
    trackingRefs?: Array<TrackingRef$Outbound> | null | undefined;
    invoiceTo?: InvoiceTo$Outbound | null | undefined;
};

/** @internal */
export const AdjustmentTransactionLine$outboundSchema: z.ZodType<
    AdjustmentTransactionLine$Outbound,
    z.ZodTypeDef,
    AdjustmentTransactionLine
> = z.object({
    amount: z
        .union([z.instanceof(Decimal$), z.number()])
        .transform((v) => (typeof v === "number" ? v : v.toNumber())),
    accountRef: RecordRef$outboundSchema,
    description: z.string().optional(),
    trackingRefs: z.nullable(z.array(TrackingRef$outboundSchema)).optional(),
    invoiceTo: z.nullable(InvoiceTo$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AdjustmentTransactionLine$ {
    /** @deprecated use `AdjustmentTransactionLine$inboundSchema` instead. */
    export const inboundSchema = AdjustmentTransactionLine$inboundSchema;
    /** @deprecated use `AdjustmentTransactionLine$outboundSchema` instead. */
    export const outboundSchema = AdjustmentTransactionLine$outboundSchema;
    /** @deprecated use `AdjustmentTransactionLine$Outbound` instead. */
    export type Outbound = AdjustmentTransactionLine$Outbound;
}
