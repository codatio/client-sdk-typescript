/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Decimal as Decimal$ } from "../../types/decimal.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  InvoiceTo,
  InvoiceTo$inboundSchema,
  InvoiceTo$Outbound,
  InvoiceTo$outboundSchema,
} from "./invoiceto.js";
import {
  RecordRef,
  RecordRef$inboundSchema,
  RecordRef$Outbound,
  RecordRef$outboundSchema,
} from "./recordref.js";
import {
  TrackingRefAdjustmentTransaction,
  TrackingRefAdjustmentTransaction$inboundSchema,
  TrackingRefAdjustmentTransaction$Outbound,
  TrackingRefAdjustmentTransaction$outboundSchema,
} from "./trackingrefadjustmenttransaction.js";

export type AdjustmentTransactionLine = {
  /**
   * Amount of the line. A positive line represents a debit; a negative line represents a credit.
   */
  amount: Decimal$ | number;
  accountRef: RecordRef;
  /**
   * Any private, company notes about the transaction.
   */
  description?: string | undefined;
  trackingRefs?: Array<TrackingRefAdjustmentTransaction> | null | undefined;
  /**
   * Unique identifier for the customer billed for the transaction. The `invoiceTo` object is currently supported only for QuickBooks Online and QuickBooks Desktop.
   */
  invoiceTo?: InvoiceTo | null | undefined;
};

/** @internal */
export const AdjustmentTransactionLine$inboundSchema: z.ZodType<
  AdjustmentTransactionLine,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number().transform(v => new Decimal$(v)),
  accountRef: RecordRef$inboundSchema,
  description: z.string().optional(),
  trackingRefs: z.nullable(
    z.array(TrackingRefAdjustmentTransaction$inboundSchema),
  ).optional(),
  invoiceTo: z.nullable(InvoiceTo$inboundSchema).optional(),
});

/** @internal */
export type AdjustmentTransactionLine$Outbound = {
  amount: number;
  accountRef: RecordRef$Outbound;
  description?: string | undefined;
  trackingRefs?:
    | Array<TrackingRefAdjustmentTransaction$Outbound>
    | null
    | undefined;
  invoiceTo?: InvoiceTo$Outbound | null | undefined;
};

/** @internal */
export const AdjustmentTransactionLine$outboundSchema: z.ZodType<
  AdjustmentTransactionLine$Outbound,
  z.ZodTypeDef,
  AdjustmentTransactionLine
> = z.object({
  amount: z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
    typeof v === "number" ? v : v.toNumber()
  ),
  accountRef: RecordRef$outboundSchema,
  description: z.string().optional(),
  trackingRefs: z.nullable(
    z.array(TrackingRefAdjustmentTransaction$outboundSchema),
  ).optional(),
  invoiceTo: z.nullable(InvoiceTo$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AdjustmentTransactionLine$ {
  /** @deprecated use `AdjustmentTransactionLine$inboundSchema` instead. */
  export const inboundSchema = AdjustmentTransactionLine$inboundSchema;
  /** @deprecated use `AdjustmentTransactionLine$outboundSchema` instead. */
  export const outboundSchema = AdjustmentTransactionLine$outboundSchema;
  /** @deprecated use `AdjustmentTransactionLine$Outbound` instead. */
  export type Outbound = AdjustmentTransactionLine$Outbound;
}

export function adjustmentTransactionLineToJSON(
  adjustmentTransactionLine: AdjustmentTransactionLine,
): string {
  return JSON.stringify(
    AdjustmentTransactionLine$outboundSchema.parse(adjustmentTransactionLine),
  );
}

export function adjustmentTransactionLineFromJSON(
  jsonString: string,
): SafeParseResult<AdjustmentTransactionLine, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AdjustmentTransactionLine$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AdjustmentTransactionLine' from JSON`,
  );
}
