/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Supplemental data is additional data you can include in our standard data types.
 *
 * @remarks
 *
 * It is referenced as a configured dynamic key value pair that is unique to the accounting software. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
 */
export type SupplementalData = {
  content?: { [k: string]: { [k: string]: any } } | null | undefined;
};

/** @internal */
export const SupplementalData$inboundSchema: z.ZodType<
  SupplementalData,
  z.ZodTypeDef,
  unknown
> = z.object({
  content: z.nullable(z.record(z.record(z.any()))).optional(),
});

/** @internal */
export type SupplementalData$Outbound = {
  content?: { [k: string]: { [k: string]: any } } | null | undefined;
};

/** @internal */
export const SupplementalData$outboundSchema: z.ZodType<
  SupplementalData$Outbound,
  z.ZodTypeDef,
  SupplementalData
> = z.object({
  content: z.nullable(z.record(z.record(z.any()))).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SupplementalData$ {
  /** @deprecated use `SupplementalData$inboundSchema` instead. */
  export const inboundSchema = SupplementalData$inboundSchema;
  /** @deprecated use `SupplementalData$outboundSchema` instead. */
  export const outboundSchema = SupplementalData$outboundSchema;
  /** @deprecated use `SupplementalData$Outbound` instead. */
  export type Outbound = SupplementalData$Outbound;
}

export function supplementalDataToJSON(
  supplementalData: SupplementalData,
): string {
  return JSON.stringify(
    SupplementalData$outboundSchema.parse(supplementalData),
  );
}

export function supplementalDataFromJSON(
  jsonString: string,
): SafeParseResult<SupplementalData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SupplementalData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SupplementalData' from JSON`,
  );
}
