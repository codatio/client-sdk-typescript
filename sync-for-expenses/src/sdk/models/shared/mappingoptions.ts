/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AccountMappingInfo,
  AccountMappingInfo$inboundSchema,
  AccountMappingInfo$Outbound,
  AccountMappingInfo$outboundSchema,
} from "./accountmappinginfo.js";
import {
  TaxRateMappingInfo,
  TaxRateMappingInfo$inboundSchema,
  TaxRateMappingInfo$Outbound,
  TaxRateMappingInfo$outboundSchema,
} from "./taxratemappinginfo.js";
import {
  TrackingCategoryMappingInfo,
  TrackingCategoryMappingInfo$inboundSchema,
  TrackingCategoryMappingInfo$Outbound,
  TrackingCategoryMappingInfo$outboundSchema,
} from "./trackingcategorymappinginfo.js";

export type MappingOptions = {
  /**
   * Name of the expense integration.
   */
  expenseProvider?: string | null | undefined;
  /**
   * Array of available accounts for mapping.
   */
  accounts?: Array<AccountMappingInfo> | null | undefined;
  /**
   * Array of available tracking categories for mapping.
   */
  trackingCategories?: Array<TrackingCategoryMappingInfo> | null | undefined;
  /**
   * Array of available tax rates for mapping.
   */
  taxRates?: Array<TaxRateMappingInfo> | null | undefined;
};

/** @internal */
export const MappingOptions$inboundSchema: z.ZodType<
  MappingOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  expenseProvider: z.nullable(z.string()).optional(),
  accounts: z.nullable(z.array(AccountMappingInfo$inboundSchema)).optional(),
  trackingCategories: z.nullable(
    z.array(TrackingCategoryMappingInfo$inboundSchema),
  ).optional(),
  taxRates: z.nullable(z.array(TaxRateMappingInfo$inboundSchema)).optional(),
});

/** @internal */
export type MappingOptions$Outbound = {
  expenseProvider?: string | null | undefined;
  accounts?: Array<AccountMappingInfo$Outbound> | null | undefined;
  trackingCategories?:
    | Array<TrackingCategoryMappingInfo$Outbound>
    | null
    | undefined;
  taxRates?: Array<TaxRateMappingInfo$Outbound> | null | undefined;
};

/** @internal */
export const MappingOptions$outboundSchema: z.ZodType<
  MappingOptions$Outbound,
  z.ZodTypeDef,
  MappingOptions
> = z.object({
  expenseProvider: z.nullable(z.string()).optional(),
  accounts: z.nullable(z.array(AccountMappingInfo$outboundSchema)).optional(),
  trackingCategories: z.nullable(
    z.array(TrackingCategoryMappingInfo$outboundSchema),
  ).optional(),
  taxRates: z.nullable(z.array(TaxRateMappingInfo$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MappingOptions$ {
  /** @deprecated use `MappingOptions$inboundSchema` instead. */
  export const inboundSchema = MappingOptions$inboundSchema;
  /** @deprecated use `MappingOptions$outboundSchema` instead. */
  export const outboundSchema = MappingOptions$outboundSchema;
  /** @deprecated use `MappingOptions$Outbound` instead. */
  export type Outbound = MappingOptions$Outbound;
}

export function mappingOptionsToJSON(mappingOptions: MappingOptions): string {
  return JSON.stringify(MappingOptions$outboundSchema.parse(mappingOptions));
}

export function mappingOptionsFromJSON(
  jsonString: string,
): SafeParseResult<MappingOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MappingOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MappingOptions' from JSON`,
  );
}
