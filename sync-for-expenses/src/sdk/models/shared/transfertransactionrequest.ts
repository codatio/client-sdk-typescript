/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../types/decimal.js";
import * as z from "zod";

/**
 * Reference of the account you are transferring money from.
 */
export type AccountReference = {
    /**
     * 'id' from the Accounts data type.
     */
    id: string;
};

export type From = {
    /**
     * Reference of the account you are transferring money from.
     */
    accountRef: AccountReference;
    /**
     * Amount that has been transferred from the account in the native currency of the account.
     */
    amount: Decimal$ | number;
};

/**
 * Reference of the account you are transferring money to.
 */
export type TransferTransactionRequestAccountReference = {
    /**
     * 'id' from the Accounts data type.
     */
    id: string;
};

export type To = {
    /**
     * Reference of the account you are transferring money to.
     */
    accountRef: TransferTransactionRequestAccountReference;
    /**
     * Amount that has been transferred to the account in the native currency of the account.
     */
    amount: Decimal$ | number;
};

export type TransferTransactionRequest = {
    /**
     * Any private, company notes about the transaction.
     */
    description?: string | undefined;
    date: string;
    from: From;
    to: To;
};

/** @internal */
export const AccountReference$inboundSchema: z.ZodType<AccountReference, z.ZodTypeDef, unknown> =
    z.object({
        id: z.string(),
    });

/** @internal */
export type AccountReference$Outbound = {
    id: string;
};

/** @internal */
export const AccountReference$outboundSchema: z.ZodType<
    AccountReference$Outbound,
    z.ZodTypeDef,
    AccountReference
> = z.object({
    id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountReference$ {
    /** @deprecated use `AccountReference$inboundSchema` instead. */
    export const inboundSchema = AccountReference$inboundSchema;
    /** @deprecated use `AccountReference$outboundSchema` instead. */
    export const outboundSchema = AccountReference$outboundSchema;
    /** @deprecated use `AccountReference$Outbound` instead. */
    export type Outbound = AccountReference$Outbound;
}

/** @internal */
export const From$inboundSchema: z.ZodType<From, z.ZodTypeDef, unknown> = z.object({
    accountRef: z.lazy(() => AccountReference$inboundSchema),
    amount: z.number().transform((v) => new Decimal$(v)),
});

/** @internal */
export type From$Outbound = {
    accountRef: AccountReference$Outbound;
    amount: number;
};

/** @internal */
export const From$outboundSchema: z.ZodType<From$Outbound, z.ZodTypeDef, From> = z.object({
    accountRef: z.lazy(() => AccountReference$outboundSchema),
    amount: z
        .union([z.instanceof(Decimal$), z.number()])
        .transform((v) => (typeof v === "number" ? v : v.toNumber())),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace From$ {
    /** @deprecated use `From$inboundSchema` instead. */
    export const inboundSchema = From$inboundSchema;
    /** @deprecated use `From$outboundSchema` instead. */
    export const outboundSchema = From$outboundSchema;
    /** @deprecated use `From$Outbound` instead. */
    export type Outbound = From$Outbound;
}

/** @internal */
export const TransferTransactionRequestAccountReference$inboundSchema: z.ZodType<
    TransferTransactionRequestAccountReference,
    z.ZodTypeDef,
    unknown
> = z.object({
    id: z.string(),
});

/** @internal */
export type TransferTransactionRequestAccountReference$Outbound = {
    id: string;
};

/** @internal */
export const TransferTransactionRequestAccountReference$outboundSchema: z.ZodType<
    TransferTransactionRequestAccountReference$Outbound,
    z.ZodTypeDef,
    TransferTransactionRequestAccountReference
> = z.object({
    id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransferTransactionRequestAccountReference$ {
    /** @deprecated use `TransferTransactionRequestAccountReference$inboundSchema` instead. */
    export const inboundSchema = TransferTransactionRequestAccountReference$inboundSchema;
    /** @deprecated use `TransferTransactionRequestAccountReference$outboundSchema` instead. */
    export const outboundSchema = TransferTransactionRequestAccountReference$outboundSchema;
    /** @deprecated use `TransferTransactionRequestAccountReference$Outbound` instead. */
    export type Outbound = TransferTransactionRequestAccountReference$Outbound;
}

/** @internal */
export const To$inboundSchema: z.ZodType<To, z.ZodTypeDef, unknown> = z.object({
    accountRef: z.lazy(() => TransferTransactionRequestAccountReference$inboundSchema),
    amount: z.number().transform((v) => new Decimal$(v)),
});

/** @internal */
export type To$Outbound = {
    accountRef: TransferTransactionRequestAccountReference$Outbound;
    amount: number;
};

/** @internal */
export const To$outboundSchema: z.ZodType<To$Outbound, z.ZodTypeDef, To> = z.object({
    accountRef: z.lazy(() => TransferTransactionRequestAccountReference$outboundSchema),
    amount: z
        .union([z.instanceof(Decimal$), z.number()])
        .transform((v) => (typeof v === "number" ? v : v.toNumber())),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace To$ {
    /** @deprecated use `To$inboundSchema` instead. */
    export const inboundSchema = To$inboundSchema;
    /** @deprecated use `To$outboundSchema` instead. */
    export const outboundSchema = To$outboundSchema;
    /** @deprecated use `To$Outbound` instead. */
    export type Outbound = To$Outbound;
}

/** @internal */
export const TransferTransactionRequest$inboundSchema: z.ZodType<
    TransferTransactionRequest,
    z.ZodTypeDef,
    unknown
> = z.object({
    description: z.string().optional(),
    date: z.string(),
    from: z.lazy(() => From$inboundSchema),
    to: z.lazy(() => To$inboundSchema),
});

/** @internal */
export type TransferTransactionRequest$Outbound = {
    description?: string | undefined;
    date: string;
    from: From$Outbound;
    to: To$Outbound;
};

/** @internal */
export const TransferTransactionRequest$outboundSchema: z.ZodType<
    TransferTransactionRequest$Outbound,
    z.ZodTypeDef,
    TransferTransactionRequest
> = z.object({
    description: z.string().optional(),
    date: z.string(),
    from: z.lazy(() => From$outboundSchema),
    to: z.lazy(() => To$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransferTransactionRequest$ {
    /** @deprecated use `TransferTransactionRequest$inboundSchema` instead. */
    export const inboundSchema = TransferTransactionRequest$inboundSchema;
    /** @deprecated use `TransferTransactionRequest$outboundSchema` instead. */
    export const outboundSchema = TransferTransactionRequest$outboundSchema;
    /** @deprecated use `TransferTransactionRequest$Outbound` instead. */
    export type Outbound = TransferTransactionRequest$Outbound;
}
