/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ContactRef } from "./contactref";
import { ExpenseTransactionLine } from "./expensetransactionline";
import { Expose, Type } from "class-transformer";

export class UpdateExpenseRequestBankAccountReference extends SpeakeasyBase {
    /**
     * Identifier of the bank account.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: string;
}

export class UpdateExpenseRequest extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "bankAccountRef" })
    @Type(() => UpdateExpenseRequestBankAccountReference)
    bankAccountRef?: UpdateExpenseRequestBankAccountReference;

    @SpeakeasyMetadata()
    @Expose({ name: "contactRef" })
    @Type(() => ContactRef)
    contactRef?: ContactRef;

    /**
     * Currency the transaction was recorded in.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "currency" })
    currency?: string;

    /**
     * Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
     *
     * @remarks
     *
     * Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.
     *
     * It is not possible to perform the currency conversion with two or more non-base currencies participating in the transaction. For example, if a company's base currency is USD, and it has a bill issued in EUR, then the bill payment must happen in USD or EUR.
     *
     * Where the currency rate is provided by the underlying accounting platform, it will be available from Codat with the same precision (up to a maximum of 9 decimal places).
     *
     * For accounting platforms which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
     *
     * ## Examples with base currency of GBP
     *
     * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
     * | :--------------- | :------------- | :------------ | :------------------------- |
     * | **USD**          | $20            | 0.781         | £15.62                     |
     * | **EUR**          | €20            | 0.885         | £17.70                     |
     * | **RUB**          | ₽20            | 0.011         | £0.22                      |
     *
     * ## Examples with base currency of USD
     *
     * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
     * | :--------------- | :------------- | :------------ | :------------------------- |
     * | **GBP**          | £20            | 1.277         | $25.54                     |
     * | **EUR**          | €20            | 1.134         | $22.68                     |
     * | **RUB**          | ₽20            | 0.015         | $0.30                      |
     *
     *
     * ### Integration-specific details
     *
     * | Integration       | Scenario                                        | System behavior                                                                                                                                                      |
     * |-------------------|-------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|
     * | QuickBooks Online | Transaction currency differs from base currency | If currency rate value is left `null`, a rate of 1 will be used by QBO by default. To override this, include the required currency rate in the expense transaction.  |
     */
    @SpeakeasyMetadata()
    @Expose({ name: "currencyRate" })
    currencyRate?: number;

    /**
     * Date the transaction was recorded.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "issueDate" })
    issueDate: string;

    /**
     * Array of transaction lines.
     */
    @SpeakeasyMetadata({ elemType: ExpenseTransactionLine })
    @Expose({ name: "lines" })
    @Type(() => ExpenseTransactionLine)
    lines?: ExpenseTransactionLine[];

    /**
     * Name of the merchant where the purchase took place
     */
    @SpeakeasyMetadata()
    @Expose({ name: "merchantName" })
    merchantName?: string;

    /**
     * Any private, company notes about the transaction.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "notes" })
    notes?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "type" })
    type: any;
}
