/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";

export const ValidFor = {
  ExpenseTransactionsPayment: "expense-transactions.Payment",
  ExpenseTransactionsRefund: "expense-transactions.Refund",
  ExpenseTransactionsReward: "expense-transactions.Reward",
  ExpenseTransactionsChargeback: "expense-transactions.Chargeback",
  ReimbursableExpenseTransactions: "reimbursable-expense-transactions",
  TransferTransactions: "transfer-transactions",
  AdjustmentTransactions: "adjustment-transactions",
} as const;
export type ValidFor = ClosedEnum<typeof ValidFor>;

/** @internal */
export const ValidFor$inboundSchema: z.ZodNativeEnum<typeof ValidFor> = z
  .nativeEnum(ValidFor);

/** @internal */
export const ValidFor$outboundSchema: z.ZodNativeEnum<typeof ValidFor> =
  ValidFor$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ValidFor$ {
  /** @deprecated use `ValidFor$inboundSchema` instead. */
  export const inboundSchema = ValidFor$inboundSchema;
  /** @deprecated use `ValidFor$outboundSchema` instead. */
  export const outboundSchema = ValidFor$outboundSchema;
}
