/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CompanyReference,
  CompanyReference$inboundSchema,
  CompanyReference$Outbound,
  CompanyReference$outboundSchema,
} from "./companyreference.js";
import {
  DefinitionTransaction,
  DefinitionTransaction$inboundSchema,
  DefinitionTransaction$Outbound,
  DefinitionTransaction$outboundSchema,
} from "./definitiontransaction.js";

export type ExpensesSyncWebhookPayload = {
  referenceCompany?: CompanyReference | undefined;
  /**
   * Unique identifier of the sync.
   */
  syncId?: string | undefined;
  transactions?: Array<DefinitionTransaction> | undefined;
};

/** @internal */
export const ExpensesSyncWebhookPayload$inboundSchema: z.ZodType<
  ExpensesSyncWebhookPayload,
  z.ZodTypeDef,
  unknown
> = z.object({
  referenceCompany: CompanyReference$inboundSchema.optional(),
  syncId: z.string().optional(),
  transactions: z.array(DefinitionTransaction$inboundSchema).optional(),
});

/** @internal */
export type ExpensesSyncWebhookPayload$Outbound = {
  referenceCompany?: CompanyReference$Outbound | undefined;
  syncId?: string | undefined;
  transactions?: Array<DefinitionTransaction$Outbound> | undefined;
};

/** @internal */
export const ExpensesSyncWebhookPayload$outboundSchema: z.ZodType<
  ExpensesSyncWebhookPayload$Outbound,
  z.ZodTypeDef,
  ExpensesSyncWebhookPayload
> = z.object({
  referenceCompany: CompanyReference$outboundSchema.optional(),
  syncId: z.string().optional(),
  transactions: z.array(DefinitionTransaction$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExpensesSyncWebhookPayload$ {
  /** @deprecated use `ExpensesSyncWebhookPayload$inboundSchema` instead. */
  export const inboundSchema = ExpensesSyncWebhookPayload$inboundSchema;
  /** @deprecated use `ExpensesSyncWebhookPayload$outboundSchema` instead. */
  export const outboundSchema = ExpensesSyncWebhookPayload$outboundSchema;
  /** @deprecated use `ExpensesSyncWebhookPayload$Outbound` instead. */
  export type Outbound = ExpensesSyncWebhookPayload$Outbound;
}

export function expensesSyncWebhookPayloadToJSON(
  expensesSyncWebhookPayload: ExpensesSyncWebhookPayload,
): string {
  return JSON.stringify(
    ExpensesSyncWebhookPayload$outboundSchema.parse(expensesSyncWebhookPayload),
  );
}

export function expensesSyncWebhookPayloadFromJSON(
  jsonString: string,
): SafeParseResult<ExpensesSyncWebhookPayload, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExpensesSyncWebhookPayload$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExpensesSyncWebhookPayload' from JSON`,
  );
}
