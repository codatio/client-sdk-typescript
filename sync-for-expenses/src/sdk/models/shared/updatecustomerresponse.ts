/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    AccountingAddressType,
    AccountingAddressType$inboundSchema,
    AccountingAddressType$outboundSchema,
} from "./accountingaddresstype.js";
import {
    Contact,
    Contact$inboundSchema,
    Contact$Outbound,
    Contact$outboundSchema,
} from "./contact.js";
import {
    CustomerStatus,
    CustomerStatus$inboundSchema,
    CustomerStatus$outboundSchema,
} from "./customerstatus.js";
import {
    Metadata,
    Metadata$inboundSchema,
    Metadata$Outbound,
    Metadata$outboundSchema,
} from "./metadata.js";
import {
    PropertieDataType,
    PropertieDataType$inboundSchema,
    PropertieDataType$outboundSchema,
} from "./propertiedatatype.js";
import {
    PushOperationChange,
    PushOperationChange$inboundSchema,
    PushOperationChange$Outbound,
    PushOperationChange$outboundSchema,
} from "./pushoperationchange.js";
import {
    PushOperationStatus,
    PushOperationStatus$inboundSchema,
    PushOperationStatus$outboundSchema,
} from "./pushoperationstatus.js";
import {
    SupplementalData,
    SupplementalData$inboundSchema,
    SupplementalData$Outbound,
    SupplementalData$outboundSchema,
} from "./supplementaldata.js";
import {
    Validation,
    Validation$inboundSchema,
    Validation$Outbound,
    Validation$outboundSchema,
} from "./validation.js";
import * as z from "zod";

export type UpdateCustomerResponseAccountingAddress = {
    /**
     * The type of the address
     */
    type: AccountingAddressType;
    /**
     * Line 1 of the customer address.
     */
    line1?: string | null | undefined;
    /**
     * Line 2 of the customer address.
     */
    line2?: string | null | undefined;
    /**
     * City of the customer address.
     */
    city?: string | null | undefined;
    /**
     * Region of the customer address.
     */
    region?: string | null | undefined;
    /**
     * Country of the customer address.
     */
    country?: string | null | undefined;
    /**
     * Postal code or zip code.
     */
    postalCode?: string | null | undefined;
};

/**
 * > View the coverage for customers in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=customers" target="_blank">Data coverage explorer</a>.
 *
 * @remarks
 *
 * ## Overview
 *
 * A customer is a person or organisation that buys goods or services. From the Customers endpoints, you can retrieve a [list of all the customers of a company](https://api.codat.io/swagger/index.html#/Customers/get_companies__companyId__data_customers).
 *
 * Customers' data links to accounts receivable [invoices](https://docs.codat.io/sync-for-expenses-api#/schemas/Invoice).
 *
 *
 * @deprecated class: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export type UpdateCustomerResponseAccountingCustomer = {
    modifiedDate?: string | undefined;
    sourceModifiedDate?: string | undefined;
    /**
     * Identifier for the customer, unique to the company in the accounting platform.
     */
    id?: string | undefined;
    /**
     * Name of the customer as recorded in the accounting system, typically the company name.
     */
    customerName?: string | null | undefined;
    /**
     * Name of the main contact for the identified customer.
     */
    contactName?: string | null | undefined;
    /**
     * Email address the customer can be contacted by.
     */
    emailAddress?: string | null | undefined;
    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     *
     * @remarks
     *
     * ## Unknown currencies
     *
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction.
     *
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    defaultCurrency?: string | undefined;
    /**
     * Phone number the customer can be contacted by.
     */
    phone?: string | null | undefined;
    /**
     * An array of Addresses.
     */
    addresses?: Array<UpdateCustomerResponseAccountingAddress> | null | undefined;
    /**
     * An array of Contacts.
     */
    contacts?: Array<Contact> | null | undefined;
    /**
     * Company number. In the UK, this is typically the Companies House company registration number.
     */
    registrationNumber?: string | null | undefined;
    /**
     * Company tax number.
     */
    taxNumber?: string | null | undefined;
    /**
     * Status of customer.
     */
    status: CustomerStatus;
    metadata?: Metadata | undefined;
    /**
     * Supplemental data is additional data you can include in our standard data types.
     *
     * @remarks
     *
     * It is referenced as a configured dynamic key value pair that is unique to the accounting platform. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
     */
    supplementalData?: SupplementalData | undefined;
};

export type UpdateCustomerResponse = {
    data?: UpdateCustomerResponseAccountingCustomer | null | undefined;
    /**
     * Contains a single entry that communicates which record has changed and the manner in which it changed.
     */
    changes?: Array<PushOperationChange> | null | undefined;
    /**
     * Available data types
     */
    dataType?: PropertieDataType | undefined;
    /**
     * Unique identifier for your SMB in Codat.
     */
    companyId: string;
    /**
     * A unique identifier generated by Codat to represent this single push operation. This identifier can be used to track the status of the push, and should be persisted.
     */
    pushOperationKey: string;
    /**
     * Unique identifier for a company's data connection.
     */
    dataConnectionKey: string;
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    requestedOnUtc: string;
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    completedOnUtc?: string | undefined;
    /**
     * Number of minutes the push operation must complete within before it times out.
     */
    timeoutInMinutes?: number | null | undefined;
    /**
     * Number of seconds the push operation must complete within before it times out.
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    timeoutInSeconds?: number | null | undefined;
    /**
     * The current status of the push operation.
     */
    status: PushOperationStatus;
    /**
     * A message about the error.
     */
    errorMessage?: string | null | undefined;
    /**
     * A human-readable object describing validation decisions Codat has made when pushing data into the platform. If a push has failed because of validation errors, they will be detailed here.
     */
    validation?: Validation | undefined;
    /**
     * Push status code.
     */
    statusCode: number;
};

/** @internal */
export const UpdateCustomerResponseAccountingAddress$inboundSchema: z.ZodType<
    UpdateCustomerResponseAccountingAddress,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: AccountingAddressType$inboundSchema,
    line1: z.nullable(z.string()).optional(),
    line2: z.nullable(z.string()).optional(),
    city: z.nullable(z.string()).optional(),
    region: z.nullable(z.string()).optional(),
    country: z.nullable(z.string()).optional(),
    postalCode: z.nullable(z.string()).optional(),
});

/** @internal */
export type UpdateCustomerResponseAccountingAddress$Outbound = {
    type: string;
    line1?: string | null | undefined;
    line2?: string | null | undefined;
    city?: string | null | undefined;
    region?: string | null | undefined;
    country?: string | null | undefined;
    postalCode?: string | null | undefined;
};

/** @internal */
export const UpdateCustomerResponseAccountingAddress$outboundSchema: z.ZodType<
    UpdateCustomerResponseAccountingAddress$Outbound,
    z.ZodTypeDef,
    UpdateCustomerResponseAccountingAddress
> = z.object({
    type: AccountingAddressType$outboundSchema,
    line1: z.nullable(z.string()).optional(),
    line2: z.nullable(z.string()).optional(),
    city: z.nullable(z.string()).optional(),
    region: z.nullable(z.string()).optional(),
    country: z.nullable(z.string()).optional(),
    postalCode: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCustomerResponseAccountingAddress$ {
    /** @deprecated use `UpdateCustomerResponseAccountingAddress$inboundSchema` instead. */
    export const inboundSchema = UpdateCustomerResponseAccountingAddress$inboundSchema;
    /** @deprecated use `UpdateCustomerResponseAccountingAddress$outboundSchema` instead. */
    export const outboundSchema = UpdateCustomerResponseAccountingAddress$outboundSchema;
    /** @deprecated use `UpdateCustomerResponseAccountingAddress$Outbound` instead. */
    export type Outbound = UpdateCustomerResponseAccountingAddress$Outbound;
}

/** @internal */
export const UpdateCustomerResponseAccountingCustomer$inboundSchema: z.ZodType<
    UpdateCustomerResponseAccountingCustomer,
    z.ZodTypeDef,
    unknown
> = z.object({
    modifiedDate: z.string().optional(),
    sourceModifiedDate: z.string().optional(),
    id: z.string().optional(),
    customerName: z.nullable(z.string()).optional(),
    contactName: z.nullable(z.string()).optional(),
    emailAddress: z.nullable(z.string()).optional(),
    defaultCurrency: z.string().optional(),
    phone: z.nullable(z.string()).optional(),
    addresses: z
        .nullable(z.array(z.lazy(() => UpdateCustomerResponseAccountingAddress$inboundSchema)))
        .optional(),
    contacts: z.nullable(z.array(Contact$inboundSchema)).optional(),
    registrationNumber: z.nullable(z.string()).optional(),
    taxNumber: z.nullable(z.string()).optional(),
    status: CustomerStatus$inboundSchema,
    metadata: Metadata$inboundSchema.optional(),
    supplementalData: SupplementalData$inboundSchema.optional(),
});

/** @internal */
export type UpdateCustomerResponseAccountingCustomer$Outbound = {
    modifiedDate?: string | undefined;
    sourceModifiedDate?: string | undefined;
    id?: string | undefined;
    customerName?: string | null | undefined;
    contactName?: string | null | undefined;
    emailAddress?: string | null | undefined;
    defaultCurrency?: string | undefined;
    phone?: string | null | undefined;
    addresses?: Array<UpdateCustomerResponseAccountingAddress$Outbound> | null | undefined;
    contacts?: Array<Contact$Outbound> | null | undefined;
    registrationNumber?: string | null | undefined;
    taxNumber?: string | null | undefined;
    status: string;
    metadata?: Metadata$Outbound | undefined;
    supplementalData?: SupplementalData$Outbound | undefined;
};

/** @internal */
export const UpdateCustomerResponseAccountingCustomer$outboundSchema: z.ZodType<
    UpdateCustomerResponseAccountingCustomer$Outbound,
    z.ZodTypeDef,
    UpdateCustomerResponseAccountingCustomer
> = z.object({
    modifiedDate: z.string().optional(),
    sourceModifiedDate: z.string().optional(),
    id: z.string().optional(),
    customerName: z.nullable(z.string()).optional(),
    contactName: z.nullable(z.string()).optional(),
    emailAddress: z.nullable(z.string()).optional(),
    defaultCurrency: z.string().optional(),
    phone: z.nullable(z.string()).optional(),
    addresses: z
        .nullable(z.array(z.lazy(() => UpdateCustomerResponseAccountingAddress$outboundSchema)))
        .optional(),
    contacts: z.nullable(z.array(Contact$outboundSchema)).optional(),
    registrationNumber: z.nullable(z.string()).optional(),
    taxNumber: z.nullable(z.string()).optional(),
    status: CustomerStatus$outboundSchema,
    metadata: Metadata$outboundSchema.optional(),
    supplementalData: SupplementalData$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCustomerResponseAccountingCustomer$ {
    /** @deprecated use `UpdateCustomerResponseAccountingCustomer$inboundSchema` instead. */
    export const inboundSchema = UpdateCustomerResponseAccountingCustomer$inboundSchema;
    /** @deprecated use `UpdateCustomerResponseAccountingCustomer$outboundSchema` instead. */
    export const outboundSchema = UpdateCustomerResponseAccountingCustomer$outboundSchema;
    /** @deprecated use `UpdateCustomerResponseAccountingCustomer$Outbound` instead. */
    export type Outbound = UpdateCustomerResponseAccountingCustomer$Outbound;
}

/** @internal */
export const UpdateCustomerResponse$inboundSchema: z.ZodType<
    UpdateCustomerResponse,
    z.ZodTypeDef,
    unknown
> = z.object({
    data: z
        .nullable(z.lazy(() => UpdateCustomerResponseAccountingCustomer$inboundSchema))
        .optional(),
    changes: z.nullable(z.array(PushOperationChange$inboundSchema)).optional(),
    dataType: PropertieDataType$inboundSchema.optional(),
    companyId: z.string(),
    pushOperationKey: z.string(),
    dataConnectionKey: z.string(),
    requestedOnUtc: z.string(),
    completedOnUtc: z.string().optional(),
    timeoutInMinutes: z.nullable(z.number().int()).optional(),
    timeoutInSeconds: z.nullable(z.number().int()).optional(),
    status: PushOperationStatus$inboundSchema,
    errorMessage: z.nullable(z.string()).optional(),
    validation: Validation$inboundSchema.optional(),
    statusCode: z.number().int(),
});

/** @internal */
export type UpdateCustomerResponse$Outbound = {
    data?: UpdateCustomerResponseAccountingCustomer$Outbound | null | undefined;
    changes?: Array<PushOperationChange$Outbound> | null | undefined;
    dataType?: string | undefined;
    companyId: string;
    pushOperationKey: string;
    dataConnectionKey: string;
    requestedOnUtc: string;
    completedOnUtc?: string | undefined;
    timeoutInMinutes?: number | null | undefined;
    timeoutInSeconds?: number | null | undefined;
    status: string;
    errorMessage?: string | null | undefined;
    validation?: Validation$Outbound | undefined;
    statusCode: number;
};

/** @internal */
export const UpdateCustomerResponse$outboundSchema: z.ZodType<
    UpdateCustomerResponse$Outbound,
    z.ZodTypeDef,
    UpdateCustomerResponse
> = z.object({
    data: z
        .nullable(z.lazy(() => UpdateCustomerResponseAccountingCustomer$outboundSchema))
        .optional(),
    changes: z.nullable(z.array(PushOperationChange$outboundSchema)).optional(),
    dataType: PropertieDataType$outboundSchema.optional(),
    companyId: z.string(),
    pushOperationKey: z.string(),
    dataConnectionKey: z.string(),
    requestedOnUtc: z.string(),
    completedOnUtc: z.string().optional(),
    timeoutInMinutes: z.nullable(z.number().int()).optional(),
    timeoutInSeconds: z.nullable(z.number().int()).optional(),
    status: PushOperationStatus$outboundSchema,
    errorMessage: z.nullable(z.string()).optional(),
    validation: Validation$outboundSchema.optional(),
    statusCode: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCustomerResponse$ {
    /** @deprecated use `UpdateCustomerResponse$inboundSchema` instead. */
    export const inboundSchema = UpdateCustomerResponse$inboundSchema;
    /** @deprecated use `UpdateCustomerResponse$outboundSchema` instead. */
    export const outboundSchema = UpdateCustomerResponse$outboundSchema;
    /** @deprecated use `UpdateCustomerResponse$Outbound` instead. */
    export type Outbound = UpdateCustomerResponse$Outbound;
}
