/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ValidFor,
  ValidFor$inboundSchema,
  ValidFor$outboundSchema,
} from "./validfor.js";
import {
  ValidTransactionTypes,
  ValidTransactionTypes$inboundSchema,
  ValidTransactionTypes$outboundSchema,
} from "./validtransactiontypes.js";

/**
 * Type of the account.
 */
export const AccountMappingInfoAccountType = {
  Asset: "Asset",
  Liability: "Liability",
  Income: "Income",
  Expense: "Expense",
  Equity: "Equity",
} as const;
/**
 * Type of the account.
 */
export type AccountMappingInfoAccountType = ClosedEnum<
  typeof AccountMappingInfoAccountType
>;

export type AccountMappingInfo = {
  /**
   * Unique identifier of account.
   */
  id?: string | undefined;
  /**
   * Code used to identify each nominal account in the accounting software.
   */
  nominalCode?: string | null | undefined;
  /**
   * Name of the account as it appears in the company's accounting software.
   */
  name?: string | undefined;
  /**
   * Currency of the account.
   */
  currency?: string | undefined;
  /**
   * Type of the account.
   */
  accountType?: AccountMappingInfoAccountType | undefined;
  /**
   * Full account type and category of the account
   */
  fullyQualifiedCategory?: string | undefined;
  /**
   * Confirms whether the account is a bank account or not.
   */
  isBankAccount?: boolean | undefined;
  /**
   * Supported transaction types for the account.
   */
  validTransactionTypes?: Array<ValidTransactionTypes> | undefined;
  /**
   * Supported endpoints for the account.
   */
  validFor?: Array<ValidFor> | undefined;
};

/** @internal */
export const AccountMappingInfoAccountType$inboundSchema: z.ZodNativeEnum<
  typeof AccountMappingInfoAccountType
> = z.nativeEnum(AccountMappingInfoAccountType);

/** @internal */
export const AccountMappingInfoAccountType$outboundSchema: z.ZodNativeEnum<
  typeof AccountMappingInfoAccountType
> = AccountMappingInfoAccountType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountMappingInfoAccountType$ {
  /** @deprecated use `AccountMappingInfoAccountType$inboundSchema` instead. */
  export const inboundSchema = AccountMappingInfoAccountType$inboundSchema;
  /** @deprecated use `AccountMappingInfoAccountType$outboundSchema` instead. */
  export const outboundSchema = AccountMappingInfoAccountType$outboundSchema;
}

/** @internal */
export const AccountMappingInfo$inboundSchema: z.ZodType<
  AccountMappingInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  nominalCode: z.nullable(z.string()).optional(),
  name: z.string().optional(),
  currency: z.string().optional(),
  accountType: AccountMappingInfoAccountType$inboundSchema.optional(),
  fullyQualifiedCategory: z.string().optional(),
  isBankAccount: z.boolean().optional(),
  validTransactionTypes: z.array(ValidTransactionTypes$inboundSchema)
    .optional(),
  validFor: z.array(ValidFor$inboundSchema).optional(),
});

/** @internal */
export type AccountMappingInfo$Outbound = {
  id?: string | undefined;
  nominalCode?: string | null | undefined;
  name?: string | undefined;
  currency?: string | undefined;
  accountType?: string | undefined;
  fullyQualifiedCategory?: string | undefined;
  isBankAccount?: boolean | undefined;
  validTransactionTypes?: Array<string> | undefined;
  validFor?: Array<string> | undefined;
};

/** @internal */
export const AccountMappingInfo$outboundSchema: z.ZodType<
  AccountMappingInfo$Outbound,
  z.ZodTypeDef,
  AccountMappingInfo
> = z.object({
  id: z.string().optional(),
  nominalCode: z.nullable(z.string()).optional(),
  name: z.string().optional(),
  currency: z.string().optional(),
  accountType: AccountMappingInfoAccountType$outboundSchema.optional(),
  fullyQualifiedCategory: z.string().optional(),
  isBankAccount: z.boolean().optional(),
  validTransactionTypes: z.array(ValidTransactionTypes$outboundSchema)
    .optional(),
  validFor: z.array(ValidFor$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountMappingInfo$ {
  /** @deprecated use `AccountMappingInfo$inboundSchema` instead. */
  export const inboundSchema = AccountMappingInfo$inboundSchema;
  /** @deprecated use `AccountMappingInfo$outboundSchema` instead. */
  export const outboundSchema = AccountMappingInfo$outboundSchema;
  /** @deprecated use `AccountMappingInfo$Outbound` instead. */
  export type Outbound = AccountMappingInfo$Outbound;
}

export function accountMappingInfoToJSON(
  accountMappingInfo: AccountMappingInfo,
): string {
  return JSON.stringify(
    AccountMappingInfo$outboundSchema.parse(accountMappingInfo),
  );
}

export function accountMappingInfoFromJSON(
  jsonString: string,
): SafeParseResult<AccountMappingInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountMappingInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountMappingInfo' from JSON`,
  );
}
