/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import {
    ValidTransactionTypes,
    ValidTransactionTypes$inboundSchema,
    ValidTransactionTypes$outboundSchema,
} from "./validtransactiontypes.js";
import * as z from "zod";

/**
 * Type of the account.
 */
export const AccountMappingInfoAccountType = {
    Asset: "Asset",
    Liability: "Liability",
    Income: "Income",
    Expense: "Expense",
    Equity: "Equity",
} as const;
/**
 * Type of the account.
 */
export type AccountMappingInfoAccountType = ClosedEnum<typeof AccountMappingInfoAccountType>;

export type AccountMappingInfo = {
    /**
     * Unique identifier of account.
     */
    id?: string | undefined;
    /**
     * Name of the account as it appears in the company's accounting software.
     */
    name?: string | undefined;
    /**
     * Currency of the account.
     */
    currency?: string | undefined;
    /**
     * Type of the account.
     */
    accountType?: AccountMappingInfoAccountType | undefined;
    /**
     * Confirms whether the account is a bank account or not.
     */
    isBankAccount?: boolean | undefined;
    /**
     * Supported transaction types for the account.
     */
    validTransactionTypes?: Array<ValidTransactionTypes> | undefined;
};

/** @internal */
export const AccountMappingInfoAccountType$inboundSchema: z.ZodNativeEnum<
    typeof AccountMappingInfoAccountType
> = z.nativeEnum(AccountMappingInfoAccountType);

/** @internal */
export const AccountMappingInfoAccountType$outboundSchema: z.ZodNativeEnum<
    typeof AccountMappingInfoAccountType
> = AccountMappingInfoAccountType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountMappingInfoAccountType$ {
    /** @deprecated use `AccountMappingInfoAccountType$inboundSchema` instead. */
    export const inboundSchema = AccountMappingInfoAccountType$inboundSchema;
    /** @deprecated use `AccountMappingInfoAccountType$outboundSchema` instead. */
    export const outboundSchema = AccountMappingInfoAccountType$outboundSchema;
}

/** @internal */
export const AccountMappingInfo$inboundSchema: z.ZodType<
    AccountMappingInfo,
    z.ZodTypeDef,
    unknown
> = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    currency: z.string().optional(),
    accountType: AccountMappingInfoAccountType$inboundSchema.optional(),
    isBankAccount: z.boolean().optional(),
    validTransactionTypes: z.array(ValidTransactionTypes$inboundSchema).optional(),
});

/** @internal */
export type AccountMappingInfo$Outbound = {
    id?: string | undefined;
    name?: string | undefined;
    currency?: string | undefined;
    accountType?: string | undefined;
    isBankAccount?: boolean | undefined;
    validTransactionTypes?: Array<string> | undefined;
};

/** @internal */
export const AccountMappingInfo$outboundSchema: z.ZodType<
    AccountMappingInfo$Outbound,
    z.ZodTypeDef,
    AccountMappingInfo
> = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    currency: z.string().optional(),
    accountType: AccountMappingInfoAccountType$outboundSchema.optional(),
    isBankAccount: z.boolean().optional(),
    validTransactionTypes: z.array(ValidTransactionTypes$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountMappingInfo$ {
    /** @deprecated use `AccountMappingInfo$inboundSchema` instead. */
    export const inboundSchema = AccountMappingInfo$inboundSchema;
    /** @deprecated use `AccountMappingInfo$outboundSchema` instead. */
    export const outboundSchema = AccountMappingInfo$outboundSchema;
    /** @deprecated use `AccountMappingInfo$Outbound` instead. */
    export type Outbound = AccountMappingInfo$Outbound;
}
