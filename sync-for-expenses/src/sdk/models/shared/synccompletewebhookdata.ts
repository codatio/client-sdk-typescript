/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SyncCompleteWebhookData = {
  /**
   * Unique identifier for the failed sync.
   */
  syncId?: string | undefined;
  /**
   * The type of sync being performed.
   */
  syncType?: string | undefined;
};

/** @internal */
export const SyncCompleteWebhookData$inboundSchema: z.ZodType<
  SyncCompleteWebhookData,
  z.ZodTypeDef,
  unknown
> = z.object({
  syncId: z.string().optional(),
  syncType: z.string().optional(),
});

/** @internal */
export type SyncCompleteWebhookData$Outbound = {
  syncId?: string | undefined;
  syncType?: string | undefined;
};

/** @internal */
export const SyncCompleteWebhookData$outboundSchema: z.ZodType<
  SyncCompleteWebhookData$Outbound,
  z.ZodTypeDef,
  SyncCompleteWebhookData
> = z.object({
  syncId: z.string().optional(),
  syncType: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SyncCompleteWebhookData$ {
  /** @deprecated use `SyncCompleteWebhookData$inboundSchema` instead. */
  export const inboundSchema = SyncCompleteWebhookData$inboundSchema;
  /** @deprecated use `SyncCompleteWebhookData$outboundSchema` instead. */
  export const outboundSchema = SyncCompleteWebhookData$outboundSchema;
  /** @deprecated use `SyncCompleteWebhookData$Outbound` instead. */
  export type Outbound = SyncCompleteWebhookData$Outbound;
}

export function syncCompleteWebhookDataToJSON(
  syncCompleteWebhookData: SyncCompleteWebhookData,
): string {
  return JSON.stringify(
    SyncCompleteWebhookData$outboundSchema.parse(syncCompleteWebhookData),
  );
}

export function syncCompleteWebhookDataFromJSON(
  jsonString: string,
): SafeParseResult<SyncCompleteWebhookData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SyncCompleteWebhookData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SyncCompleteWebhookData' from JSON`,
  );
}
