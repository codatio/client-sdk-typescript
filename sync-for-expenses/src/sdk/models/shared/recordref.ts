/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RecordRef = {
  /**
   * Identifier of linked reference from mapping options.
   */
  id?: string | undefined;
};

/** @internal */
export const RecordRef$inboundSchema: z.ZodType<
  RecordRef,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
});

/** @internal */
export type RecordRef$Outbound = {
  id?: string | undefined;
};

/** @internal */
export const RecordRef$outboundSchema: z.ZodType<
  RecordRef$Outbound,
  z.ZodTypeDef,
  RecordRef
> = z.object({
  id: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecordRef$ {
  /** @deprecated use `RecordRef$inboundSchema` instead. */
  export const inboundSchema = RecordRef$inboundSchema;
  /** @deprecated use `RecordRef$outboundSchema` instead. */
  export const outboundSchema = RecordRef$outboundSchema;
  /** @deprecated use `RecordRef$Outbound` instead. */
  export type Outbound = RecordRef$Outbound;
}

export function recordRefToJSON(recordRef: RecordRef): string {
  return JSON.stringify(RecordRef$outboundSchema.parse(recordRef));
}

export function recordRefFromJSON(
  jsonString: string,
): SafeParseResult<RecordRef, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RecordRef$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RecordRef' from JSON`,
  );
}
