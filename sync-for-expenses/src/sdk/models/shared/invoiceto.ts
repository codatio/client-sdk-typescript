/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The type of contact.
 */
export const InvoiceToType = {
  Customer: "customer",
} as const;
/**
 * The type of contact.
 */
export type InvoiceToType = ClosedEnum<typeof InvoiceToType>;

/**
 * Unique identifier for the customer billed for the transaction. The `invoiceTo` object is currently supported only for QuickBooks Online and QuickBooks Desktop.
 */
export type InvoiceTo = {
  /**
   * identifier of customer.
   */
  id?: string | undefined;
  /**
   * The type of contact.
   */
  type?: InvoiceToType | undefined;
};

/** @internal */
export const InvoiceToType$inboundSchema: z.ZodNativeEnum<
  typeof InvoiceToType
> = z.nativeEnum(InvoiceToType);

/** @internal */
export const InvoiceToType$outboundSchema: z.ZodNativeEnum<
  typeof InvoiceToType
> = InvoiceToType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvoiceToType$ {
  /** @deprecated use `InvoiceToType$inboundSchema` instead. */
  export const inboundSchema = InvoiceToType$inboundSchema;
  /** @deprecated use `InvoiceToType$outboundSchema` instead. */
  export const outboundSchema = InvoiceToType$outboundSchema;
}

/** @internal */
export const InvoiceTo$inboundSchema: z.ZodType<
  InvoiceTo,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: InvoiceToType$inboundSchema.optional(),
});

/** @internal */
export type InvoiceTo$Outbound = {
  id?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const InvoiceTo$outboundSchema: z.ZodType<
  InvoiceTo$Outbound,
  z.ZodTypeDef,
  InvoiceTo
> = z.object({
  id: z.string().optional(),
  type: InvoiceToType$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvoiceTo$ {
  /** @deprecated use `InvoiceTo$inboundSchema` instead. */
  export const inboundSchema = InvoiceTo$inboundSchema;
  /** @deprecated use `InvoiceTo$outboundSchema` instead. */
  export const outboundSchema = InvoiceTo$outboundSchema;
  /** @deprecated use `InvoiceTo$Outbound` instead. */
  export type Outbound = InvoiceTo$Outbound;
}

export function invoiceToToJSON(invoiceTo: InvoiceTo): string {
  return JSON.stringify(InvoiceTo$outboundSchema.parse(invoiceTo));
}

export function invoiceToFromJSON(
  jsonString: string,
): SafeParseResult<InvoiceTo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InvoiceTo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InvoiceTo' from JSON`,
  );
}
