/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { objectToClass, SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform, Type } from "class-transformer";

export class Content extends SpeakeasyBase {}

export class ModifiedDate extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "modifiedDate" })
    modifiedDate?: string;
}

export class CustomDataTypeRecord extends SpeakeasyBase {
    /**
     * Values from the source system for the properties defined in the custom data type configuration.
     */
    @SpeakeasyMetadata({ elemType: Content })
    @Expose({ name: "content" })
    @Transform(
        ({ value }) => {
            const obj: Record<string, Content> = {};
            for (const key in value) {
                obj[key] = objectToClass(value[key], Content);
            }
            return obj;
        },
        { toClassOnly: true }
    )
    content?: Record<string, Content>;

    /**
     * Unique identifier of the record.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "modifiedDate" })
    @Type(() => ModifiedDate)
    modifiedDate?: ModifiedDate;
}
