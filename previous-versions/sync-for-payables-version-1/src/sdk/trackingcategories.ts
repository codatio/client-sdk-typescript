/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { trackingCategoriesGet } from "../funcs/trackingCategoriesGet.js";
import { trackingCategoriesList } from "../funcs/trackingCategoriesList.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class TrackingCategories extends ClientSDK {
  /**
   * List tracking categories
   *
   * @remarks
   * The *List tracking categories* endpoint returns a list of [tracking categories](https://docs.codat.io/sync-for-payables-api#/schemas/TrackingCategory) for a given company's connection.
   *
   * [Tracking categories](https://docs.codat.io/sync-for-payables-api#/schemas/TrackingCategory) are used to monitor cost centres and control budgets that sit outside the standard set of accounts.
   *
   * Before using this endpoint, you must have [retrieved data for the company](https://docs.codat.io/sync-for-payables-api#/operations/refresh-company-data).
   */
  async list(
    request: operations.ListTrackingCategoriesRequest,
    options?: RequestOptions,
  ): Promise<shared.TrackingCategories> {
    return unwrapAsync(trackingCategoriesList(
      this,
      request,
      options,
    ));
  }

  /**
   * Get tracking categories
   *
   * @remarks
   * The *Get tracking category* endpoint returns a single tracking category for a given `trackingCategoryId`.
   *
   * [Tracking categories](https://docs.codat.io/sync-for-payables-api#/schemas/TrackingCategory) are used to monitor cost centres and control budgets that sit outside the standard set of accounts.
   *
   * Check out our [coverage explorer](https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=trackingCategories) for integrations that support getting a specific tracking category.
   *
   * Before using this endpoint, you must have [retrieved data for the company](https://docs.codat.io/sync-for-payables-api#/operations/refresh-company-data).
   */
  async get(
    request: operations.GetTrackingCategoryRequest,
    options?: RequestOptions,
  ): Promise<shared.TrackingCategoryTree> {
    return unwrapAsync(trackingCategoriesGet(
      this,
      request,
      options,
    ));
  }
}
