/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { billsCreate } from "../funcs/billsCreate.js";
import { billsDelete } from "../funcs/billsDelete.js";
import { billsDeleteAttachment } from "../funcs/billsDeleteAttachment.js";
import { billsDownloadAttachment } from "../funcs/billsDownloadAttachment.js";
import { billsGet } from "../funcs/billsGet.js";
import { billsGetAttachment } from "../funcs/billsGetAttachment.js";
import { billsGetCreateUpdateModel } from "../funcs/billsGetCreateUpdateModel.js";
import { billsList } from "../funcs/billsList.js";
import { billsListAttachments } from "../funcs/billsListAttachments.js";
import { billsUpdate } from "../funcs/billsUpdate.js";
import { billsUploadAttachment } from "../funcs/billsUploadAttachment.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Bills extends ClientSDK {
  /**
   * List bills
   *
   * @remarks
   * The *List bills* endpoint returns a list of [bills](https://docs.codat.io/sync-for-payables-api#/schemas/Bill) for a given company's connection.
   *
   * [Bills](https://docs.codat.io/sync-for-payables-api#/schemas/Bill) are invoices that represent the SMB's financial obligations to their supplier for a purchase of goods or services.
   */
  async list(
    request: operations.ListBillsRequest,
    options?: RequestOptions,
  ): Promise<shared.Bills> {
    return unwrapAsync(billsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Get bill
   *
   * @remarks
   * The *Get bill* endpoint returns a single bill for a given `billId`.
   *
   * [Bills](https://docs.codat.io/sync-for-payables-api#/schemas/Bill) are invoices that represent the SMB's financial obligations to their supplier for a purchase of goods or services.
   *
   * Check out our [coverage explorer](https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=bills) for integrations that support getting a specific bill.
   *
   * Before using this endpoint, you must have [retrieved data for the company](https://docs.codat.io/sync-for-payables-api#/operations/refresh-company-data).
   */
  async get(
    request: operations.GetBillRequest,
    options?: RequestOptions,
  ): Promise<shared.Bill> {
    return unwrapAsync(billsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Get create/update bill model
   *
   * @remarks
   * The *Get create/update bill model* endpoint returns the expected data for the request payload when creating and updating a [bill](https://docs.codat.io/sync-for-payables-api#/schemas/Bill) for a given company and integration.
   *
   * [Bills](https://docs.codat.io/sync-for-payables-api#/schemas/Bill) are invoices that represent the SMB's financial obligations to their supplier for a purchase of goods or services.
   *
   * **Integration-specific behaviour**
   *
   * See the *response examples* for integration-specific indicative models.
   *
   * Check out our [coverage explorer](https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=bills) for integrations that support creating and updating a bill.
   */
  async getCreateUpdateModel(
    request: operations.GetCreateUpdateBillModelRequest,
    options?: RequestOptions,
  ): Promise<shared.PushOption> {
    return unwrapAsync(billsGetCreateUpdateModel(
      this,
      request,
      options,
    ));
  }

  /**
   * Create bill
   *
   * @remarks
   * The *Create bill* endpoint creates a new [bill](https://docs.codat.io/sync-for-payables-api#/schemas/Bill) for a given company's connection.
   *
   * [Bills](https://docs.codat.io/sync-for-payables-api#/schemas/Bill) are invoices that represent the SMB's financial obligations to their supplier for a purchase of goods or services.
   *
   * **Integration-specific behaviour**
   *
   * Required data may vary by integration. To see what data to post, first call [Get create/update bill model](https://docs.codat.io/sync-for-payables-api#/operations/get-create-update-bills-model).
   *
   * Check out our [coverage explorer](https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=bills) for integrations that support creating a bill.
   */
  async create(
    request: operations.CreateBillRequest,
    options?: RequestOptions,
  ): Promise<shared.CreateBillResponse> {
    return unwrapAsync(billsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Update bill
   *
   * @remarks
   * The *Update bill* endpoint updates an existing [bill](https://docs.codat.io/sync-for-payables-api#/schemas/Bill) for a given company's connection.
   *
   * [Bills](https://docs.codat.io/sync-for-payables-api#/schemas/Bill) are invoices that represent the SMB's financial obligations to their supplier for a purchase of goods or services.
   *
   * **Integration-specific behaviour**
   *
   * Required data may vary by integration. To see what data to post, first call [Get create/update bill model](https://docs.codat.io/sync-for-payables-api#/operations/get-create-update-bills-model).
   *
   * Check out our [coverage explorer](https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=bills) for integrations that support creating a bill.
   */
  async update(
    request: operations.UpdateBillRequest,
    options?: RequestOptions,
  ): Promise<shared.UpdateBillResponse> {
    return unwrapAsync(billsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete bill
   *
   * @remarks
   * The *Delete bill* endpoint allows you to delete a specified bill from an accounting software.
   *
   * [Bills](https://docs.codat.io/sync-for-payables-api#/schemas/Bill) are itemized records of goods received or services provided to the SMB.
   *
   * ### Process
   * 1. Pass the `{billId}` to the *Delete bill* endpoint and store the `pushOperationKey` returned.
   * 2. Check the status of the delete operation by checking the status of the push operation either via
   *     1. [Push operation webhook](https://docs.codat.io/introduction/webhooks/core-rules-types#push-operation-status-has-changed) (advised),
   *     2. [Push operation status endpoint](https://docs.codat.io/sync-for-payables-api#/operations/get-push-operation).
   *
   *    A `Success` status indicates that the bill object was deleted from the accounting software.
   * 3. (Optional) Check that the bill was deleted from the accounting software.
   *
   * ### Effect on related objects
   *
   * Be aware that deleting a bill from an accounting software might cause related objects to be modified. For example, if you delete a paid bill in QuickBooks Online or QuickBooks Desktop, the bill is deleted but the bill payment against that bill is not. The bill payment is converted to a payment on account.
   *
   * ## Integration specifics
   * Integrations that support soft delete do not permanently delete the object in the accounting software.
   *
   * | Integration | Soft Delete | Details                                                                                                      |
   * |-------------|-------------|--------------------------------------------------------------------------------------------------------------|
   * | QuickBooks Online | No          | - |
   * | QuickBooks Desktop | No          | - |
   * | Oracle NetSuite   | No          | When deleting a bill that's already linked to a bill payment, you must delete the linked bill payment first. |                                                                                                      |
   * | Sage Intacct   | No          | When deleting a bill that's already linked to a bill payment, you must delete the linked bill payment first. |
   * | Xero   | No          | Draft bills will be deleted. Open bills will be voided instead of deleted since Xero only allows voiding a bill once it's been posted. When deleting a bill that's already linked to a bill payment, you must delete the linked bill payment first. |
   *
   * > **Supported Integrations**
   * >
   * > This functionality is currently supported for our QuickBooks Online, QuickBooks Desktop, Xero, Oracle NetSuite and Sage Intacct integrations.
   */
  async delete(
    request: operations.DeleteBillRequest,
    options?: RequestOptions,
  ): Promise<shared.PushOperation> {
    return unwrapAsync(billsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * List bill attachments
   *
   * @remarks
   * The *List bill attachments* endpoint returns a list of attachments available to download for a given `billId`.
   *
   * [Bills](https://docs.codat.io/sync-for-payables-api#/schemas/Bill) are invoices that represent the SMB's financial obligations to their supplier for a purchase of goods or services.
   */
  async listAttachments(
    request: operations.ListBillAttachmentsRequest,
    options?: RequestOptions,
  ): Promise<shared.Attachments> {
    return unwrapAsync(billsListAttachments(
      this,
      request,
      options,
    ));
  }

  /**
   * Get bill attachment
   *
   * @remarks
   * The *Get bill attachment* endpoint returns a specific attachment for a given `billId` and `attachmentId`.
   *
   * [Bills](https://docs.codat.io/sync-for-payables-api#/schemas/Bill) are invoices that represent the SMB's financial obligations to their supplier for a purchase of goods or services.
   *
   * Check out our [coverage explorer](https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=bills) for integrations that support getting a bill attachment.
   */
  async getAttachment(
    request: operations.GetBillAttachmentRequest,
    options?: RequestOptions,
  ): Promise<shared.Attachment> {
    return unwrapAsync(billsGetAttachment(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete bill attachment
   *
   * @remarks
   * The *Delete bill attachment* endpoint allows you to delete a specified bill attachment from an accounting software.
   *
   * [Bills](https://docs.codat.io/sync-for-payables-api#/schemas/Bill) are invoices
   * that represent the SMB's financial obligations to their supplier for a
   * purchase of goods or services.
   *
   * ### Process
   *
   * 1. Pass the `{billId}` and `{attachmentId}` to the *Delete bill attachment* endpoint and store the `pushOperationKey` returned.
   *
   * 2. Check the status of the delete operation by checking the status of push operation either via
   *
   * 1. [Push operation webhook](https://docs.codat.io/introduction/webhookscore-rules-types#push-operation-status-has-changed) (advised),
   *
   * 2. [Push operation status endpoint](https://docs.codat.io/sync-for-payables-api#/operations/get-push-operation). A `Success` status indicates that the bill attachment object was deleted from the accounting software.
   *
   * 3. (Optional) Check that the bill attachment was deleted from the accounting software.
   *
   * >**Supported Integrations**
   * >
   * >This functionality is currently only supported for our QuickBooks Online integration.
   */
  async deleteAttachment(
    request: operations.DeleteBillAttachmentRequest,
    options?: RequestOptions,
  ): Promise<shared.PushOperation> {
    return unwrapAsync(billsDeleteAttachment(
      this,
      request,
      options,
    ));
  }

  /**
   * Download bill attachment
   *
   * @remarks
   * The *Download bill attachment* endpoint downloads a specific attachment for a given `billId` and `attachmentId`.
   *
   * [Bills](https://docs.codat.io/sync-for-payables-api#/schemas/Bill) are invoices that represent the SMB's financial obligations to their supplier for a purchase of goods or services.
   *
   * Check out our [coverage explorer](https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=bills) for integrations that support downloading a bill attachment.
   */
  async downloadAttachment(
    request: operations.DownloadBillAttachmentRequest,
    options?: RequestOptions,
  ): Promise<ReadableStream<Uint8Array>> {
    return unwrapAsync(billsDownloadAttachment(
      this,
      request,
      options,
    ));
  }

  /**
   * Upload bill attachment
   *
   * @remarks
   * The *Upload bill attachment* endpoint uploads an attachment and assigns it against a specific `billId`.
   *
   * [Bills](https://docs.codat.io/sync-for-payables-api#/schemas/Bill) are invoices that represent the SMB's financial obligations to their supplier for a purchase of goods or services.
   *
   * **Integration-specific behaviour**
   *
   * For more details on supported file types by integration see [Attachments](https://docs.codat.io/sync-for-payables-api#/schemas/Attachment).
   *
   * Check out our [coverage explorer](https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=bills) for integrations that support uploading a bill attachment.
   */
  async uploadAttachment(
    request: operations.UploadBillAttachmentRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(billsUploadAttachment(
      this,
      request,
      options,
    ));
  }
}
