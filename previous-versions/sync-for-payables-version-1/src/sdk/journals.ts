/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { journalsCreate } from "../funcs/journalsCreate.js";
import { journalsGet } from "../funcs/journalsGet.js";
import { journalsGetCreateModel } from "../funcs/journalsGetCreateModel.js";
import { journalsList } from "../funcs/journalsList.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Journals extends ClientSDK {
  /**
   * List journals
   *
   * @remarks
   * The *List journals* endpoint returns a list of [journals](https://docs.codat.io/sync-for-payables-api#/schemas/Journal) for a given company's connection.
   *
   * [Journals](https://docs.codat.io/sync-for-payables-api#/schemas/Journal) are used to record all the financial transactions of a company.
   *
   * Before using this endpoint, you must have [retrieved data for the company](https://docs.codat.io/sync-for-payables-api#/operations/refresh-company-data).
   */
  async list(
    request: operations.ListJournalsRequest,
    options?: RequestOptions,
  ): Promise<shared.Journals> {
    return unwrapAsync(journalsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Get journal
   *
   * @remarks
   * The *Get journal* endpoint returns a single journal for a given `journalId`.
   *
   * [Journals](https://docs.codat.io/sync-for-payables-api#/schemas/Journal) are used to record all the financial transactions of a company.
   *
   * Check out our [coverage explorer](https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=journals) for integrations that support getting a specific journal.
   *
   * Before using this endpoint, you must have [retrieved data for the company](https://docs.codat.io/sync-for-payables-api#/operations/refresh-company-data).
   */
  async get(
    request: operations.GetJournalRequest,
    options?: RequestOptions,
  ): Promise<shared.Journal> {
    return unwrapAsync(journalsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Get create journal model
   *
   * @remarks
   * The *Get create journal model* endpoint returns the expected data for the request payload when creating a [journal](https://docs.codat.io/sync-for-payables-api#/schemas/Journal) for a given company and integration.
   *
   * [Journals](https://docs.codat.io/sync-for-payables-api#/schemas/Journal) are used to record all the financial transactions of a company.
   *
   * **Integration-specific behaviour**
   *
   * See the *response examples* for integration-specific indicative models.
   *
   * Check out our [coverage explorer](https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=journals) for integrations that support creating a journal.
   */
  async getCreateModel(
    request: operations.GetCreateJournalModelRequest,
    options?: RequestOptions,
  ): Promise<shared.PushOption> {
    return unwrapAsync(journalsGetCreateModel(
      this,
      request,
      options,
    ));
  }

  /**
   * Create journal
   *
   * @remarks
   * The *Create journal* endpoint creates a new [journal](https://docs.codat.io/sync-for-payables-api#/schemas/Journal) for a given company's connection.
   *
   * [Journals](https://docs.codat.io/sync-for-payables-api#/schemas/Journal) are used to record all the financial transactions of a company.
   *
   * **Integration-specific behaviour**
   *
   * Required data may vary by integration. To see what data to post, first call [Get create journal model](https://docs.codat.io/sync-for-payables-api#/operations/get-create-journals-model).
   *
   * Check out our [coverage explorer](https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=journals) for integrations that support creating a journal.
   */
  async create(
    request: operations.CreateJournalRequest,
    options?: RequestOptions,
  ): Promise<shared.CreateJournalResponse> {
    return unwrapAsync(journalsCreate(
      this,
      request,
      options,
    ));
  }
}
