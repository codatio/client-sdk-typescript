/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { manageDataGet } from "../funcs/manageDataGet.js";
import { manageDataGetPullOperation } from "../funcs/manageDataGetPullOperation.js";
import { manageDataListPullOperations } from "../funcs/manageDataListPullOperations.js";
import { manageDataRefreshAllDataTypes } from "../funcs/manageDataRefreshAllDataTypes.js";
import { manageDataRefreshDataType } from "../funcs/manageDataRefreshDataType.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class ManageData extends ClientSDK {
  /**
   * Refresh all data
   *
   * @remarks
   * Refreshes all data types with `fetch on first link` set to `true` for a given company.
   *
   * This is an asynchronous operation, and will bring updated data into Codat from the linked integration for you to view.
   *
   * [Read more](https://docs.codat.io/core-concepts/data-type-settings) about data type settings and `fetch on first link`.
   */
  async refreshAllDataTypes(
    request: operations.RefreshAllDataTypesRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(manageDataRefreshAllDataTypes(
      this,
      request,
      options,
    ));
  }

  /**
   * Get data status
   *
   * @remarks
   * Get the state of each data type for a company
   */
  async get(
    request: operations.GetDataStatusRequest,
    options?: RequestOptions,
  ): Promise<operations.GetDataStatusDataStatuses> {
    return unwrapAsync(manageDataGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Refresh data type
   *
   * @remarks
   * Refreshes a given data type for a given company.
   *
   * This is an asynchronous operation, and will bring updated data into Codat from the linked integration for you to view.
   */
  async refreshDataType(
    request: operations.RefreshDataTypeRequest,
    options?: RequestOptions,
  ): Promise<shared.PullOperation> {
    return unwrapAsync(manageDataRefreshDataType(
      this,
      request,
      options,
    ));
  }

  /**
   * List pull operations
   *
   * @remarks
   * Gets the pull operation history (datasets) for a given company.
   */
  async listPullOperations(
    request: operations.ListPullOperationsRequest,
    options?: RequestOptions,
  ): Promise<shared.PullOperations> {
    return unwrapAsync(manageDataListPullOperations(
      this,
      request,
      options,
    ));
  }

  /**
   * Get pull operation
   *
   * @remarks
   * Retrieve information about a single dataset or pull operation.
   */
  async getPullOperation(
    request: operations.GetPullOperationRequest,
    options?: RequestOptions,
  ): Promise<shared.PullOperation> {
    return unwrapAsync(manageDataGetPullOperation(
      this,
      request,
      options,
    ));
  }
}
