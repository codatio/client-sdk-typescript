/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { Decimal as Decimal$ } from "../../types/decimal.js";
import {
  AccountRef,
  AccountRef$inboundSchema,
  AccountRef$Outbound,
  AccountRef$outboundSchema,
} from "./accountref.js";
import {
  BilledToType,
  BilledToType$inboundSchema,
  BilledToType$outboundSchema,
} from "./billedtotype.js";
import {
  TaxRateRef,
  TaxRateRef$inboundSchema,
  TaxRateRef$Outbound,
  TaxRateRef$outboundSchema,
} from "./taxrateref.js";
import {
  TrackingCategoryRef,
  TrackingCategoryRef$inboundSchema,
  TrackingCategoryRef$Outbound,
  TrackingCategoryRef$outboundSchema,
} from "./trackingcategoryref.js";
import {
  Zero,
  Zero$inboundSchema,
  Zero$Outbound,
  Zero$outboundSchema,
} from "./zero.js";

/**
 * Reference to the item the line is linked to.
 */
export type ItemReference = {
  /**
   * Unique identifier for the item in the accounting software.
   */
  id: string;
  /**
   * Name of the item in the accounting software.
   */
  name?: string | null | undefined;
};

export type BillCreditNoteLineItemCustomerRef = {
  /**
   * `id` from the Customers data type
   */
  id: string;
  /**
   * `customerName` from the Customer data type
   */
  companyName?: string | null | undefined;
};

export type BillCreditNoteLineItemAccountingProjectReference = {
  /**
   * Unique identifier to the project reference.
   */
  id: string;
  /**
   * The project's name.
   */
  name?: string | null | undefined;
};

/**
 * Categories, and a project and customer, against which the item is tracked.
 */
export type BillCreditNoteLineItemTracking = {
  categoryRefs: Array<TrackingCategoryRef>;
  customerRef?: BillCreditNoteLineItemCustomerRef | undefined;
  projectRef?: BillCreditNoteLineItemAccountingProjectReference | undefined;
  /**
   * Defines if the invoice or credit note is billed/rebilled to a project or customer.
   */
  isBilledTo: BilledToType;
  /**
   * Defines if the invoice or credit note is billed/rebilled to a project or customer.
   */
  isRebilledTo: BilledToType;
};

export type BillCreditNoteLineItem = {
  /**
   * Friendly name of each line item. For example, the goods or service for which credit has been received.
   */
  description?: string | null | undefined;
  /**
   * Unit price of the goods or service.
   */
  unitAmount: Decimal$ | number;
  /**
   * Number of units of the goods or service for which credit has been received.
   */
  quantity: Decimal$ | number;
  /**
   * The measurement which defines a unit for this item (e.g. 'kilogram', 'litre').
   */
  unitOfMeasurement?: string | null | undefined;
  /**
   * Value of any discounts applied.
   */
  discountAmount?: Decimal$ | number | null | undefined;
  /**
   * Amount of credit associated with the line item, including discounts but excluding tax.
   */
  subTotal?: Decimal$ | number | null | undefined;
  /**
   * Amount of tax associated with the line item.
   */
  taxAmount?: Decimal$ | number | null | undefined;
  /**
   * Total amount of the line item, including discounts and tax.
   */
  totalAmount?: Decimal$ | number | null | undefined;
  /**
   * Data types that reference an account, for example bill and invoice line items, use an accountRef that includes the ID and name of the linked account.
   */
  accountRef?: AccountRef | undefined;
  /**
   * Percentage rate of any discount applied to the line item.
   */
  discountPercentage?: Decimal$ | number | null | undefined;
  /**
   * Data types that reference a tax rate, for example invoice and bill line items, use a taxRateRef that includes the ID and name of the linked tax rate.
   *
   * @remarks
   *
   * Found on:
   *
   * - Bill line items
   * - Bill Credit Note line items
   * - Credit Note line items
   * - Direct incomes line items
   * - Invoice line items
   * - Items
   */
  taxRateRef?: TaxRateRef | undefined;
  /**
   * Reference to the item the line is linked to.
   */
  itemRef?: ItemReference | undefined;
  /**
   * Links the current record line to the underlying record line that created it.
   *
   * @remarks
   *
   * For example, if a bill is generated from a purchase order, this property allows you to connect the bill line item to the purchase order line item in our data model.
   */
  createdFromLineRef?: Zero | undefined;
  /**
   * Reference to the tracking categories to which the line item is linked.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  trackingCategoryRefs?: Array<TrackingCategoryRef> | null | undefined;
  /**
   * Categories, and a project and customer, against which the item is tracked.
   */
  tracking?: BillCreditNoteLineItemTracking | undefined;
};

/** @internal */
export const ItemReference$inboundSchema: z.ZodType<
  ItemReference,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.nullable(z.string()).optional(),
});

/** @internal */
export type ItemReference$Outbound = {
  id: string;
  name?: string | null | undefined;
};

/** @internal */
export const ItemReference$outboundSchema: z.ZodType<
  ItemReference$Outbound,
  z.ZodTypeDef,
  ItemReference
> = z.object({
  id: z.string(),
  name: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ItemReference$ {
  /** @deprecated use `ItemReference$inboundSchema` instead. */
  export const inboundSchema = ItemReference$inboundSchema;
  /** @deprecated use `ItemReference$outboundSchema` instead. */
  export const outboundSchema = ItemReference$outboundSchema;
  /** @deprecated use `ItemReference$Outbound` instead. */
  export type Outbound = ItemReference$Outbound;
}

/** @internal */
export const BillCreditNoteLineItemCustomerRef$inboundSchema: z.ZodType<
  BillCreditNoteLineItemCustomerRef,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  companyName: z.nullable(z.string()).optional(),
});

/** @internal */
export type BillCreditNoteLineItemCustomerRef$Outbound = {
  id: string;
  companyName?: string | null | undefined;
};

/** @internal */
export const BillCreditNoteLineItemCustomerRef$outboundSchema: z.ZodType<
  BillCreditNoteLineItemCustomerRef$Outbound,
  z.ZodTypeDef,
  BillCreditNoteLineItemCustomerRef
> = z.object({
  id: z.string(),
  companyName: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BillCreditNoteLineItemCustomerRef$ {
  /** @deprecated use `BillCreditNoteLineItemCustomerRef$inboundSchema` instead. */
  export const inboundSchema = BillCreditNoteLineItemCustomerRef$inboundSchema;
  /** @deprecated use `BillCreditNoteLineItemCustomerRef$outboundSchema` instead. */
  export const outboundSchema =
    BillCreditNoteLineItemCustomerRef$outboundSchema;
  /** @deprecated use `BillCreditNoteLineItemCustomerRef$Outbound` instead. */
  export type Outbound = BillCreditNoteLineItemCustomerRef$Outbound;
}

/** @internal */
export const BillCreditNoteLineItemAccountingProjectReference$inboundSchema:
  z.ZodType<
    BillCreditNoteLineItemAccountingProjectReference,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string(),
    name: z.nullable(z.string()).optional(),
  });

/** @internal */
export type BillCreditNoteLineItemAccountingProjectReference$Outbound = {
  id: string;
  name?: string | null | undefined;
};

/** @internal */
export const BillCreditNoteLineItemAccountingProjectReference$outboundSchema:
  z.ZodType<
    BillCreditNoteLineItemAccountingProjectReference$Outbound,
    z.ZodTypeDef,
    BillCreditNoteLineItemAccountingProjectReference
  > = z.object({
    id: z.string(),
    name: z.nullable(z.string()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BillCreditNoteLineItemAccountingProjectReference$ {
  /** @deprecated use `BillCreditNoteLineItemAccountingProjectReference$inboundSchema` instead. */
  export const inboundSchema =
    BillCreditNoteLineItemAccountingProjectReference$inboundSchema;
  /** @deprecated use `BillCreditNoteLineItemAccountingProjectReference$outboundSchema` instead. */
  export const outboundSchema =
    BillCreditNoteLineItemAccountingProjectReference$outboundSchema;
  /** @deprecated use `BillCreditNoteLineItemAccountingProjectReference$Outbound` instead. */
  export type Outbound =
    BillCreditNoteLineItemAccountingProjectReference$Outbound;
}

/** @internal */
export const BillCreditNoteLineItemTracking$inboundSchema: z.ZodType<
  BillCreditNoteLineItemTracking,
  z.ZodTypeDef,
  unknown
> = z.object({
  categoryRefs: z.array(TrackingCategoryRef$inboundSchema),
  customerRef: z.lazy(() => BillCreditNoteLineItemCustomerRef$inboundSchema)
    .optional(),
  projectRef: z.lazy(() =>
    BillCreditNoteLineItemAccountingProjectReference$inboundSchema
  ).optional(),
  isBilledTo: BilledToType$inboundSchema,
  isRebilledTo: BilledToType$inboundSchema,
});

/** @internal */
export type BillCreditNoteLineItemTracking$Outbound = {
  categoryRefs: Array<TrackingCategoryRef$Outbound>;
  customerRef?: BillCreditNoteLineItemCustomerRef$Outbound | undefined;
  projectRef?:
    | BillCreditNoteLineItemAccountingProjectReference$Outbound
    | undefined;
  isBilledTo: string;
  isRebilledTo: string;
};

/** @internal */
export const BillCreditNoteLineItemTracking$outboundSchema: z.ZodType<
  BillCreditNoteLineItemTracking$Outbound,
  z.ZodTypeDef,
  BillCreditNoteLineItemTracking
> = z.object({
  categoryRefs: z.array(TrackingCategoryRef$outboundSchema),
  customerRef: z.lazy(() => BillCreditNoteLineItemCustomerRef$outboundSchema)
    .optional(),
  projectRef: z.lazy(() =>
    BillCreditNoteLineItemAccountingProjectReference$outboundSchema
  ).optional(),
  isBilledTo: BilledToType$outboundSchema,
  isRebilledTo: BilledToType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BillCreditNoteLineItemTracking$ {
  /** @deprecated use `BillCreditNoteLineItemTracking$inboundSchema` instead. */
  export const inboundSchema = BillCreditNoteLineItemTracking$inboundSchema;
  /** @deprecated use `BillCreditNoteLineItemTracking$outboundSchema` instead. */
  export const outboundSchema = BillCreditNoteLineItemTracking$outboundSchema;
  /** @deprecated use `BillCreditNoteLineItemTracking$Outbound` instead. */
  export type Outbound = BillCreditNoteLineItemTracking$Outbound;
}

/** @internal */
export const BillCreditNoteLineItem$inboundSchema: z.ZodType<
  BillCreditNoteLineItem,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.nullable(z.string()).optional(),
  unitAmount: z.number().transform(v => new Decimal$(v)),
  quantity: z.number().transform(v => new Decimal$(v)),
  unitOfMeasurement: z.nullable(z.string()).optional(),
  discountAmount: z.nullable(z.number().transform(v => new Decimal$(v)))
    .optional(),
  subTotal: z.nullable(z.number().transform(v => new Decimal$(v))).optional(),
  taxAmount: z.nullable(z.number().transform(v => new Decimal$(v))).optional(),
  totalAmount: z.nullable(z.number().transform(v => new Decimal$(v)))
    .optional(),
  accountRef: AccountRef$inboundSchema.optional(),
  discountPercentage: z.nullable(z.number().transform(v => new Decimal$(v)))
    .optional(),
  taxRateRef: TaxRateRef$inboundSchema.optional(),
  itemRef: z.lazy(() => ItemReference$inboundSchema).optional(),
  createdFromLineRef: Zero$inboundSchema.optional(),
  trackingCategoryRefs: z.nullable(z.array(TrackingCategoryRef$inboundSchema))
    .optional(),
  tracking: z.lazy(() => BillCreditNoteLineItemTracking$inboundSchema)
    .optional(),
});

/** @internal */
export type BillCreditNoteLineItem$Outbound = {
  description?: string | null | undefined;
  unitAmount: number;
  quantity: number;
  unitOfMeasurement?: string | null | undefined;
  discountAmount?: number | null | undefined;
  subTotal?: number | null | undefined;
  taxAmount?: number | null | undefined;
  totalAmount?: number | null | undefined;
  accountRef?: AccountRef$Outbound | undefined;
  discountPercentage?: number | null | undefined;
  taxRateRef?: TaxRateRef$Outbound | undefined;
  itemRef?: ItemReference$Outbound | undefined;
  createdFromLineRef?: Zero$Outbound | undefined;
  trackingCategoryRefs?: Array<TrackingCategoryRef$Outbound> | null | undefined;
  tracking?: BillCreditNoteLineItemTracking$Outbound | undefined;
};

/** @internal */
export const BillCreditNoteLineItem$outboundSchema: z.ZodType<
  BillCreditNoteLineItem$Outbound,
  z.ZodTypeDef,
  BillCreditNoteLineItem
> = z.object({
  description: z.nullable(z.string()).optional(),
  unitAmount: z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
    typeof v === "number" ? v : v.toNumber()
  ),
  quantity: z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
    typeof v === "number" ? v : v.toNumber()
  ),
  unitOfMeasurement: z.nullable(z.string()).optional(),
  discountAmount: z.nullable(
    z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
      typeof v === "number" ? v : v.toNumber()
    ),
  ).optional(),
  subTotal: z.nullable(
    z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
      typeof v === "number" ? v : v.toNumber()
    ),
  ).optional(),
  taxAmount: z.nullable(
    z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
      typeof v === "number" ? v : v.toNumber()
    ),
  ).optional(),
  totalAmount: z.nullable(
    z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
      typeof v === "number" ? v : v.toNumber()
    ),
  ).optional(),
  accountRef: AccountRef$outboundSchema.optional(),
  discountPercentage: z.nullable(
    z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
      typeof v === "number" ? v : v.toNumber()
    ),
  ).optional(),
  taxRateRef: TaxRateRef$outboundSchema.optional(),
  itemRef: z.lazy(() => ItemReference$outboundSchema).optional(),
  createdFromLineRef: Zero$outboundSchema.optional(),
  trackingCategoryRefs: z.nullable(z.array(TrackingCategoryRef$outboundSchema))
    .optional(),
  tracking: z.lazy(() => BillCreditNoteLineItemTracking$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BillCreditNoteLineItem$ {
  /** @deprecated use `BillCreditNoteLineItem$inboundSchema` instead. */
  export const inboundSchema = BillCreditNoteLineItem$inboundSchema;
  /** @deprecated use `BillCreditNoteLineItem$outboundSchema` instead. */
  export const outboundSchema = BillCreditNoteLineItem$outboundSchema;
  /** @deprecated use `BillCreditNoteLineItem$Outbound` instead. */
  export type Outbound = BillCreditNoteLineItem$Outbound;
}
