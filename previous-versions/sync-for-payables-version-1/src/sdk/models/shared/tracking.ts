/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  BilledToType,
  BilledToType$inboundSchema,
  BilledToType$outboundSchema,
} from "./billedtotype.js";
import {
  TrackingCategoryRef,
  TrackingCategoryRef$inboundSchema,
  TrackingCategoryRef$Outbound,
  TrackingCategoryRef$outboundSchema,
} from "./trackingcategoryref.js";

export type CustomerRef = {
  /**
   * `id` from the Customers data type
   */
  id: string;
  /**
   * `customerName` from the Customer data type
   */
  companyName?: string | null | undefined;
};

export type AccountingProjectReference = {
  /**
   * Unique identifier to the project reference.
   */
  id: string;
  /**
   * The project's name.
   */
  name?: string | null | undefined;
};

/**
 * Categories, and a project and customer, against which the item is tracked.
 */
export type Tracking = {
  categoryRefs: Array<TrackingCategoryRef>;
  customerRef?: CustomerRef | undefined;
  projectRef?: AccountingProjectReference | undefined;
  /**
   * Defines if the invoice or credit note is billed/rebilled to a project or customer.
   */
  isBilledTo: BilledToType;
  /**
   * Defines if the invoice or credit note is billed/rebilled to a project or customer.
   */
  isRebilledTo: BilledToType;
};

/** @internal */
export const CustomerRef$inboundSchema: z.ZodType<
  CustomerRef,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  companyName: z.nullable(z.string()).optional(),
});

/** @internal */
export type CustomerRef$Outbound = {
  id: string;
  companyName?: string | null | undefined;
};

/** @internal */
export const CustomerRef$outboundSchema: z.ZodType<
  CustomerRef$Outbound,
  z.ZodTypeDef,
  CustomerRef
> = z.object({
  id: z.string(),
  companyName: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerRef$ {
  /** @deprecated use `CustomerRef$inboundSchema` instead. */
  export const inboundSchema = CustomerRef$inboundSchema;
  /** @deprecated use `CustomerRef$outboundSchema` instead. */
  export const outboundSchema = CustomerRef$outboundSchema;
  /** @deprecated use `CustomerRef$Outbound` instead. */
  export type Outbound = CustomerRef$Outbound;
}

/** @internal */
export const AccountingProjectReference$inboundSchema: z.ZodType<
  AccountingProjectReference,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.nullable(z.string()).optional(),
});

/** @internal */
export type AccountingProjectReference$Outbound = {
  id: string;
  name?: string | null | undefined;
};

/** @internal */
export const AccountingProjectReference$outboundSchema: z.ZodType<
  AccountingProjectReference$Outbound,
  z.ZodTypeDef,
  AccountingProjectReference
> = z.object({
  id: z.string(),
  name: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingProjectReference$ {
  /** @deprecated use `AccountingProjectReference$inboundSchema` instead. */
  export const inboundSchema = AccountingProjectReference$inboundSchema;
  /** @deprecated use `AccountingProjectReference$outboundSchema` instead. */
  export const outboundSchema = AccountingProjectReference$outboundSchema;
  /** @deprecated use `AccountingProjectReference$Outbound` instead. */
  export type Outbound = AccountingProjectReference$Outbound;
}

/** @internal */
export const Tracking$inboundSchema: z.ZodType<
  Tracking,
  z.ZodTypeDef,
  unknown
> = z.object({
  categoryRefs: z.array(TrackingCategoryRef$inboundSchema),
  customerRef: z.lazy(() => CustomerRef$inboundSchema).optional(),
  projectRef: z.lazy(() => AccountingProjectReference$inboundSchema).optional(),
  isBilledTo: BilledToType$inboundSchema,
  isRebilledTo: BilledToType$inboundSchema,
});

/** @internal */
export type Tracking$Outbound = {
  categoryRefs: Array<TrackingCategoryRef$Outbound>;
  customerRef?: CustomerRef$Outbound | undefined;
  projectRef?: AccountingProjectReference$Outbound | undefined;
  isBilledTo: string;
  isRebilledTo: string;
};

/** @internal */
export const Tracking$outboundSchema: z.ZodType<
  Tracking$Outbound,
  z.ZodTypeDef,
  Tracking
> = z.object({
  categoryRefs: z.array(TrackingCategoryRef$outboundSchema),
  customerRef: z.lazy(() => CustomerRef$outboundSchema).optional(),
  projectRef: z.lazy(() => AccountingProjectReference$outboundSchema)
    .optional(),
  isBilledTo: BilledToType$outboundSchema,
  isRebilledTo: BilledToType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Tracking$ {
  /** @deprecated use `Tracking$inboundSchema` instead. */
  export const inboundSchema = Tracking$inboundSchema;
  /** @deprecated use `Tracking$outboundSchema` instead. */
  export const outboundSchema = Tracking$outboundSchema;
  /** @deprecated use `Tracking$Outbound` instead. */
  export type Outbound = Tracking$Outbound;
}
