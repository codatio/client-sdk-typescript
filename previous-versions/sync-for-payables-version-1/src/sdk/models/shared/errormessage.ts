/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ErrorValidation } from "./errorvalidation";
import { Expose, Type } from "class-transformer";

export class ErrorMessage extends SpeakeasyBase {
    /**
     * `True` if the error occurred transiently and can be retried.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "canBeRetried" })
    canBeRetried?: string;

    /**
     * Unique identifier used to propagate to all downstream services and determine the source of the error.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "correlationId" })
    correlationId?: string;

    /**
     * Machine readable error code used to automate processes based on the code returned.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "detailedErrorCode" })
    detailedErrorCode?: number;

    /**
     * A brief description of the error.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "error" })
    error?: string;

    /**
     * Codat's service the returned the error.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "service" })
    service?: string;

    /**
     * The HTTP status code returned by the error.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "statusCode" })
    statusCode?: number;

    /**
     * A human-readable object describing validation decisions Codat has made. If an operation has failed because of validation errors, they will be detailed here.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "validation" })
    @Type(() => ErrorValidation)
    validation?: ErrorValidation;
}
