/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { JournalStatus, JournalStatus$ } from "./journalstatus";
import { z } from "zod";

export type JournalPrototype = {
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    createdOn?: string | undefined;
    /**
     * If the journal has child journals, this value is true. If it doesnâ€™t, it is false.
     */
    hasChildren?: boolean | undefined;
    /**
     * Native journal number or code.
     */
    journalCode?: string | null | undefined;
    /**
     * Journal name.
     *
     * @remarks
     * The maximum length for a journal name is 256 characters. All characters above that number will be truncated.
     */
    name?: string | null | undefined;
    /**
     * Parent journal ID.
     *
     * @remarks
     * If the journal is a parent journal, this value is not present.
     */
    parentId?: string | null | undefined;
    /**
     * Current journal status.
     */
    status?: JournalStatus | undefined;
    /**
     * The type of the journal.
     */
    type?: string | null | undefined;
};

/** @internal */
export namespace JournalPrototype$ {
    export type Inbound = {
        createdOn?: string | undefined;
        hasChildren?: boolean | undefined;
        journalCode?: string | null | undefined;
        name?: string | null | undefined;
        parentId?: string | null | undefined;
        status?: JournalStatus | undefined;
        type?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<JournalPrototype, z.ZodTypeDef, Inbound> = z
        .object({
            createdOn: z.string().optional(),
            hasChildren: z.boolean().optional(),
            journalCode: z.nullable(z.string()).optional(),
            name: z.nullable(z.string()).optional(),
            parentId: z.nullable(z.string()).optional(),
            status: JournalStatus$.optional(),
            type: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.createdOn === undefined ? null : { createdOn: v.createdOn }),
                ...(v.hasChildren === undefined ? null : { hasChildren: v.hasChildren }),
                ...(v.journalCode === undefined ? null : { journalCode: v.journalCode }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.parentId === undefined ? null : { parentId: v.parentId }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });

    export type Outbound = {
        createdOn?: string | undefined;
        hasChildren?: boolean | undefined;
        journalCode?: string | null | undefined;
        name?: string | null | undefined;
        parentId?: string | null | undefined;
        status?: JournalStatus | undefined;
        type?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, JournalPrototype> = z
        .object({
            createdOn: z.string().optional(),
            hasChildren: z.boolean().optional(),
            journalCode: z.nullable(z.string()).optional(),
            name: z.nullable(z.string()).optional(),
            parentId: z.nullable(z.string()).optional(),
            status: JournalStatus$.optional(),
            type: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.createdOn === undefined ? null : { createdOn: v.createdOn }),
                ...(v.hasChildren === undefined ? null : { hasChildren: v.hasChildren }),
                ...(v.journalCode === undefined ? null : { journalCode: v.journalCode }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.parentId === undefined ? null : { parentId: v.parentId }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });
}
