/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    JournalStatus,
    JournalStatus$inboundSchema,
    JournalStatus$outboundSchema,
} from "./journalstatus.js";
import * as z from "zod";

export type JournalPrototype = {
    /**
     * Native journal number or code.
     */
    journalCode?: string | null | undefined;
    /**
     * Journal name.
     *
     * @remarks
     * The maximum length for a journal name is 256 characters. All characters above that number will be truncated.
     */
    name?: string | null | undefined;
    /**
     * The type of the journal.
     */
    type?: string | null | undefined;
    /**
     * Parent journal ID.
     *
     * @remarks
     * If the journal is a parent journal, this value is not present.
     */
    parentId?: string | null | undefined;
    /**
     * If the journal has child journals, this value is true. If it doesnâ€™t, it is false.
     */
    hasChildren?: boolean | undefined;
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    createdOn?: string | undefined;
    /**
     * Current journal status.
     */
    status?: JournalStatus | undefined;
};

/** @internal */
export const JournalPrototype$inboundSchema: z.ZodType<JournalPrototype, z.ZodTypeDef, unknown> =
    z.object({
        journalCode: z.nullable(z.string()).optional(),
        name: z.nullable(z.string()).optional(),
        type: z.nullable(z.string()).optional(),
        parentId: z.nullable(z.string()).optional(),
        hasChildren: z.boolean().optional(),
        createdOn: z.string().optional(),
        status: JournalStatus$inboundSchema.optional(),
    });

/** @internal */
export type JournalPrototype$Outbound = {
    journalCode?: string | null | undefined;
    name?: string | null | undefined;
    type?: string | null | undefined;
    parentId?: string | null | undefined;
    hasChildren?: boolean | undefined;
    createdOn?: string | undefined;
    status?: string | undefined;
};

/** @internal */
export const JournalPrototype$outboundSchema: z.ZodType<
    JournalPrototype$Outbound,
    z.ZodTypeDef,
    JournalPrototype
> = z.object({
    journalCode: z.nullable(z.string()).optional(),
    name: z.nullable(z.string()).optional(),
    type: z.nullable(z.string()).optional(),
    parentId: z.nullable(z.string()).optional(),
    hasChildren: z.boolean().optional(),
    createdOn: z.string().optional(),
    status: JournalStatus$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JournalPrototype$ {
    /** @deprecated use `JournalPrototype$inboundSchema` instead. */
    export const inboundSchema = JournalPrototype$inboundSchema;
    /** @deprecated use `JournalPrototype$outboundSchema` instead. */
    export const outboundSchema = JournalPrototype$outboundSchema;
    /** @deprecated use `JournalPrototype$Outbound` instead. */
    export type Outbound = JournalPrototype$Outbound;
}
