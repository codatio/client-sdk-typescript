/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

/**
 * The type of the weblink.
 */
export enum Type {
    Website = "Website",
    Social = "Social",
    Unknown = "Unknown",
}

/**
 * Weblink associated with the company.
 */
export type WebLink = {
    /**
     * The type of the weblink.
     */
    type?: Type | undefined;
    /**
     * The full URL for the weblink.
     */
    url?: string | undefined;
};

/** @internal */
export const Type$ = z.nativeEnum(Type);

/** @internal */
export namespace WebLink$ {
    export type Inbound = {
        type?: Type | undefined;
        url?: string | undefined;
    };

    export const inboundSchema: z.ZodType<WebLink, z.ZodTypeDef, Inbound> = z
        .object({
            type: Type$.optional(),
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });

    export type Outbound = {
        type?: Type | undefined;
        url?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, WebLink> = z
        .object({
            type: Type$.optional(),
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });
}
