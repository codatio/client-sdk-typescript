/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../../sdk/types";
import { AccountStatus, AccountStatus$ } from "./accountstatus";
import { AccountType, AccountType$ } from "./accounttype";
import { SupplementalData, SupplementalData$ } from "./supplementaldata";
import { z } from "zod";

/**
 * When querying Codat's data model, some data types return `validDatatypeLinks` metadata in the JSON response. This indicates where that object can be used as a reference—a _valid link_—when creating or updating other data.
 *
 * @remarks
 *
 * For example, `validDatatypeLinks` might indicate the following references:
 *
 * - Which tax rates are valid to use on the line item of a bill.
 * - Which items can be used when creating an invoice.
 *
 * You can use `validDatatypeLinks` to present your SMB customers with only valid choices when selecting objects from a list, for example.
 *
 * ## `validDatatypeLinks` example
 *
 * The following example uses the `Accounting.Accounts` data type. It shows that, on the linked integration, this account is valid as the account on a payment or bill payment; and as the account referenced on the line item of a direct income or direct cost. Because there is no valid link to Invoices or Bills, using this account on those data types will result in an error.
 *
 * ```json validDatatypeLinks for an account
 * {
 *             "id": "bd9e85e0-0478-433d-ae9f-0b3c4f04bfe4",
 *             "nominalCode": "090",
 *             "name": "Business Bank Account",
 *             #...
 *             "validDatatypeLinks": [
 *                 {
 *                     "property": "Id",
 *                     "links": [
 *                         "Payment.AccountRef.Id",
 *                         "BillPayment.AccountRef.Id",
 *                         "DirectIncome.LineItems.AccountRef.Id",
 *                         "DirectCost.LineItems.AccountRef.Id"
 *                     ]
 *                 }
 *             ]
 *         }
 * ```
 *
 *
 *
 * ## Support for `validDatatypeLinks`
 *
 * Codat currently supports `validDatatypeLinks` for some data types on our Xero, QuickBooks Online, QuickBooks Desktop, Exact (NL), and Sage Business Cloud integrations.
 *
 * If you'd like us to extend support to more data types or integrations, suggest or vote for this on our <a href="https://portal.productboard.com/codat/5-product-roadmap">Product Roadmap</a>.
 */
export type ValidDataTypeLinks = {
    /**
     * Supported `dataTypes` that the record can be linked to.
     */
    links?: Array<string> | null | undefined;
    /**
     * The property from the account that can be linked.
     */
    property?: string | null | undefined;
};

export type AccountPrototype = {
    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     *
     * @remarks
     *
     * ## Unknown currencies
     *
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction.
     *
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    currency?: string | undefined;
    /**
     * Current balance in the account.
     */
    currentBalance?: Decimal$ | number | null | undefined;
    /**
     * Description for the account.
     */
    description?: string | null | undefined;
    /**
     * Full category of the account.
     *
     * @remarks
     *
     * For example, `Liability.Current` or `Income.Revenue`. To determine a list of possible categories for each integration, see our examples, follow our [Create, update, delete data](https://docs.codat.io/using-the-api/push) guide, or refer to the integration's own documentation.
     */
    fullyQualifiedCategory?: string | null | undefined;
    /**
     * Full name of the account, for example:
     *
     * @remarks
     * - `Cash On Hand`
     * - `Rents Held In Trust`
     * - `Fixed Asset`
     */
    fullyQualifiedName?: string | null | undefined;
    /**
     * Confirms whether the account is a bank account or not.
     */
    isBankAccount?: boolean | undefined;
    /**
     * Name of the account.
     */
    name?: string | null | undefined;
    /**
     * Reference given to each nominal account for a business. It ensures money is allocated to the correct account. This code isn't a unique identifier in the Codat system.
     */
    nominalCode?: string | null | undefined;
    /**
     * Status of the account
     */
    status?: AccountStatus | undefined;
    /**
     * Supplemental data is additional data you can include in our standard data types.
     *
     * @remarks
     *
     * It is referenced as a configured dynamic key value pair that is unique to the accounting platform. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
     */
    supplementalData?: SupplementalData | undefined;
    /**
     * Type of account
     */
    type?: AccountType | undefined;
    /**
     * The validDatatypeLinks can be used to determine whether an account can be correctly mapped to another object; for example, accounts with a `type` of `income` might only support being used on an Invoice and Direct Income. For more information, see [Valid Data Type Links](/sync-for-payroll-api#/schemas/ValidDataTypeLinks).
     */
    validDatatypeLinks?: Array<ValidDataTypeLinks> | null | undefined;
};

/** @internal */
export namespace ValidDataTypeLinks$ {
    export type Inbound = {
        links?: Array<string> | null | undefined;
        property?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<ValidDataTypeLinks, z.ZodTypeDef, Inbound> = z
        .object({
            links: z.nullable(z.array(z.string())).optional(),
            property: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.links === undefined ? null : { links: v.links }),
                ...(v.property === undefined ? null : { property: v.property }),
            };
        });

    export type Outbound = {
        links?: Array<string> | null | undefined;
        property?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ValidDataTypeLinks> = z
        .object({
            links: z.nullable(z.array(z.string())).optional(),
            property: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.links === undefined ? null : { links: v.links }),
                ...(v.property === undefined ? null : { property: v.property }),
            };
        });
}

/** @internal */
export namespace AccountPrototype$ {
    export type Inbound = {
        currency?: string | undefined;
        currentBalance?: number | null | undefined;
        description?: string | null | undefined;
        fullyQualifiedCategory?: string | null | undefined;
        fullyQualifiedName?: string | null | undefined;
        isBankAccount?: boolean | undefined;
        name?: string | null | undefined;
        nominalCode?: string | null | undefined;
        status?: AccountStatus | undefined;
        supplementalData?: SupplementalData$.Inbound | undefined;
        type?: AccountType | undefined;
        validDatatypeLinks?: Array<ValidDataTypeLinks$.Inbound> | null | undefined;
    };

    export const inboundSchema: z.ZodType<AccountPrototype, z.ZodTypeDef, Inbound> = z
        .object({
            currency: z.string().optional(),
            currentBalance: z.nullable(z.number().transform((v) => new Decimal$(v))).optional(),
            description: z.nullable(z.string()).optional(),
            fullyQualifiedCategory: z.nullable(z.string()).optional(),
            fullyQualifiedName: z.nullable(z.string()).optional(),
            isBankAccount: z.boolean().optional(),
            name: z.nullable(z.string()).optional(),
            nominalCode: z.nullable(z.string()).optional(),
            status: AccountStatus$.optional(),
            supplementalData: SupplementalData$.inboundSchema.optional(),
            type: AccountType$.optional(),
            validDatatypeLinks: z
                .nullable(z.array(z.lazy(() => ValidDataTypeLinks$.inboundSchema)))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.currentBalance === undefined ? null : { currentBalance: v.currentBalance }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.fullyQualifiedCategory === undefined
                    ? null
                    : { fullyQualifiedCategory: v.fullyQualifiedCategory }),
                ...(v.fullyQualifiedName === undefined
                    ? null
                    : { fullyQualifiedName: v.fullyQualifiedName }),
                ...(v.isBankAccount === undefined ? null : { isBankAccount: v.isBankAccount }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.nominalCode === undefined ? null : { nominalCode: v.nominalCode }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.supplementalData === undefined
                    ? null
                    : { supplementalData: v.supplementalData }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.validDatatypeLinks === undefined
                    ? null
                    : { validDatatypeLinks: v.validDatatypeLinks }),
            };
        });

    export type Outbound = {
        currency?: string | undefined;
        currentBalance?: number | null | undefined;
        description?: string | null | undefined;
        fullyQualifiedCategory?: string | null | undefined;
        fullyQualifiedName?: string | null | undefined;
        isBankAccount?: boolean | undefined;
        name?: string | null | undefined;
        nominalCode?: string | null | undefined;
        status?: AccountStatus | undefined;
        supplementalData?: SupplementalData$.Outbound | undefined;
        type?: AccountType | undefined;
        validDatatypeLinks?: Array<ValidDataTypeLinks$.Outbound> | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AccountPrototype> = z
        .object({
            currency: z.string().optional(),
            currentBalance: z
                .nullable(
                    z
                        .union([z.instanceof(Decimal$), z.number()])
                        .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                )
                .optional(),
            description: z.nullable(z.string()).optional(),
            fullyQualifiedCategory: z.nullable(z.string()).optional(),
            fullyQualifiedName: z.nullable(z.string()).optional(),
            isBankAccount: z.boolean().optional(),
            name: z.nullable(z.string()).optional(),
            nominalCode: z.nullable(z.string()).optional(),
            status: AccountStatus$.optional(),
            supplementalData: SupplementalData$.outboundSchema.optional(),
            type: AccountType$.optional(),
            validDatatypeLinks: z
                .nullable(z.array(z.lazy(() => ValidDataTypeLinks$.outboundSchema)))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.currentBalance === undefined ? null : { currentBalance: v.currentBalance }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.fullyQualifiedCategory === undefined
                    ? null
                    : { fullyQualifiedCategory: v.fullyQualifiedCategory }),
                ...(v.fullyQualifiedName === undefined
                    ? null
                    : { fullyQualifiedName: v.fullyQualifiedName }),
                ...(v.isBankAccount === undefined ? null : { isBankAccount: v.isBankAccount }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.nominalCode === undefined ? null : { nominalCode: v.nominalCode }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.supplementalData === undefined
                    ? null
                    : { supplementalData: v.supplementalData }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.validDatatypeLinks === undefined
                    ? null
                    : { validDatatypeLinks: v.validDatatypeLinks }),
            };
        });
}
