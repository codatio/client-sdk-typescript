/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Metadata, Metadata$ } from "./metadata";
import { Status, Status$ } from "./status";
import { z } from "zod";

/**
 * The full structure of a specific tracking category including any child or subcategories.
 */
export type TrackingCategoryTree = {
    /**
     * Boolean value indicating whether this category has SubCategories
     */
    hasChildren?: boolean | undefined;
    /**
     * The identifier for the item, unique per tracking category
     */
    id?: string | null | undefined;
    metadata?: Metadata | undefined;
    modifiedDate?: string | undefined;
    /**
     * The name of the tracking category
     */
    name?: string | null | undefined;
    /**
     * The identifier for this item's immediate parent
     */
    parentId?: string | null | undefined;
    sourceModifiedDate?: string | undefined;
    /**
     * Current state of the tracking category.
     */
    status?: Status | undefined;
    /**
     * A collection of subcategories that are nested beneath this category.
     */
    subCategories?: Array<TrackingCategoryTree> | null | undefined;
};

/** @internal */
export namespace TrackingCategoryTree$ {
    export type Inbound = {
        hasChildren?: boolean | undefined;
        id?: string | null | undefined;
        metadata?: Metadata$.Inbound | undefined;
        modifiedDate?: string | undefined;
        name?: string | null | undefined;
        parentId?: string | null | undefined;
        sourceModifiedDate?: string | undefined;
        status?: Status | undefined;
        subCategories?: Array<TrackingCategoryTree$.Inbound> | null | undefined;
    };

    export const inboundSchema: z.ZodType<TrackingCategoryTree, z.ZodTypeDef, Inbound> = z
        .object({
            hasChildren: z.boolean().optional(),
            id: z.nullable(z.string()).optional(),
            metadata: Metadata$.inboundSchema.optional(),
            modifiedDate: z.string().optional(),
            name: z.nullable(z.string()).optional(),
            parentId: z.nullable(z.string()).optional(),
            sourceModifiedDate: z.string().optional(),
            status: Status$.optional(),
            subCategories: z
                .nullable(z.array(z.lazy(() => TrackingCategoryTree$.inboundSchema)))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.hasChildren === undefined ? null : { hasChildren: v.hasChildren }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.modifiedDate === undefined ? null : { modifiedDate: v.modifiedDate }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.parentId === undefined ? null : { parentId: v.parentId }),
                ...(v.sourceModifiedDate === undefined
                    ? null
                    : { sourceModifiedDate: v.sourceModifiedDate }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.subCategories === undefined ? null : { subCategories: v.subCategories }),
            };
        });

    export type Outbound = {
        hasChildren?: boolean | undefined;
        id?: string | null | undefined;
        metadata?: Metadata$.Outbound | undefined;
        modifiedDate?: string | undefined;
        name?: string | null | undefined;
        parentId?: string | null | undefined;
        sourceModifiedDate?: string | undefined;
        status?: Status | undefined;
        subCategories?: Array<TrackingCategoryTree$.Outbound> | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TrackingCategoryTree> = z
        .object({
            hasChildren: z.boolean().optional(),
            id: z.nullable(z.string()).optional(),
            metadata: Metadata$.outboundSchema.optional(),
            modifiedDate: z.string().optional(),
            name: z.nullable(z.string()).optional(),
            parentId: z.nullable(z.string()).optional(),
            sourceModifiedDate: z.string().optional(),
            status: Status$.optional(),
            subCategories: z
                .nullable(z.array(z.lazy(() => TrackingCategoryTree$.outboundSchema)))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.hasChildren === undefined ? null : { hasChildren: v.hasChildren }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.modifiedDate === undefined ? null : { modifiedDate: v.modifiedDate }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.parentId === undefined ? null : { parentId: v.parentId }),
                ...(v.sourceModifiedDate === undefined
                    ? null
                    : { sourceModifiedDate: v.sourceModifiedDate }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.subCategories === undefined ? null : { subCategories: v.subCategories }),
            };
        });
}
