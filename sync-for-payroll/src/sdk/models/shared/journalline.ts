/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../../sdk/types";
import { AccountRef, AccountRef$ } from "./accountref";
import { TrackingRecordRef, TrackingRecordRef$ } from "./trackingrecordref";
import { z } from "zod";

/**
 * List of record refs associated with the tracking information for the line (eg to a Tracking Category, or customer etc.)
 */
export type Tracking = {
    recordRefs?: Array<TrackingRecordRef> | null | undefined;
};

export type JournalLine = {
    /**
     * Data types that reference an account, for example bill and invoice line items, use an accountRef that includes the ID and name of the linked account.
     */
    accountRef?: AccountRef | undefined;
    /**
     * Currency for the journal line item.
     */
    currency?: string | null | undefined;
    /**
     * Description of the journal line item.
     */
    description?: string | null | undefined;
    /**
     * Amount for the journal line. Debit entries are considered positive, and credit entries are considered negative.
     */
    netAmount: Decimal$ | number;
    /**
     * List of record refs associated with the tracking information for the line (eg to a Tracking Category, or customer etc.)
     */
    tracking?: Tracking | undefined;
};

/** @internal */
export namespace Tracking$ {
    export type Inbound = {
        recordRefs?: Array<TrackingRecordRef$.Inbound> | null | undefined;
    };

    export const inboundSchema: z.ZodType<Tracking, z.ZodTypeDef, Inbound> = z
        .object({
            recordRefs: z.nullable(z.array(TrackingRecordRef$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.recordRefs === undefined ? null : { recordRefs: v.recordRefs }),
            };
        });

    export type Outbound = {
        recordRefs?: Array<TrackingRecordRef$.Outbound> | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Tracking> = z
        .object({
            recordRefs: z.nullable(z.array(TrackingRecordRef$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.recordRefs === undefined ? null : { recordRefs: v.recordRefs }),
            };
        });
}

/** @internal */
export namespace JournalLine$ {
    export type Inbound = {
        accountRef?: AccountRef$.Inbound | undefined;
        currency?: string | null | undefined;
        description?: string | null | undefined;
        netAmount: number;
        tracking?: Tracking$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<JournalLine, z.ZodTypeDef, Inbound> = z
        .object({
            accountRef: AccountRef$.inboundSchema.optional(),
            currency: z.nullable(z.string()).optional(),
            description: z.nullable(z.string()).optional(),
            netAmount: z.number().transform((v) => new Decimal$(v)),
            tracking: z.lazy(() => Tracking$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.accountRef === undefined ? null : { accountRef: v.accountRef }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.description === undefined ? null : { description: v.description }),
                netAmount: v.netAmount,
                ...(v.tracking === undefined ? null : { tracking: v.tracking }),
            };
        });

    export type Outbound = {
        accountRef?: AccountRef$.Outbound | undefined;
        currency?: string | null | undefined;
        description?: string | null | undefined;
        netAmount: number;
        tracking?: Tracking$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, JournalLine> = z
        .object({
            accountRef: AccountRef$.outboundSchema.optional(),
            currency: z.nullable(z.string()).optional(),
            description: z.nullable(z.string()).optional(),
            netAmount: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber())),
            tracking: z.lazy(() => Tracking$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.accountRef === undefined ? null : { accountRef: v.accountRef }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.description === undefined ? null : { description: v.description }),
                netAmount: v.netAmount,
                ...(v.tracking === undefined ? null : { tracking: v.tracking }),
            };
        });
}
