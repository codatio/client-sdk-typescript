/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import {
    ClientRateLimitReachedWebhookData,
    ClientRateLimitReachedWebhookData$inboundSchema,
    ClientRateLimitReachedWebhookData$Outbound,
    ClientRateLimitReachedWebhookData$outboundSchema,
} from "./clientratelimitreachedwebhookdata.js";
import * as z from "zod";

/**
 * Webhook request body for a client that has reached their rate limit.
 */
export type ClientRateLimitReachedWebhook = {
    /**
     * Unique identifier for your client in Codat.
     */
    clientId?: string | undefined;
    /**
     * Name of your client in Codat.
     */
    clientName?: string | undefined;
    /**
     * Unique identifier for the rule.
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    ruleId?: string | undefined;
    /**
     * The type of rule.
     */
    ruleType?: string | undefined;
    /**
     * Unique identifier of the webhook event.
     */
    alertId?: string | undefined;
    /**
     * A human-readable message about the webhook.
     */
    message?: string | undefined;
    data?: ClientRateLimitReachedWebhookData | undefined;
};

/** @internal */
export const ClientRateLimitReachedWebhook$inboundSchema: z.ZodType<
    ClientRateLimitReachedWebhook,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        ClientId: z.string().optional(),
        ClientName: z.string().optional(),
        RuleId: z.string().optional(),
        RuleType: z.string().optional(),
        AlertId: z.string().optional(),
        Message: z.string().optional(),
        Data: ClientRateLimitReachedWebhookData$inboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            ClientId: "clientId",
            ClientName: "clientName",
            RuleId: "ruleId",
            RuleType: "ruleType",
            AlertId: "alertId",
            Message: "message",
            Data: "data",
        });
    });

/** @internal */
export type ClientRateLimitReachedWebhook$Outbound = {
    ClientId?: string | undefined;
    ClientName?: string | undefined;
    RuleId?: string | undefined;
    RuleType?: string | undefined;
    AlertId?: string | undefined;
    Message?: string | undefined;
    Data?: ClientRateLimitReachedWebhookData$Outbound | undefined;
};

/** @internal */
export const ClientRateLimitReachedWebhook$outboundSchema: z.ZodType<
    ClientRateLimitReachedWebhook$Outbound,
    z.ZodTypeDef,
    ClientRateLimitReachedWebhook
> = z
    .object({
        clientId: z.string().optional(),
        clientName: z.string().optional(),
        ruleId: z.string().optional(),
        ruleType: z.string().optional(),
        alertId: z.string().optional(),
        message: z.string().optional(),
        data: ClientRateLimitReachedWebhookData$outboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            clientId: "ClientId",
            clientName: "ClientName",
            ruleId: "RuleId",
            ruleType: "RuleType",
            alertId: "AlertId",
            message: "Message",
            data: "Data",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientRateLimitReachedWebhook$ {
    /** @deprecated use `ClientRateLimitReachedWebhook$inboundSchema` instead. */
    export const inboundSchema = ClientRateLimitReachedWebhook$inboundSchema;
    /** @deprecated use `ClientRateLimitReachedWebhook$outboundSchema` instead. */
    export const outboundSchema = ClientRateLimitReachedWebhook$outboundSchema;
    /** @deprecated use `ClientRateLimitReachedWebhook$Outbound` instead. */
    export type Outbound = ClientRateLimitReachedWebhook$Outbound;
}
