/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { PushOptionChoice, PushOptionChoice$ } from "./pushoptionchoice";
import { PushOptionProperty, PushOptionProperty$ } from "./pushoptionproperty";
import { PushOptionType, PushOptionType$ } from "./pushoptiontype";
import { PushValidationInfo, PushValidationInfo$ } from "./pushvalidationinfo";
import { z } from "zod";

export type PushOption = {
    /**
     * A description of the property.
     */
    description?: string | undefined;
    /**
     * The property's display name.
     */
    displayName: string;
    options?: Array<PushOptionChoice> | null | undefined;
    properties?: Record<string, PushOptionProperty> | null | undefined;
    /**
     * The property is required if `True`.
     */
    required: boolean;
    /**
     * The option type.
     */
    type: PushOptionType;
    validation?: PushValidationInfo | undefined;
};

/** @internal */
export namespace PushOption$ {
    export type Inbound = {
        description?: string | undefined;
        displayName: string;
        options?: Array<PushOptionChoice$.Inbound> | null | undefined;
        properties?: Record<string, PushOptionProperty$.Inbound> | null | undefined;
        required: boolean;
        type: PushOptionType;
        validation?: PushValidationInfo$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PushOption, z.ZodTypeDef, Inbound> = z
        .object({
            description: z.string().optional(),
            displayName: z.string(),
            options: z.nullable(z.array(PushOptionChoice$.inboundSchema)).optional(),
            properties: z.nullable(z.record(PushOptionProperty$.inboundSchema)).optional(),
            required: z.boolean(),
            type: PushOptionType$,
            validation: PushValidationInfo$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.description === undefined ? null : { description: v.description }),
                displayName: v.displayName,
                ...(v.options === undefined ? null : { options: v.options }),
                ...(v.properties === undefined ? null : { properties: v.properties }),
                required: v.required,
                type: v.type,
                ...(v.validation === undefined ? null : { validation: v.validation }),
            };
        });

    export type Outbound = {
        description?: string | undefined;
        displayName: string;
        options?: Array<PushOptionChoice$.Outbound> | null | undefined;
        properties?: Record<string, PushOptionProperty$.Outbound> | null | undefined;
        required: boolean;
        type: PushOptionType;
        validation?: PushValidationInfo$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PushOption> = z
        .object({
            description: z.string().optional(),
            displayName: z.string(),
            options: z.nullable(z.array(PushOptionChoice$.outboundSchema)).optional(),
            properties: z.nullable(z.record(PushOptionProperty$.outboundSchema)).optional(),
            required: z.boolean(),
            type: PushOptionType$,
            validation: PushValidationInfo$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.description === undefined ? null : { description: v.description }),
                displayName: v.displayName,
                ...(v.options === undefined ? null : { options: v.options }),
                ...(v.properties === undefined ? null : { properties: v.properties }),
                required: v.required,
                type: v.type,
                ...(v.validation === undefined ? null : { validation: v.validation }),
            };
        });
}
