/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import { z } from "zod";

export type CreateJournalRequest = {
    /**
     * Allow a sync upon push completion.
     */
    allowSyncOnPushComplete?: boolean | undefined;
    /**
     * Unique identifier for a company.
     */
    companyId: string;
    /**
     * Unique identifier for a connection.
     */
    connectionId: string;
    journalPrototype?: shared.JournalPrototype | undefined;
    /**
     * Time limit for the push operation to complete before it is timed out.
     */
    timeoutInMinutes?: number | undefined;
};

export type CreateJournalResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * Success
     */
    createJournalResponse?: shared.CreateJournalResponse | undefined;
    /**
     * The request made is not valid.
     */
    errorMessage?: shared.ErrorMessage | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace CreateJournalRequest$ {
    export type Inbound = {
        allowSyncOnPushComplete?: boolean | undefined;
        companyId: string;
        connectionId: string;
        journalPrototype?: shared.JournalPrototype$.Inbound | undefined;
        timeoutInMinutes?: number | undefined;
    };

    export const inboundSchema: z.ZodType<CreateJournalRequest, z.ZodTypeDef, Inbound> = z
        .object({
            allowSyncOnPushComplete: z.boolean().default(true),
            companyId: z.string(),
            connectionId: z.string(),
            journalPrototype: shared.JournalPrototype$.inboundSchema.optional(),
            timeoutInMinutes: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                allowSyncOnPushComplete: v.allowSyncOnPushComplete,
                companyId: v.companyId,
                connectionId: v.connectionId,
                ...(v.journalPrototype === undefined
                    ? null
                    : { journalPrototype: v.journalPrototype }),
                ...(v.timeoutInMinutes === undefined
                    ? null
                    : { timeoutInMinutes: v.timeoutInMinutes }),
            };
        });

    export type Outbound = {
        allowSyncOnPushComplete: boolean;
        companyId: string;
        connectionId: string;
        journalPrototype?: shared.JournalPrototype$.Outbound | undefined;
        timeoutInMinutes?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateJournalRequest> = z
        .object({
            allowSyncOnPushComplete: z.boolean().default(true),
            companyId: z.string(),
            connectionId: z.string(),
            journalPrototype: shared.JournalPrototype$.outboundSchema.optional(),
            timeoutInMinutes: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                allowSyncOnPushComplete: v.allowSyncOnPushComplete,
                companyId: v.companyId,
                connectionId: v.connectionId,
                ...(v.journalPrototype === undefined
                    ? null
                    : { journalPrototype: v.journalPrototype }),
                ...(v.timeoutInMinutes === undefined
                    ? null
                    : { timeoutInMinutes: v.timeoutInMinutes }),
            };
        });
}

/** @internal */
export namespace CreateJournalResponse$ {
    export type Inbound = {
        ContentType: string;
        CreateJournalResponse?: shared.CreateJournalResponse$.Inbound | undefined;
        ErrorMessage?: shared.ErrorMessage$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<CreateJournalResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            CreateJournalResponse: shared.CreateJournalResponse$.inboundSchema.optional(),
            ErrorMessage: shared.ErrorMessage$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.CreateJournalResponse === undefined
                    ? null
                    : { createJournalResponse: v.CreateJournalResponse }),
                ...(v.ErrorMessage === undefined ? null : { errorMessage: v.ErrorMessage }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        CreateJournalResponse?: shared.CreateJournalResponse$.Outbound | undefined;
        ErrorMessage?: shared.ErrorMessage$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateJournalResponse> = z
        .object({
            contentType: z.string(),
            createJournalResponse: shared.CreateJournalResponse$.outboundSchema.optional(),
            errorMessage: shared.ErrorMessage$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.createJournalResponse === undefined
                    ? null
                    : { CreateJournalResponse: v.createJournalResponse }),
                ...(v.errorMessage === undefined ? null : { ErrorMessage: v.errorMessage }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
