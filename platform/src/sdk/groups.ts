/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { groupsAddCompany } from "../funcs/groupsAddCompany.js";
import { groupsCreate } from "../funcs/groupsCreate.js";
import { groupsList } from "../funcs/groupsList.js";
import { groupsRemoveCompany } from "../funcs/groupsRemoveCompany.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Groups extends ClientSDK {
  /**
   * Add company
   *
   * @remarks
   * Use the *Add company* endpoint to assign a company to a group. A company can belong to multiple groups, but can only be added to one group at a time.
   *
   * [Groups](https://docs.codat.io/platform-api#/schemas/Group) define a set of companies that are organized based on a chosen characteristic and can be managed in the same way.
   */
  async addCompany(
    request: operations.AddCompanyToGroupRequest,
    options?: RequestOptions,
  ): Promise<shared.Company> {
    return unwrapAsync(groupsAddCompany(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove company
   *
   * @remarks
   * Use the *Remove company* endpoint to remove a company from a group.
   *
   * [Groups](https://docs.codat.io/platform-api#/schemas/Group) define a set of companies that are organized based on a chosen characteristic and can be managed in the same way.
   */
  async removeCompany(
    request: operations.RemoveCompanyFromGroupRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(groupsRemoveCompany(
      this,
      request,
      options,
    ));
  }

  /**
   * List groups
   *
   * @remarks
   * Use the *List group* endpoint to return a list of all groups that currently exist for your client.
   *
   * [Groups](https://docs.codat.io/platform-api#/schemas/Group) define a set of companies that are organized based on a chosen characteristic and can be managed in the same way.
   */
  async list(
    options?: RequestOptions,
  ): Promise<shared.Groups> {
    return unwrapAsync(groupsList(
      this,
      options,
    ));
  }

  /**
   * Create group
   *
   * @remarks
   * Use the *Create group* endpoint to generate a new group that you can assign your companies to.
   *
   * [Groups](https://docs.codat.io/platform-api#/schemas/Group) define a set of companies that are organized based on a chosen characteristic and can be managed in the same way.
   *
   * ### Tips and traps
   *
   * * The maximum length for the group name is 50 characters.
   * * It's possible to create up to 20 groups per client.
   */
  async create(
    request?: shared.GroupPrototype | undefined,
    options?: RequestOptions,
  ): Promise<shared.Group> {
    return unwrapAsync(groupsCreate(
      this,
      request,
      options,
    ));
  }
}
