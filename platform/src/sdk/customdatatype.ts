/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { customDataTypeConfigure } from "../funcs/customDataTypeConfigure.js";
import { customDataTypeGetConfiguration } from "../funcs/customDataTypeGetConfiguration.js";
import { customDataTypeList } from "../funcs/customDataTypeList.js";
import { customDataTypeRefresh } from "../funcs/customDataTypeRefresh.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class CustomDataType extends ClientSDK {
  /**
   * Configure custom data type
   *
   * @remarks
   * The *Configure custom data type* endpoint allows you to maintain or change the configuration required to return a custom data type for a specific integration.
   *
   * A [custom data type](https://docs.codat.io/using-the-api/custom-data) is an additional data type you can create that is not included in Codat's standardized data model.
   *
   * ### Tips and traps
   *
   * - You can only configure a single custom data type for a single platform at a time. Use the endpoint multiple times if you need to configure it for multiple platforms.
   *
   * - You can only indicate a single data source for each customer data type.
   *
   * - Make your custom configuration as similar as possible to our standard data types so you can interact with them in exactly the same way.
   */
  async configure(
    request: operations.ConfigureCustomDataTypeRequest,
    options?: RequestOptions,
  ): Promise<shared.CustomDataTypeConfiguration> {
    return unwrapAsync(customDataTypeConfigure(
      this,
      request,
      options,
    ));
  }

  /**
   * Get custom data configuration
   *
   * @remarks
   * The *Get custom data configuration* endpoint returns existing configuration details for the specified custom data type and integration pair you previously configured.
   *
   * A [custom data type](https://docs.codat.io/using-the-api/custom-data) is an additional data type you can create that is not included in Codat's standardized data model.
   */
  async getConfiguration(
    request: operations.GetCustomDataTypeConfigurationRequest,
    options?: RequestOptions,
  ): Promise<shared.CustomDataTypeRecords> {
    return unwrapAsync(customDataTypeGetConfiguration(
      this,
      request,
      options,
    ));
  }

  /**
   * Refresh custom data type
   *
   * @remarks
   * The *Refresh custom data type* endpoint refreshes the specified custom data type for a given company. This is an asynchronous operation that will sync updated data from the linked integration into Codat for you to view.
   */
  async refresh(
    request: operations.RefreshCustomDataTypeRequest,
    options?: RequestOptions,
  ): Promise<shared.PullOperation> {
    return unwrapAsync(customDataTypeRefresh(
      this,
      request,
      options,
    ));
  }

  /**
   * List custom data type records
   *
   * @remarks
   * The *List custom data type records* endpoint returns a paginated list of records pulled for the specified custom data type you previously configured.
   *
   * A [custom data type](https://docs.codat.io/using-the-api/custom-data) is an additional data type you can create that is not included in Codat's standardized data model.s endpoint returns a paginated list of records whose schema is defined [Configure custom data type](https://docs.codat.io/platform-api#/operations/configure-custom-data-type)
   */
  async list(
    request: operations.ListCustomDataTypeRecordsRequest,
    options?: RequestOptions,
  ): Promise<shared.CustomDataTypeRecords> {
    return unwrapAsync(customDataTypeList(
      this,
      request,
      options,
    ));
  }
}
