/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  GroupRef,
  GroupRef$inboundSchema,
  GroupRef$Outbound,
  GroupRef$outboundSchema,
} from "./groupref.js";

export type CompanyRequestBody = {
  /**
   * Name of company being connected.
   */
  name: string;
  /**
   * Additional information about the company. This can be used to store foreign IDs, references, etc.
   */
  description?: string | undefined;
  /**
   * Reference to the groups that the company is assigned to.
   */
  groups?: Array<GroupRef> | undefined;
};

/** @internal */
export const CompanyRequestBody$inboundSchema: z.ZodType<
  CompanyRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  groups: z.array(GroupRef$inboundSchema).optional(),
});

/** @internal */
export type CompanyRequestBody$Outbound = {
  name: string;
  description?: string | undefined;
  groups?: Array<GroupRef$Outbound> | undefined;
};

/** @internal */
export const CompanyRequestBody$outboundSchema: z.ZodType<
  CompanyRequestBody$Outbound,
  z.ZodTypeDef,
  CompanyRequestBody
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  groups: z.array(GroupRef$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompanyRequestBody$ {
  /** @deprecated use `CompanyRequestBody$inboundSchema` instead. */
  export const inboundSchema = CompanyRequestBody$inboundSchema;
  /** @deprecated use `CompanyRequestBody$outboundSchema` instead. */
  export const outboundSchema = CompanyRequestBody$outboundSchema;
  /** @deprecated use `CompanyRequestBody$Outbound` instead. */
  export type Outbound = CompanyRequestBody$Outbound;
}
