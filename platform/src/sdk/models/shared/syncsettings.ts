/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SyncSetting,
  SyncSetting$inboundSchema,
  SyncSetting$Outbound,
  SyncSetting$outboundSchema,
} from "./syncsetting.js";

export type SyncSettings = {
  /**
   * Unique identifier for your client in Codat.
   */
  clientId?: string | undefined;
  settings?: Array<SyncSetting> | undefined;
  /**
   * Set to `True` if you want to override the default [sync settings](https://docs.codat.io/knowledge-base/advanced-sync-settings).
   */
  overridesDefaults?: boolean | undefined;
};

/** @internal */
export const SyncSettings$inboundSchema: z.ZodType<
  SyncSettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientId: z.string().optional(),
  settings: z.array(SyncSetting$inboundSchema).optional(),
  overridesDefaults: z.boolean().optional(),
});

/** @internal */
export type SyncSettings$Outbound = {
  clientId?: string | undefined;
  settings?: Array<SyncSetting$Outbound> | undefined;
  overridesDefaults?: boolean | undefined;
};

/** @internal */
export const SyncSettings$outboundSchema: z.ZodType<
  SyncSettings$Outbound,
  z.ZodTypeDef,
  SyncSettings
> = z.object({
  clientId: z.string().optional(),
  settings: z.array(SyncSetting$outboundSchema).optional(),
  overridesDefaults: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SyncSettings$ {
  /** @deprecated use `SyncSettings$inboundSchema` instead. */
  export const inboundSchema = SyncSettings$inboundSchema;
  /** @deprecated use `SyncSettings$outboundSchema` instead. */
  export const outboundSchema = SyncSettings$outboundSchema;
  /** @deprecated use `SyncSettings$Outbound` instead. */
  export type Outbound = SyncSettings$Outbound;
}

export function syncSettingsToJSON(syncSettings: SyncSettings): string {
  return JSON.stringify(SyncSettings$outboundSchema.parse(syncSettings));
}

export function syncSettingsFromJSON(
  jsonString: string,
): SafeParseResult<SyncSettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SyncSettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SyncSettings' from JSON`,
  );
}
