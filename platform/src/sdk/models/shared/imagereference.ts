/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Image reference.
 */
export type ImageReference = {
  /**
   * Source URL for image.
   */
  src?: string | undefined;
  /**
   * Alternative text when image is not available.
   */
  alt?: string | undefined;
};

/** @internal */
export const ImageReference$inboundSchema: z.ZodType<
  ImageReference,
  z.ZodTypeDef,
  unknown
> = z.object({
  src: z.string().optional(),
  alt: z.string().optional(),
});

/** @internal */
export type ImageReference$Outbound = {
  src?: string | undefined;
  alt?: string | undefined;
};

/** @internal */
export const ImageReference$outboundSchema: z.ZodType<
  ImageReference$Outbound,
  z.ZodTypeDef,
  ImageReference
> = z.object({
  src: z.string().optional(),
  alt: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ImageReference$ {
  /** @deprecated use `ImageReference$inboundSchema` instead. */
  export const inboundSchema = ImageReference$inboundSchema;
  /** @deprecated use `ImageReference$outboundSchema` instead. */
  export const outboundSchema = ImageReference$outboundSchema;
  /** @deprecated use `ImageReference$Outbound` instead. */
  export type Outbound = ImageReference$Outbound;
}

export function imageReferenceToJSON(imageReference: ImageReference): string {
  return JSON.stringify(ImageReference$outboundSchema.parse(imageReference));
}

export function imageReferenceFromJSON(
  jsonString: string,
): SafeParseResult<ImageReference, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ImageReference$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ImageReference' from JSON`,
  );
}
