/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CompanyReference,
  CompanyReference$inboundSchema,
  CompanyReference$Outbound,
  CompanyReference$outboundSchema,
} from "./companyreference.js";
import {
  Connection,
  Connection$inboundSchema,
  Connection$Outbound,
  Connection$outboundSchema,
} from "./connection.js";

export type ConnectionWebhookPayload = {
  referenceCompany?: CompanyReference | undefined;
  /**
   * A connection represents a [company's](https://docs.codat.io/platform-api#/schemas/Company) connection to a data source and allows you to synchronize data (pull and/or push) with that source.
   *
   * @remarks
   *
   * A company can have multiple data connections depending on the type of data source it is connecting to. For example, a single company can link to:
   *
   * - [Accounting data](https://docs.codat.io/accounting-api/overview) - 1 active connection.
   * - [Banking data](https://docs.codat.io/banking-api/overview) - Multiple active connections.
   * - [Commerce data](https://docs.codat.io/commerce-api/overview) - Multiple active connections.
   * Any combination of accounting, banking, and commerce data connections is allowed.
   *
   * Before you can use a data connection to pull or push data, the company must grant you access to their business data by [linking the connection](https://docs.codat.io/auth-flow/overview).
   */
  connection?: Connection | undefined;
};

/** @internal */
export const ConnectionWebhookPayload$inboundSchema: z.ZodType<
  ConnectionWebhookPayload,
  z.ZodTypeDef,
  unknown
> = z.object({
  referenceCompany: CompanyReference$inboundSchema.optional(),
  connection: Connection$inboundSchema.optional(),
});

/** @internal */
export type ConnectionWebhookPayload$Outbound = {
  referenceCompany?: CompanyReference$Outbound | undefined;
  connection?: Connection$Outbound | undefined;
};

/** @internal */
export const ConnectionWebhookPayload$outboundSchema: z.ZodType<
  ConnectionWebhookPayload$Outbound,
  z.ZodTypeDef,
  ConnectionWebhookPayload
> = z.object({
  referenceCompany: CompanyReference$outboundSchema.optional(),
  connection: Connection$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConnectionWebhookPayload$ {
  /** @deprecated use `ConnectionWebhookPayload$inboundSchema` instead. */
  export const inboundSchema = ConnectionWebhookPayload$inboundSchema;
  /** @deprecated use `ConnectionWebhookPayload$outboundSchema` instead. */
  export const outboundSchema = ConnectionWebhookPayload$outboundSchema;
  /** @deprecated use `ConnectionWebhookPayload$Outbound` instead. */
  export type Outbound = ConnectionWebhookPayload$Outbound;
}

export function connectionWebhookPayloadToJSON(
  connectionWebhookPayload: ConnectionWebhookPayload,
): string {
  return JSON.stringify(
    ConnectionWebhookPayload$outboundSchema.parse(connectionWebhookPayload),
  );
}

export function connectionWebhookPayloadFromJSON(
  jsonString: string,
): SafeParseResult<ConnectionWebhookPayload, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConnectionWebhookPayload$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConnectionWebhookPayload' from JSON`,
  );
}
