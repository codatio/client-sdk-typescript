/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type Content = {};

export type ModifiedDate = {
    modifiedDate?: string | undefined;
};

export type CustomDataTypeRecord = {
    /**
     * Unique identifier of the record.
     */
    id?: string | undefined;
    /**
     * Values from the source system for the properties defined in the custom data type configuration.
     */
    content?: { [k: string]: Content } | undefined;
    modifiedDate?: ModifiedDate | undefined;
};

/** @internal */
export const Content$inboundSchema: z.ZodType<Content, z.ZodTypeDef, unknown> = z.object({});

/** @internal */
export type Content$Outbound = {};

/** @internal */
export const Content$outboundSchema: z.ZodType<Content$Outbound, z.ZodTypeDef, Content> = z.object(
    {}
);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Content$ {
    /** @deprecated use `Content$inboundSchema` instead. */
    export const inboundSchema = Content$inboundSchema;
    /** @deprecated use `Content$outboundSchema` instead. */
    export const outboundSchema = Content$outboundSchema;
    /** @deprecated use `Content$Outbound` instead. */
    export type Outbound = Content$Outbound;
}

/** @internal */
export const ModifiedDate$inboundSchema: z.ZodType<ModifiedDate, z.ZodTypeDef, unknown> = z.object({
    modifiedDate: z.string().optional(),
});

/** @internal */
export type ModifiedDate$Outbound = {
    modifiedDate?: string | undefined;
};

/** @internal */
export const ModifiedDate$outboundSchema: z.ZodType<
    ModifiedDate$Outbound,
    z.ZodTypeDef,
    ModifiedDate
> = z.object({
    modifiedDate: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModifiedDate$ {
    /** @deprecated use `ModifiedDate$inboundSchema` instead. */
    export const inboundSchema = ModifiedDate$inboundSchema;
    /** @deprecated use `ModifiedDate$outboundSchema` instead. */
    export const outboundSchema = ModifiedDate$outboundSchema;
    /** @deprecated use `ModifiedDate$Outbound` instead. */
    export type Outbound = ModifiedDate$Outbound;
}

/** @internal */
export const CustomDataTypeRecord$inboundSchema: z.ZodType<
    CustomDataTypeRecord,
    z.ZodTypeDef,
    unknown
> = z.object({
    id: z.string().optional(),
    content: z.record(z.lazy(() => Content$inboundSchema)).optional(),
    modifiedDate: z.lazy(() => ModifiedDate$inboundSchema).optional(),
});

/** @internal */
export type CustomDataTypeRecord$Outbound = {
    id?: string | undefined;
    content?: { [k: string]: Content$Outbound } | undefined;
    modifiedDate?: ModifiedDate$Outbound | undefined;
};

/** @internal */
export const CustomDataTypeRecord$outboundSchema: z.ZodType<
    CustomDataTypeRecord$Outbound,
    z.ZodTypeDef,
    CustomDataTypeRecord
> = z.object({
    id: z.string().optional(),
    content: z.record(z.lazy(() => Content$outboundSchema)).optional(),
    modifiedDate: z.lazy(() => ModifiedDate$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomDataTypeRecord$ {
    /** @deprecated use `CustomDataTypeRecord$inboundSchema` instead. */
    export const inboundSchema = CustomDataTypeRecord$inboundSchema;
    /** @deprecated use `CustomDataTypeRecord$outboundSchema` instead. */
    export const outboundSchema = CustomDataTypeRecord$outboundSchema;
    /** @deprecated use `CustomDataTypeRecord$Outbound` instead. */
    export type Outbound = CustomDataTypeRecord$Outbound;
}
