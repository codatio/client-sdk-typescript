/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CompanyReference,
  CompanyReference$inboundSchema,
  CompanyReference$Outbound,
  CompanyReference$outboundSchema,
} from "./companyreference.js";
import {
  DataTypeWriteWebhookRecord,
  DataTypeWriteWebhookRecord$inboundSchema,
  DataTypeWriteWebhookRecord$Outbound,
  DataTypeWriteWebhookRecord$outboundSchema,
} from "./datatypewritewebhookrecord.js";
import {
  WriteStatus,
  WriteStatus$inboundSchema,
  WriteStatus$outboundSchema,
} from "./writestatus.js";
import {
  WriteType,
  WriteType$inboundSchema,
  WriteType$outboundSchema,
} from "./writetype.js";

export type DataTypeWriteWebhookPayload = {
  /**
   * Unique identifier of the write request. This is also known as the push operation ID.
   */
  id?: string | undefined;
  /**
   * Type of write request.
   */
  type?: WriteType | undefined;
  referenceCompany?: CompanyReference | undefined;
  /**
   * Unique identifier for a company's data connection.
   */
  connectionId?: string | undefined;
  /**
   * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
   *
   * @remarks
   *
   * ```
   * 2020-10-08T22:40:50Z
   * 2021-01-01T00:00:00
   * ```
   *
   * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
   *
   * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
   * - Unqualified local time: `2021-11-15T01:00:00`
   * - UTC time offsets: `2021-11-15T01:00:00-05:00`
   *
   * > Time zones
   * >
   * > Not all dates from Codat will contain information about time zones.
   * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
   */
  requestedOnDate?: string | undefined;
  /**
   * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
   *
   * @remarks
   *
   * ```
   * 2020-10-08T22:40:50Z
   * 2021-01-01T00:00:00
   * ```
   *
   * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
   *
   * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
   * - Unqualified local time: `2021-11-15T01:00:00`
   * - UTC time offsets: `2021-11-15T01:00:00-05:00`
   *
   * > Time zones
   * >
   * > Not all dates from Codat will contain information about time zones.
   * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
   */
  completedOnDate?: string | undefined;
  /**
   * The current status of the write request, which is the same as the push operation status.
   */
  status?: WriteStatus | undefined;
  record?: DataTypeWriteWebhookRecord | undefined;
  /**
   * Unique identifier for the uploaded attachment, null if no attachment uploaded.
   */
  attachmentId?: string | null | undefined;
};

/** @internal */
export const DataTypeWriteWebhookPayload$inboundSchema: z.ZodType<
  DataTypeWriteWebhookPayload,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: WriteType$inboundSchema.optional(),
  referenceCompany: CompanyReference$inboundSchema.optional(),
  connectionId: z.string().optional(),
  requestedOnDate: z.string().optional(),
  completedOnDate: z.string().optional(),
  status: WriteStatus$inboundSchema.optional(),
  record: DataTypeWriteWebhookRecord$inboundSchema.optional(),
  attachmentId: z.nullable(z.string()).optional(),
});

/** @internal */
export type DataTypeWriteWebhookPayload$Outbound = {
  id?: string | undefined;
  type?: string | undefined;
  referenceCompany?: CompanyReference$Outbound | undefined;
  connectionId?: string | undefined;
  requestedOnDate?: string | undefined;
  completedOnDate?: string | undefined;
  status?: string | undefined;
  record?: DataTypeWriteWebhookRecord$Outbound | undefined;
  attachmentId?: string | null | undefined;
};

/** @internal */
export const DataTypeWriteWebhookPayload$outboundSchema: z.ZodType<
  DataTypeWriteWebhookPayload$Outbound,
  z.ZodTypeDef,
  DataTypeWriteWebhookPayload
> = z.object({
  id: z.string().optional(),
  type: WriteType$outboundSchema.optional(),
  referenceCompany: CompanyReference$outboundSchema.optional(),
  connectionId: z.string().optional(),
  requestedOnDate: z.string().optional(),
  completedOnDate: z.string().optional(),
  status: WriteStatus$outboundSchema.optional(),
  record: DataTypeWriteWebhookRecord$outboundSchema.optional(),
  attachmentId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DataTypeWriteWebhookPayload$ {
  /** @deprecated use `DataTypeWriteWebhookPayload$inboundSchema` instead. */
  export const inboundSchema = DataTypeWriteWebhookPayload$inboundSchema;
  /** @deprecated use `DataTypeWriteWebhookPayload$outboundSchema` instead. */
  export const outboundSchema = DataTypeWriteWebhookPayload$outboundSchema;
  /** @deprecated use `DataTypeWriteWebhookPayload$Outbound` instead. */
  export type Outbound = DataTypeWriteWebhookPayload$Outbound;
}

export function dataTypeWriteWebhookPayloadToJSON(
  dataTypeWriteWebhookPayload: DataTypeWriteWebhookPayload,
): string {
  return JSON.stringify(
    DataTypeWriteWebhookPayload$outboundSchema.parse(
      dataTypeWriteWebhookPayload,
    ),
  );
}

export function dataTypeWriteWebhookPayloadFromJSON(
  jsonString: string,
): SafeParseResult<DataTypeWriteWebhookPayload, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DataTypeWriteWebhookPayload$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DataTypeWriteWebhookPayload' from JSON`,
  );
}
