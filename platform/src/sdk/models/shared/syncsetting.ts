/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PropertieDataType,
  PropertieDataType$inboundSchema,
  PropertieDataType$outboundSchema,
} from "./propertiedatatype.js";

/**
 * Describes how often, and how much history, should be fetched for the given data type when a pull operation is queued.
 */
export type SyncSetting = {
  /**
   * Available data types
   */
  dataType: PropertieDataType;
  /**
   * Whether this data type should be queued after a company has authorized a connection.
   */
  fetchOnFirstLink: boolean;
  /**
   * Number of hours after which this data type should be refreshed.
   */
  syncSchedule: number;
  /**
   * The sync in which data types are queued for a sync.
   */
  syncOrder: number;
  /**
   * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
   *
   * @remarks
   *
   * ```
   * 2020-10-08T22:40:50Z
   * 2021-01-01T00:00:00
   * ```
   *
   * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
   *
   * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
   * - Unqualified local time: `2021-11-15T01:00:00`
   * - UTC time offsets: `2021-11-15T01:00:00-05:00`
   *
   * > Time zones
   * >
   * > Not all dates from Codat will contain information about time zones.
   * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
   */
  syncFromUtc?: string | undefined;
  /**
   * Number of months of data to be fetched. Set this *or* `syncFromUTC`.
   */
  syncFromWindow?: number | undefined;
  /**
   * Months of data to fetch, for report data types (`balanceSheet` & `profitAndLoss`) only.
   */
  monthsToSync?: number | undefined;
  /**
   * `True` if the [sync setting](https://docs.codat.io/knowledge-base/advanced-sync-settings) is locked.
   */
  isLocked?: boolean | undefined;
};

/** @internal */
export const SyncSetting$inboundSchema: z.ZodType<
  SyncSetting,
  z.ZodTypeDef,
  unknown
> = z.object({
  dataType: PropertieDataType$inboundSchema,
  fetchOnFirstLink: z.boolean(),
  syncSchedule: z.number().int(),
  syncOrder: z.number().int(),
  syncFromUtc: z.string().optional(),
  syncFromWindow: z.number().int().optional(),
  monthsToSync: z.number().int().optional(),
  isLocked: z.boolean().optional(),
});

/** @internal */
export type SyncSetting$Outbound = {
  dataType: string;
  fetchOnFirstLink: boolean;
  syncSchedule: number;
  syncOrder: number;
  syncFromUtc?: string | undefined;
  syncFromWindow?: number | undefined;
  monthsToSync?: number | undefined;
  isLocked?: boolean | undefined;
};

/** @internal */
export const SyncSetting$outboundSchema: z.ZodType<
  SyncSetting$Outbound,
  z.ZodTypeDef,
  SyncSetting
> = z.object({
  dataType: PropertieDataType$outboundSchema,
  fetchOnFirstLink: z.boolean(),
  syncSchedule: z.number().int(),
  syncOrder: z.number().int(),
  syncFromUtc: z.string().optional(),
  syncFromWindow: z.number().int().optional(),
  monthsToSync: z.number().int().optional(),
  isLocked: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SyncSetting$ {
  /** @deprecated use `SyncSetting$inboundSchema` instead. */
  export const inboundSchema = SyncSetting$inboundSchema;
  /** @deprecated use `SyncSetting$outboundSchema` instead. */
  export const outboundSchema = SyncSetting$outboundSchema;
  /** @deprecated use `SyncSetting$Outbound` instead. */
  export type Outbound = SyncSetting$Outbound;
}

export function syncSettingToJSON(syncSetting: SyncSetting): string {
  return JSON.stringify(SyncSetting$outboundSchema.parse(syncSetting));
}

export function syncSettingFromJSON(
  jsonString: string,
): SafeParseResult<SyncSetting, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SyncSetting$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SyncSetting' from JSON`,
  );
}
