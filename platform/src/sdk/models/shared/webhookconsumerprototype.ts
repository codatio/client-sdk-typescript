/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type WebhookConsumerPrototype = {
    /**
     * The URL that will consume webhook events dispatched by Codat.
     */
    url?: string | undefined;
    /**
     * Flag that enables or disables the endpoint from receiving events. Disabled when set to `true`.
     */
    disabled?: boolean | null | undefined;
    /**
     * An array of event types the webhook consumer subscribes to.
     */
    eventTypes?: Array<string> | undefined;
    /**
     * Unique identifier of the company to indicate company-specific events. The associated webhook consumer will receive events only for the specified ID.
     */
    companyId?: string | null | undefined;
};

/** @internal */
export const WebhookConsumerPrototype$inboundSchema: z.ZodType<
    WebhookConsumerPrototype,
    z.ZodTypeDef,
    unknown
> = z.object({
    url: z.string().optional(),
    disabled: z.nullable(z.boolean().default(false)),
    eventTypes: z.array(z.string()).optional(),
    companyId: z.nullable(z.string()).optional(),
});

/** @internal */
export type WebhookConsumerPrototype$Outbound = {
    url?: string | undefined;
    disabled: boolean | null;
    eventTypes?: Array<string> | undefined;
    companyId?: string | null | undefined;
};

/** @internal */
export const WebhookConsumerPrototype$outboundSchema: z.ZodType<
    WebhookConsumerPrototype$Outbound,
    z.ZodTypeDef,
    WebhookConsumerPrototype
> = z.object({
    url: z.string().optional(),
    disabled: z.nullable(z.boolean().default(false)),
    eventTypes: z.array(z.string()).optional(),
    companyId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookConsumerPrototype$ {
    /** @deprecated use `WebhookConsumerPrototype$inboundSchema` instead. */
    export const inboundSchema = WebhookConsumerPrototype$inboundSchema;
    /** @deprecated use `WebhookConsumerPrototype$outboundSchema` instead. */
    export const outboundSchema = WebhookConsumerPrototype$outboundSchema;
    /** @deprecated use `WebhookConsumerPrototype$Outbound` instead. */
    export type Outbound = WebhookConsumerPrototype$Outbound;
}
