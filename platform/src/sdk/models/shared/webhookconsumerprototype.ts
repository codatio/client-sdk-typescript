/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type WebhookConsumerPrototype = {
  /**
   * The URL that will consume webhook events dispatched by Codat.
   */
  url?: string | undefined;
  /**
   * Flag that enables or disables the endpoint from receiving events. Disabled when set to `true`.
   */
  disabled?: boolean | null | undefined;
  /**
   * An array of event types the webhook consumer subscribes to.
   */
  eventTypes?: Array<string> | undefined;
  /**
   * Company tags provide an additional way to filter messages, independent of event types. Company tags are case-sensitive, and only messages from companies with matching tags will be sent to this endpoint. Use the format `tagKey:tagValue`.
   */
  companyTags?: Array<string> | undefined;
  /**
   * Unique identifier of the company to indicate company-specific events. The associated webhook consumer will receive events only for the specified ID.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  companyId?: string | null | undefined;
};

/** @internal */
export const WebhookConsumerPrototype$inboundSchema: z.ZodType<
  WebhookConsumerPrototype,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string().optional(),
  disabled: z.nullable(z.boolean().default(false)),
  eventTypes: z.array(z.string()).optional(),
  companyTags: z.array(z.string()).optional(),
  companyId: z.nullable(z.string()).optional(),
});

/** @internal */
export type WebhookConsumerPrototype$Outbound = {
  url?: string | undefined;
  disabled: boolean | null;
  eventTypes?: Array<string> | undefined;
  companyTags?: Array<string> | undefined;
  companyId?: string | null | undefined;
};

/** @internal */
export const WebhookConsumerPrototype$outboundSchema: z.ZodType<
  WebhookConsumerPrototype$Outbound,
  z.ZodTypeDef,
  WebhookConsumerPrototype
> = z.object({
  url: z.string().optional(),
  disabled: z.nullable(z.boolean().default(false)),
  eventTypes: z.array(z.string()).optional(),
  companyTags: z.array(z.string()).optional(),
  companyId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookConsumerPrototype$ {
  /** @deprecated use `WebhookConsumerPrototype$inboundSchema` instead. */
  export const inboundSchema = WebhookConsumerPrototype$inboundSchema;
  /** @deprecated use `WebhookConsumerPrototype$outboundSchema` instead. */
  export const outboundSchema = WebhookConsumerPrototype$outboundSchema;
  /** @deprecated use `WebhookConsumerPrototype$Outbound` instead. */
  export type Outbound = WebhookConsumerPrototype$Outbound;
}

export function webhookConsumerPrototypeToJSON(
  webhookConsumerPrototype: WebhookConsumerPrototype,
): string {
  return JSON.stringify(
    WebhookConsumerPrototype$outboundSchema.parse(webhookConsumerPrototype),
  );
}

export function webhookConsumerPrototypeFromJSON(
  jsonString: string,
): SafeParseResult<WebhookConsumerPrototype, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WebhookConsumerPrototype$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WebhookConsumerPrototype' from JSON`,
  );
}
