/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DataTypeWriteWebhookRecord = {
  /**
   * The unique identifier of the data type created, updated, deleted, or had an attachment uploaded in the accounting platform.
   */
  id?: string | undefined;
};

/** @internal */
export const DataTypeWriteWebhookRecord$inboundSchema: z.ZodType<
  DataTypeWriteWebhookRecord,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
});

/** @internal */
export type DataTypeWriteWebhookRecord$Outbound = {
  id?: string | undefined;
};

/** @internal */
export const DataTypeWriteWebhookRecord$outboundSchema: z.ZodType<
  DataTypeWriteWebhookRecord$Outbound,
  z.ZodTypeDef,
  DataTypeWriteWebhookRecord
> = z.object({
  id: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DataTypeWriteWebhookRecord$ {
  /** @deprecated use `DataTypeWriteWebhookRecord$inboundSchema` instead. */
  export const inboundSchema = DataTypeWriteWebhookRecord$inboundSchema;
  /** @deprecated use `DataTypeWriteWebhookRecord$outboundSchema` instead. */
  export const outboundSchema = DataTypeWriteWebhookRecord$outboundSchema;
  /** @deprecated use `DataTypeWriteWebhookRecord$Outbound` instead. */
  export type Outbound = DataTypeWriteWebhookRecord$Outbound;
}

export function dataTypeWriteWebhookRecordToJSON(
  dataTypeWriteWebhookRecord: DataTypeWriteWebhookRecord,
): string {
  return JSON.stringify(
    DataTypeWriteWebhookRecord$outboundSchema.parse(dataTypeWriteWebhookRecord),
  );
}

export function dataTypeWriteWebhookRecordFromJSON(
  jsonString: string,
): SafeParseResult<DataTypeWriteWebhookRecord, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DataTypeWriteWebhookRecord$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DataTypeWriteWebhookRecord' from JSON`,
  );
}
