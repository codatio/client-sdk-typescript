/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  WebhookNotifier,
  WebhookNotifier$inboundSchema,
  WebhookNotifier$Outbound,
  WebhookNotifier$outboundSchema,
} from "./webhooknotifier.js";

/**
 * Create a message that notifies a URL of an event based on its given type or condition.
 */
export type CreateRule = {
  /**
   * The type of webhook.
   */
  type: string;
  /**
   * Unique identifier for your SMB in Codat.
   */
  companyId?: string | undefined;
  notifiers: WebhookNotifier;
};

/** @internal */
export const CreateRule$inboundSchema: z.ZodType<
  CreateRule,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  companyId: z.string().optional(),
  notifiers: WebhookNotifier$inboundSchema,
});

/** @internal */
export type CreateRule$Outbound = {
  type: string;
  companyId?: string | undefined;
  notifiers: WebhookNotifier$Outbound;
};

/** @internal */
export const CreateRule$outboundSchema: z.ZodType<
  CreateRule$Outbound,
  z.ZodTypeDef,
  CreateRule
> = z.object({
  type: z.string(),
  companyId: z.string().optional(),
  notifiers: WebhookNotifier$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRule$ {
  /** @deprecated use `CreateRule$inboundSchema` instead. */
  export const inboundSchema = CreateRule$inboundSchema;
  /** @deprecated use `CreateRule$outboundSchema` instead. */
  export const outboundSchema = CreateRule$outboundSchema;
  /** @deprecated use `CreateRule$Outbound` instead. */
  export type Outbound = CreateRule$Outbound;
}
