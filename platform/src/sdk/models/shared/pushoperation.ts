/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    PropertieDataType,
    PropertieDataType$inboundSchema,
    PropertieDataType$outboundSchema,
} from "./propertiedatatype.js";
import {
    PushOperationChange,
    PushOperationChange$inboundSchema,
    PushOperationChange$Outbound,
    PushOperationChange$outboundSchema,
} from "./pushoperationchange.js";
import {
    PushOperationStatus,
    PushOperationStatus$inboundSchema,
    PushOperationStatus$outboundSchema,
} from "./pushoperationstatus.js";
import {
    Validation,
    Validation$inboundSchema,
    Validation$Outbound,
    Validation$outboundSchema,
} from "./validation.js";
import * as z from "zod";

export type PushOperation = {
    /**
     * Contains a single entry that communicates which record has changed and the manner in which it changed.
     */
    changes?: Array<PushOperationChange> | null | undefined;
    /**
     * Available data types
     */
    dataType?: PropertieDataType | undefined;
    /**
     * Unique identifier for your SMB in Codat.
     */
    companyId: string;
    /**
     * A unique identifier generated by Codat to represent this single push operation. This identifier can be used to track the status of the push, and should be persisted.
     */
    pushOperationKey: string;
    /**
     * Unique identifier for a company's data connection.
     */
    dataConnectionKey: string;
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    requestedOnUtc: string;
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    completedOnUtc?: string | undefined;
    /**
     * Number of minutes the push operation must complete within before it times out.
     */
    timeoutInMinutes?: number | null | undefined;
    /**
     * Number of seconds the push operation must complete within before it times out.
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    timeoutInSeconds?: number | null | undefined;
    /**
     * The current status of the push operation.
     */
    status: PushOperationStatus;
    /**
     * A message about the error.
     */
    errorMessage?: string | null | undefined;
    /**
     * A human-readable object describing validation decisions Codat has made when pushing data into the platform. If a push has failed because of validation errors, they will be detailed here.
     */
    validation?: Validation | undefined;
    /**
     * Push status code.
     */
    statusCode: number;
};

/** @internal */
export const PushOperation$inboundSchema: z.ZodType<PushOperation, z.ZodTypeDef, unknown> =
    z.object({
        changes: z.nullable(z.array(PushOperationChange$inboundSchema)).optional(),
        dataType: PropertieDataType$inboundSchema.optional(),
        companyId: z.string(),
        pushOperationKey: z.string(),
        dataConnectionKey: z.string(),
        requestedOnUtc: z.string(),
        completedOnUtc: z.string().optional(),
        timeoutInMinutes: z.nullable(z.number().int()).optional(),
        timeoutInSeconds: z.nullable(z.number().int()).optional(),
        status: PushOperationStatus$inboundSchema,
        errorMessage: z.nullable(z.string()).optional(),
        validation: Validation$inboundSchema.optional(),
        statusCode: z.number().int(),
    });

/** @internal */
export type PushOperation$Outbound = {
    changes?: Array<PushOperationChange$Outbound> | null | undefined;
    dataType?: string | undefined;
    companyId: string;
    pushOperationKey: string;
    dataConnectionKey: string;
    requestedOnUtc: string;
    completedOnUtc?: string | undefined;
    timeoutInMinutes?: number | null | undefined;
    timeoutInSeconds?: number | null | undefined;
    status: string;
    errorMessage?: string | null | undefined;
    validation?: Validation$Outbound | undefined;
    statusCode: number;
};

/** @internal */
export const PushOperation$outboundSchema: z.ZodType<
    PushOperation$Outbound,
    z.ZodTypeDef,
    PushOperation
> = z.object({
    changes: z.nullable(z.array(PushOperationChange$outboundSchema)).optional(),
    dataType: PropertieDataType$outboundSchema.optional(),
    companyId: z.string(),
    pushOperationKey: z.string(),
    dataConnectionKey: z.string(),
    requestedOnUtc: z.string(),
    completedOnUtc: z.string().optional(),
    timeoutInMinutes: z.nullable(z.number().int()).optional(),
    timeoutInSeconds: z.nullable(z.number().int()).optional(),
    status: PushOperationStatus$outboundSchema,
    errorMessage: z.nullable(z.string()).optional(),
    validation: Validation$outboundSchema.optional(),
    statusCode: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PushOperation$ {
    /** @deprecated use `PushOperation$inboundSchema` instead. */
    export const inboundSchema = PushOperation$inboundSchema;
    /** @deprecated use `PushOperation$outboundSchema` instead. */
    export const outboundSchema = PushOperation$outboundSchema;
    /** @deprecated use `PushOperation$Outbound` instead. */
    export type Outbound = PushOperation$Outbound;
}
