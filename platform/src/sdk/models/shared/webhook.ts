/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    WebhookNotifier,
    WebhookNotifier$inboundSchema,
    WebhookNotifier$Outbound,
    WebhookNotifier$outboundSchema,
} from "./webhooknotifier.js";
import * as z from "zod";

/**
 * Configuration to provide an event notification to a URL or list of email addresses based on the given type or condition.
 */
export type Webhook = {
    /**
     * Unique identifier for the configured notification.
     */
    id?: string | undefined;
    /**
     * The type of webhook.
     */
    type: string;
    /**
     * Unique identifier for your SMB in Codat.
     */
    companyId?: string | undefined;
    notifiers: WebhookNotifier;
};

/** @internal */
export const Webhook$inboundSchema: z.ZodType<Webhook, z.ZodTypeDef, unknown> = z.object({
    id: z.string().optional(),
    type: z.string(),
    companyId: z.string().optional(),
    notifiers: WebhookNotifier$inboundSchema,
});

/** @internal */
export type Webhook$Outbound = {
    id?: string | undefined;
    type: string;
    companyId?: string | undefined;
    notifiers: WebhookNotifier$Outbound;
};

/** @internal */
export const Webhook$outboundSchema: z.ZodType<Webhook$Outbound, z.ZodTypeDef, Webhook> = z.object({
    id: z.string().optional(),
    type: z.string(),
    companyId: z.string().optional(),
    notifiers: WebhookNotifier$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Webhook$ {
    /** @deprecated use `Webhook$inboundSchema` instead. */
    export const inboundSchema = Webhook$inboundSchema;
    /** @deprecated use `Webhook$outboundSchema` instead. */
    export const outboundSchema = Webhook$outboundSchema;
    /** @deprecated use `Webhook$Outbound` instead. */
    export type Outbound = Webhook$Outbound;
}
