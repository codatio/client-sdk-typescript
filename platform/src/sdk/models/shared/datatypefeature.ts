/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    PropertieDataType,
    PropertieDataType$inboundSchema,
    PropertieDataType$outboundSchema,
} from "./propertiedatatype.js";
import {
    SupportedFeature,
    SupportedFeature$inboundSchema,
    SupportedFeature$Outbound,
    SupportedFeature$outboundSchema,
} from "./supportedfeature.js";
import * as z from "zod";

/**
 * Describes support for a given datatype and associated operations
 */
export type DataTypeFeature = {
    /**
     * Available data types
     */
    dataType?: PropertieDataType | undefined;
    supportedFeatures: Array<SupportedFeature>;
};

/** @internal */
export const DataTypeFeature$inboundSchema: z.ZodType<DataTypeFeature, z.ZodTypeDef, unknown> =
    z.object({
        dataType: PropertieDataType$inboundSchema.optional(),
        supportedFeatures: z.array(SupportedFeature$inboundSchema),
    });

/** @internal */
export type DataTypeFeature$Outbound = {
    dataType?: string | undefined;
    supportedFeatures: Array<SupportedFeature$Outbound>;
};

/** @internal */
export const DataTypeFeature$outboundSchema: z.ZodType<
    DataTypeFeature$Outbound,
    z.ZodTypeDef,
    DataTypeFeature
> = z.object({
    dataType: PropertieDataType$outboundSchema.optional(),
    supportedFeatures: z.array(SupportedFeature$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DataTypeFeature$ {
    /** @deprecated use `DataTypeFeature$inboundSchema` instead. */
    export const inboundSchema = DataTypeFeature$inboundSchema;
    /** @deprecated use `DataTypeFeature$outboundSchema` instead. */
    export const outboundSchema = DataTypeFeature$outboundSchema;
    /** @deprecated use `DataTypeFeature$Outbound` instead. */
    export type Outbound = DataTypeFeature$Outbound;
}
