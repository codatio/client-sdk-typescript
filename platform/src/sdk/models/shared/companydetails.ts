/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * A collection of user-defined key-value pairs that store custom metadata against the company.
 */
export type CompanyDetailsTags = {};

export type CompanyDetails = {
  /**
   * Unique identifier for your SMB in Codat.
   */
  id: string;
  /**
   * The name of the company
   */
  name: string;
  /**
   * Additional information about the company. This can be used to store foreign IDs, references, etc.
   */
  description?: string | undefined;
  /**
   * The `redirect` [Link URL](https://docs.codat.io/auth-flow/authorize-hosted-link) enabling the customer to start their auth flow journey for the company.
   */
  redirect: string;
  /**
   * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
   *
   * @remarks
   *
   * ```
   * 2020-10-08T22:40:50Z
   * 2021-01-01T00:00:00
   * ```
   *
   * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
   *
   * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
   * - Unqualified local time: `2021-11-15T01:00:00`
   * - UTC time offsets: `2021-11-15T01:00:00-05:00`
   *
   * > Time zones
   * >
   * > Not all dates from Codat will contain information about time zones.
   * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
   */
  lastSync?: string | undefined;
  /**
   * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
   *
   * @remarks
   *
   * ```
   * 2020-10-08T22:40:50Z
   * 2021-01-01T00:00:00
   * ```
   *
   * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
   *
   * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
   * - Unqualified local time: `2021-11-15T01:00:00`
   * - UTC time offsets: `2021-11-15T01:00:00-05:00`
   *
   * > Time zones
   * >
   * > Not all dates from Codat will contain information about time zones.
   * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
   */
  created?: string | undefined;
  /**
   * Name of user that created the company in Codat.
   */
  createdByUserName?: string | null | undefined;
  /**
   * A collection of user-defined key-value pairs that store custom metadata against the company.
   */
  tags?: CompanyDetailsTags | undefined;
};

/** @internal */
export const CompanyDetailsTags$inboundSchema: z.ZodType<
  CompanyDetailsTags,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CompanyDetailsTags$Outbound = {};

/** @internal */
export const CompanyDetailsTags$outboundSchema: z.ZodType<
  CompanyDetailsTags$Outbound,
  z.ZodTypeDef,
  CompanyDetailsTags
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompanyDetailsTags$ {
  /** @deprecated use `CompanyDetailsTags$inboundSchema` instead. */
  export const inboundSchema = CompanyDetailsTags$inboundSchema;
  /** @deprecated use `CompanyDetailsTags$outboundSchema` instead. */
  export const outboundSchema = CompanyDetailsTags$outboundSchema;
  /** @deprecated use `CompanyDetailsTags$Outbound` instead. */
  export type Outbound = CompanyDetailsTags$Outbound;
}

/** @internal */
export const CompanyDetails$inboundSchema: z.ZodType<
  CompanyDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string().optional(),
  redirect: z.string(),
  lastSync: z.string().optional(),
  created: z.string().optional(),
  createdByUserName: z.nullable(z.string()).optional(),
  tags: z.lazy(() => CompanyDetailsTags$inboundSchema).optional(),
});

/** @internal */
export type CompanyDetails$Outbound = {
  id: string;
  name: string;
  description?: string | undefined;
  redirect: string;
  lastSync?: string | undefined;
  created?: string | undefined;
  createdByUserName?: string | null | undefined;
  tags?: CompanyDetailsTags$Outbound | undefined;
};

/** @internal */
export const CompanyDetails$outboundSchema: z.ZodType<
  CompanyDetails$Outbound,
  z.ZodTypeDef,
  CompanyDetails
> = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string().optional(),
  redirect: z.string(),
  lastSync: z.string().optional(),
  created: z.string().optional(),
  createdByUserName: z.nullable(z.string()).optional(),
  tags: z.lazy(() => CompanyDetailsTags$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompanyDetails$ {
  /** @deprecated use `CompanyDetails$inboundSchema` instead. */
  export const inboundSchema = CompanyDetails$inboundSchema;
  /** @deprecated use `CompanyDetails$outboundSchema` instead. */
  export const outboundSchema = CompanyDetails$outboundSchema;
  /** @deprecated use `CompanyDetails$Outbound` instead. */
  export type Outbound = CompanyDetails$Outbound;
}
