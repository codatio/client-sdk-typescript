/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Details about the newly created API key.
 */
export type CreateApiKey = {
  /**
   * A meaningful name assigned to the API key.
   */
  name?: string | null | undefined;
};

/** @internal */
export const CreateApiKey$inboundSchema: z.ZodType<
  CreateApiKey,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
});

/** @internal */
export type CreateApiKey$Outbound = {
  name?: string | null | undefined;
};

/** @internal */
export const CreateApiKey$outboundSchema: z.ZodType<
  CreateApiKey$Outbound,
  z.ZodTypeDef,
  CreateApiKey
> = z.object({
  name: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateApiKey$ {
  /** @deprecated use `CreateApiKey$inboundSchema` instead. */
  export const inboundSchema = CreateApiKey$inboundSchema;
  /** @deprecated use `CreateApiKey$outboundSchema` instead. */
  export const outboundSchema = CreateApiKey$outboundSchema;
  /** @deprecated use `CreateApiKey$Outbound` instead. */
  export type Outbound = CreateApiKey$Outbound;
}

export function createApiKeyToJSON(createApiKey: CreateApiKey): string {
  return JSON.stringify(CreateApiKey$outboundSchema.parse(createApiKey));
}

export function createApiKeyFromJSON(
  jsonString: string,
): SafeParseResult<CreateApiKey, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateApiKey$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateApiKey' from JSON`,
  );
}
