/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PropertieDataType,
  PropertieDataType$inboundSchema,
  PropertieDataType$outboundSchema,
} from "./propertiedatatype.js";

export type PushOperationTimedOutWebhookData = {
  /**
   * Available data types
   */
  dataType?: PropertieDataType | undefined;
  /**
   * A unique identifier generated by Codat to represent this single push operation. This identifier can be used to track the status of the push, and should be persisted.
   */
  pushOperationKey?: string | undefined;
  /**
   * A unique identifier generated by Codat to represent this single push operation. This identifier can be used to track the status of the push, and should be persisted.
   */
  pushOperationGuid?: string | undefined;
};

/** @internal */
export const PushOperationTimedOutWebhookData$inboundSchema: z.ZodType<
  PushOperationTimedOutWebhookData,
  z.ZodTypeDef,
  unknown
> = z.object({
  dataType: PropertieDataType$inboundSchema.optional(),
  pushOperationKey: z.string().optional(),
  pushOperationGuid: z.string().optional(),
});

/** @internal */
export type PushOperationTimedOutWebhookData$Outbound = {
  dataType?: string | undefined;
  pushOperationKey?: string | undefined;
  pushOperationGuid?: string | undefined;
};

/** @internal */
export const PushOperationTimedOutWebhookData$outboundSchema: z.ZodType<
  PushOperationTimedOutWebhookData$Outbound,
  z.ZodTypeDef,
  PushOperationTimedOutWebhookData
> = z.object({
  dataType: PropertieDataType$outboundSchema.optional(),
  pushOperationKey: z.string().optional(),
  pushOperationGuid: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PushOperationTimedOutWebhookData$ {
  /** @deprecated use `PushOperationTimedOutWebhookData$inboundSchema` instead. */
  export const inboundSchema = PushOperationTimedOutWebhookData$inboundSchema;
  /** @deprecated use `PushOperationTimedOutWebhookData$outboundSchema` instead. */
  export const outboundSchema = PushOperationTimedOutWebhookData$outboundSchema;
  /** @deprecated use `PushOperationTimedOutWebhookData$Outbound` instead. */
  export type Outbound = PushOperationTimedOutWebhookData$Outbound;
}

export function pushOperationTimedOutWebhookDataToJSON(
  pushOperationTimedOutWebhookData: PushOperationTimedOutWebhookData,
): string {
  return JSON.stringify(
    PushOperationTimedOutWebhookData$outboundSchema.parse(
      pushOperationTimedOutWebhookData,
    ),
  );
}

export function pushOperationTimedOutWebhookDataFromJSON(
  jsonString: string,
): SafeParseResult<PushOperationTimedOutWebhookData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PushOperationTimedOutWebhookData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PushOperationTimedOutWebhookData' from JSON`,
  );
}
