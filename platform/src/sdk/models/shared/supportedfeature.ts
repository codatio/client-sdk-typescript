/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    FeatureState,
    FeatureState$inboundSchema,
    FeatureState$outboundSchema,
} from "./featurestate.js";
import {
    FeatureType,
    FeatureType$inboundSchema,
    FeatureType$outboundSchema,
} from "./featuretype.js";
import * as z from "zod";

export type SupportedFeature = {
    /**
     * The type of feature.
     */
    featureType: FeatureType;
    /**
     * The current release state of the feature.
     */
    featureState: FeatureState;
};

/** @internal */
export const SupportedFeature$inboundSchema: z.ZodType<SupportedFeature, z.ZodTypeDef, unknown> =
    z.object({
        featureType: FeatureType$inboundSchema,
        featureState: FeatureState$inboundSchema,
    });

/** @internal */
export type SupportedFeature$Outbound = {
    featureType: string;
    featureState: string;
};

/** @internal */
export const SupportedFeature$outboundSchema: z.ZodType<
    SupportedFeature$Outbound,
    z.ZodTypeDef,
    SupportedFeature
> = z.object({
    featureType: FeatureType$outboundSchema,
    featureState: FeatureState$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SupportedFeature$ {
    /** @deprecated use `SupportedFeature$inboundSchema` instead. */
    export const inboundSchema = SupportedFeature$inboundSchema;
    /** @deprecated use `SupportedFeature$outboundSchema` instead. */
    export const outboundSchema = SupportedFeature$outboundSchema;
    /** @deprecated use `SupportedFeature$Outbound` instead. */
    export type Outbound = SupportedFeature$Outbound;
}
