/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Details of the access token provisioned for a company.
 */
export type CompanyAccessToken = {
  /**
   * The number of seconds until the access token expires.
   */
  expiresIn: number;
  /**
   * The access token for the company.
   */
  accessToken: string;
  /**
   * The type of token.
   */
  tokenType: string;
};

/** @internal */
export const CompanyAccessToken$inboundSchema: z.ZodType<
  CompanyAccessToken,
  z.ZodTypeDef,
  unknown
> = z.object({
  expiresIn: z.number().int(),
  accessToken: z.string(),
  tokenType: z.string(),
});

/** @internal */
export type CompanyAccessToken$Outbound = {
  expiresIn: number;
  accessToken: string;
  tokenType: string;
};

/** @internal */
export const CompanyAccessToken$outboundSchema: z.ZodType<
  CompanyAccessToken$Outbound,
  z.ZodTypeDef,
  CompanyAccessToken
> = z.object({
  expiresIn: z.number().int(),
  accessToken: z.string(),
  tokenType: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompanyAccessToken$ {
  /** @deprecated use `CompanyAccessToken$inboundSchema` instead. */
  export const inboundSchema = CompanyAccessToken$inboundSchema;
  /** @deprecated use `CompanyAccessToken$outboundSchema` instead. */
  export const outboundSchema = CompanyAccessToken$outboundSchema;
  /** @deprecated use `CompanyAccessToken$Outbound` instead. */
  export type Outbound = CompanyAccessToken$Outbound;
}

export function companyAccessTokenToJSON(
  companyAccessToken: CompanyAccessToken,
): string {
  return JSON.stringify(
    CompanyAccessToken$outboundSchema.parse(companyAccessToken),
  );
}

export function companyAccessTokenFromJSON(
  jsonString: string,
): SafeParseResult<CompanyAccessToken, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompanyAccessToken$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompanyAccessToken' from JSON`,
  );
}
