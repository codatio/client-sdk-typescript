/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * A container you can use to organize companies together according to a shared characteristic of your choice.
 */
export type Group = {
    /**
     * Unique identifier for the group.
     */
    id?: string | undefined;
    /**
     * Descriptive name of the group.
     */
    name?: string | undefined;
};

/** @internal */
export const Group$inboundSchema: z.ZodType<Group, z.ZodTypeDef, unknown> = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
});

/** @internal */
export type Group$Outbound = {
    id?: string | undefined;
    name?: string | undefined;
};

/** @internal */
export const Group$outboundSchema: z.ZodType<Group$Outbound, z.ZodTypeDef, Group> = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Group$ {
    /** @deprecated use `Group$inboundSchema` instead. */
    export const inboundSchema = Group$inboundSchema;
    /** @deprecated use `Group$outboundSchema` instead. */
    export const outboundSchema = Group$outboundSchema;
    /** @deprecated use `Group$Outbound` instead. */
    export type Outbound = Group$Outbound;
}
