/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  DataConnectionStatus,
  DataConnectionStatus$inboundSchema,
  DataConnectionStatus$outboundSchema,
} from "./dataconnectionstatus.js";

export type ConnectionStatusChangedWebhookData = {
  /**
   * Unique identifier for a company's data connection.
   */
  dataConnectionId?: string | undefined;
  /**
   * The current authorization status of the data connection.
   */
  newStatus?: DataConnectionStatus | undefined;
  /**
   * The current authorization status of the data connection.
   */
  oldStatus?: DataConnectionStatus | undefined;
  /**
   * A unique 4-letter key to represent a platform in each integration. View [accounting](https://docs.codat.io/integrations/accounting/overview#platform-keys), [banking](https://docs.codat.io/integrations/banking/overview#platform-keys), and [commerce](https://docs.codat.io/integrations/commerce/overview#platform-keys) platform keys.
   */
  platformKey?: string | undefined;
};

/** @internal */
export const ConnectionStatusChangedWebhookData$inboundSchema: z.ZodType<
  ConnectionStatusChangedWebhookData,
  z.ZodTypeDef,
  unknown
> = z.object({
  dataConnectionId: z.string().optional(),
  newStatus: DataConnectionStatus$inboundSchema.optional(),
  oldStatus: DataConnectionStatus$inboundSchema.optional(),
  platformKey: z.string().optional(),
});

/** @internal */
export type ConnectionStatusChangedWebhookData$Outbound = {
  dataConnectionId?: string | undefined;
  newStatus?: string | undefined;
  oldStatus?: string | undefined;
  platformKey?: string | undefined;
};

/** @internal */
export const ConnectionStatusChangedWebhookData$outboundSchema: z.ZodType<
  ConnectionStatusChangedWebhookData$Outbound,
  z.ZodTypeDef,
  ConnectionStatusChangedWebhookData
> = z.object({
  dataConnectionId: z.string().optional(),
  newStatus: DataConnectionStatus$outboundSchema.optional(),
  oldStatus: DataConnectionStatus$outboundSchema.optional(),
  platformKey: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConnectionStatusChangedWebhookData$ {
  /** @deprecated use `ConnectionStatusChangedWebhookData$inboundSchema` instead. */
  export const inboundSchema = ConnectionStatusChangedWebhookData$inboundSchema;
  /** @deprecated use `ConnectionStatusChangedWebhookData$outboundSchema` instead. */
  export const outboundSchema =
    ConnectionStatusChangedWebhookData$outboundSchema;
  /** @deprecated use `ConnectionStatusChangedWebhookData$Outbound` instead. */
  export type Outbound = ConnectionStatusChangedWebhookData$Outbound;
}
