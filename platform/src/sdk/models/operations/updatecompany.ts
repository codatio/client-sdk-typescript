/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type UpdateCompanyRequest = {
  /**
   * Unique identifier for a company.
   */
  companyId: string;
  companyRequestBody?: shared.CompanyRequestBody | undefined;
};

/** @internal */
export const UpdateCompanyRequest$inboundSchema: z.ZodType<
  UpdateCompanyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  companyId: z.string(),
  CompanyRequestBody: shared.CompanyRequestBody$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "CompanyRequestBody": "companyRequestBody",
  });
});

/** @internal */
export type UpdateCompanyRequest$Outbound = {
  companyId: string;
  CompanyRequestBody?: shared.CompanyRequestBody$Outbound | undefined;
};

/** @internal */
export const UpdateCompanyRequest$outboundSchema: z.ZodType<
  UpdateCompanyRequest$Outbound,
  z.ZodTypeDef,
  UpdateCompanyRequest
> = z.object({
  companyId: z.string(),
  companyRequestBody: shared.CompanyRequestBody$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    companyRequestBody: "CompanyRequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCompanyRequest$ {
  /** @deprecated use `UpdateCompanyRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateCompanyRequest$inboundSchema;
  /** @deprecated use `UpdateCompanyRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateCompanyRequest$outboundSchema;
  /** @deprecated use `UpdateCompanyRequest$Outbound` instead. */
  export type Outbound = UpdateCompanyRequest$Outbound;
}

export function updateCompanyRequestToJSON(
  updateCompanyRequest: UpdateCompanyRequest,
): string {
  return JSON.stringify(
    UpdateCompanyRequest$outboundSchema.parse(updateCompanyRequest),
  );
}

export function updateCompanyRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCompanyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCompanyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCompanyRequest' from JSON`,
  );
}
