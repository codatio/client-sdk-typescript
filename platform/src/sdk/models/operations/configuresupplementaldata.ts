/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

/**
 * Data types that support supplemental data
 */
export const DataType = {
  ChartOfAccounts: "chartOfAccounts",
  Bills: "bills",
  Company: "company",
  CreditNotes: "creditNotes",
  Customers: "customers",
  Invoices: "invoices",
  Items: "items",
  JournalEntries: "journalEntries",
  Suppliers: "suppliers",
  TaxRates: "taxRates",
  CommerceCompanyInfo: "commerce-companyInfo",
  CommerceCustomers: "commerce-customers",
  CommerceDisputes: "commerce-disputes",
  CommerceLocations: "commerce-locations",
  CommerceOrders: "commerce-orders",
  CommercePayments: "commerce-payments",
  CommercePaymentMethods: "commerce-paymentMethods",
  CommerceProducts: "commerce-products",
  CommerceProductCategories: "commerce-productCategories",
  CommerceTaxComponents: "commerce-taxComponents",
  CommerceTransactions: "commerce-transactions",
} as const;
/**
 * Data types that support supplemental data
 */
export type DataType = ClosedEnum<typeof DataType>;

export type ConfigureSupplementalDataRequest = {
  /**
   * A unique 4-letter key to represent a platform in each integration.
   */
  platformKey: string;
  /**
   * Supported supplemental data data type.
   */
  dataType: DataType;
  /**
   * The configuration for the specified platform and data type.
   */
  supplementalDataConfiguration?:
    | shared.SupplementalDataConfiguration
    | undefined;
};

/** @internal */
export const DataType$inboundSchema: z.ZodNativeEnum<typeof DataType> = z
  .nativeEnum(DataType);

/** @internal */
export const DataType$outboundSchema: z.ZodNativeEnum<typeof DataType> =
  DataType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DataType$ {
  /** @deprecated use `DataType$inboundSchema` instead. */
  export const inboundSchema = DataType$inboundSchema;
  /** @deprecated use `DataType$outboundSchema` instead. */
  export const outboundSchema = DataType$outboundSchema;
}

/** @internal */
export const ConfigureSupplementalDataRequest$inboundSchema: z.ZodType<
  ConfigureSupplementalDataRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  platformKey: z.string(),
  dataType: DataType$inboundSchema,
  SupplementalDataConfiguration: shared
    .SupplementalDataConfiguration$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "SupplementalDataConfiguration": "supplementalDataConfiguration",
  });
});

/** @internal */
export type ConfigureSupplementalDataRequest$Outbound = {
  platformKey: string;
  dataType: string;
  SupplementalDataConfiguration?:
    | shared.SupplementalDataConfiguration$Outbound
    | undefined;
};

/** @internal */
export const ConfigureSupplementalDataRequest$outboundSchema: z.ZodType<
  ConfigureSupplementalDataRequest$Outbound,
  z.ZodTypeDef,
  ConfigureSupplementalDataRequest
> = z.object({
  platformKey: z.string(),
  dataType: DataType$outboundSchema,
  supplementalDataConfiguration: shared
    .SupplementalDataConfiguration$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    supplementalDataConfiguration: "SupplementalDataConfiguration",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConfigureSupplementalDataRequest$ {
  /** @deprecated use `ConfigureSupplementalDataRequest$inboundSchema` instead. */
  export const inboundSchema = ConfigureSupplementalDataRequest$inboundSchema;
  /** @deprecated use `ConfigureSupplementalDataRequest$outboundSchema` instead. */
  export const outboundSchema = ConfigureSupplementalDataRequest$outboundSchema;
  /** @deprecated use `ConfigureSupplementalDataRequest$Outbound` instead. */
  export type Outbound = ConfigureSupplementalDataRequest$Outbound;
}

export function configureSupplementalDataRequestToJSON(
  configureSupplementalDataRequest: ConfigureSupplementalDataRequest,
): string {
  return JSON.stringify(
    ConfigureSupplementalDataRequest$outboundSchema.parse(
      configureSupplementalDataRequest,
    ),
  );
}

export function configureSupplementalDataRequestFromJSON(
  jsonString: string,
): SafeParseResult<ConfigureSupplementalDataRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConfigureSupplementalDataRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConfigureSupplementalDataRequest' from JSON`,
  );
}
