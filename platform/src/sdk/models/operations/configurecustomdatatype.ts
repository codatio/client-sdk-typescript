/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type ConfigureCustomDataTypeRequest = {
  /**
   * A unique 4-letter key to represent a platform in each integration.
   */
  platformKey: string;
  /**
   * Unique identifier for a custom data type.
   */
  customDataIdentifier: string;
  /**
   * Custom data type configuration for the specified platform.
   */
  customDataTypeConfiguration?: shared.CustomDataTypeConfiguration | undefined;
};

/** @internal */
export const ConfigureCustomDataTypeRequest$inboundSchema: z.ZodType<
  ConfigureCustomDataTypeRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  platformKey: z.string(),
  customDataIdentifier: z.string(),
  CustomDataTypeConfiguration: shared.CustomDataTypeConfiguration$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "CustomDataTypeConfiguration": "customDataTypeConfiguration",
  });
});

/** @internal */
export type ConfigureCustomDataTypeRequest$Outbound = {
  platformKey: string;
  customDataIdentifier: string;
  CustomDataTypeConfiguration?:
    | shared.CustomDataTypeConfiguration$Outbound
    | undefined;
};

/** @internal */
export const ConfigureCustomDataTypeRequest$outboundSchema: z.ZodType<
  ConfigureCustomDataTypeRequest$Outbound,
  z.ZodTypeDef,
  ConfigureCustomDataTypeRequest
> = z.object({
  platformKey: z.string(),
  customDataIdentifier: z.string(),
  customDataTypeConfiguration: shared.CustomDataTypeConfiguration$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    customDataTypeConfiguration: "CustomDataTypeConfiguration",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConfigureCustomDataTypeRequest$ {
  /** @deprecated use `ConfigureCustomDataTypeRequest$inboundSchema` instead. */
  export const inboundSchema = ConfigureCustomDataTypeRequest$inboundSchema;
  /** @deprecated use `ConfigureCustomDataTypeRequest$outboundSchema` instead. */
  export const outboundSchema = ConfigureCustomDataTypeRequest$outboundSchema;
  /** @deprecated use `ConfigureCustomDataTypeRequest$Outbound` instead. */
  export type Outbound = ConfigureCustomDataTypeRequest$Outbound;
}

export function configureCustomDataTypeRequestToJSON(
  configureCustomDataTypeRequest: ConfigureCustomDataTypeRequest,
): string {
  return JSON.stringify(
    ConfigureCustomDataTypeRequest$outboundSchema.parse(
      configureCustomDataTypeRequest,
    ),
  );
}

export function configureCustomDataTypeRequestFromJSON(
  jsonString: string,
): SafeParseResult<ConfigureCustomDataTypeRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConfigureCustomDataTypeRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConfigureCustomDataTypeRequest' from JSON`,
  );
}
