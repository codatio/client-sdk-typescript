/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetIntegrationRequest = {
  /**
   * A unique 4-letter key to represent a platform in each integration.
   */
  platformKey: string;
};

/** @internal */
export const GetIntegrationRequest$inboundSchema: z.ZodType<
  GetIntegrationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  platformKey: z.string(),
});

/** @internal */
export type GetIntegrationRequest$Outbound = {
  platformKey: string;
};

/** @internal */
export const GetIntegrationRequest$outboundSchema: z.ZodType<
  GetIntegrationRequest$Outbound,
  z.ZodTypeDef,
  GetIntegrationRequest
> = z.object({
  platformKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetIntegrationRequest$ {
  /** @deprecated use `GetIntegrationRequest$inboundSchema` instead. */
  export const inboundSchema = GetIntegrationRequest$inboundSchema;
  /** @deprecated use `GetIntegrationRequest$outboundSchema` instead. */
  export const outboundSchema = GetIntegrationRequest$outboundSchema;
  /** @deprecated use `GetIntegrationRequest$Outbound` instead. */
  export type Outbound = GetIntegrationRequest$Outbound;
}

export function getIntegrationRequestToJSON(
  getIntegrationRequest: GetIntegrationRequest,
): string {
  return JSON.stringify(
    GetIntegrationRequest$outboundSchema.parse(getIntegrationRequest),
  );
}

export function getIntegrationRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetIntegrationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetIntegrationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetIntegrationRequest' from JSON`,
  );
}
