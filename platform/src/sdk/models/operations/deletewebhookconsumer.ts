/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteWebhookConsumerRequest = {
  /**
   * Unique identifier for the webhook consumer.
   */
  webhookId: string;
};

/** @internal */
export const DeleteWebhookConsumerRequest$inboundSchema: z.ZodType<
  DeleteWebhookConsumerRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  webhookId: z.string(),
});

/** @internal */
export type DeleteWebhookConsumerRequest$Outbound = {
  webhookId: string;
};

/** @internal */
export const DeleteWebhookConsumerRequest$outboundSchema: z.ZodType<
  DeleteWebhookConsumerRequest$Outbound,
  z.ZodTypeDef,
  DeleteWebhookConsumerRequest
> = z.object({
  webhookId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteWebhookConsumerRequest$ {
  /** @deprecated use `DeleteWebhookConsumerRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteWebhookConsumerRequest$inboundSchema;
  /** @deprecated use `DeleteWebhookConsumerRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteWebhookConsumerRequest$outboundSchema;
  /** @deprecated use `DeleteWebhookConsumerRequest$Outbound` instead. */
  export type Outbound = DeleteWebhookConsumerRequest$Outbound;
}

export function deleteWebhookConsumerRequestToJSON(
  deleteWebhookConsumerRequest: DeleteWebhookConsumerRequest,
): string {
  return JSON.stringify(
    DeleteWebhookConsumerRequest$outboundSchema.parse(
      deleteWebhookConsumerRequest,
    ),
  );
}

export function deleteWebhookConsumerRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteWebhookConsumerRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteWebhookConsumerRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteWebhookConsumerRequest' from JSON`,
  );
}
