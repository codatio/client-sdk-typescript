/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetCustomDataTypeConfigurationRequest = {
  /**
   * A unique 4-letter key to represent a platform in each integration.
   */
  platformKey: string;
  /**
   * Unique identifier for a custom data type.
   */
  customDataIdentifier: string;
};

/** @internal */
export const GetCustomDataTypeConfigurationRequest$inboundSchema: z.ZodType<
  GetCustomDataTypeConfigurationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  platformKey: z.string(),
  customDataIdentifier: z.string(),
});

/** @internal */
export type GetCustomDataTypeConfigurationRequest$Outbound = {
  platformKey: string;
  customDataIdentifier: string;
};

/** @internal */
export const GetCustomDataTypeConfigurationRequest$outboundSchema: z.ZodType<
  GetCustomDataTypeConfigurationRequest$Outbound,
  z.ZodTypeDef,
  GetCustomDataTypeConfigurationRequest
> = z.object({
  platformKey: z.string(),
  customDataIdentifier: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCustomDataTypeConfigurationRequest$ {
  /** @deprecated use `GetCustomDataTypeConfigurationRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetCustomDataTypeConfigurationRequest$inboundSchema;
  /** @deprecated use `GetCustomDataTypeConfigurationRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetCustomDataTypeConfigurationRequest$outboundSchema;
  /** @deprecated use `GetCustomDataTypeConfigurationRequest$Outbound` instead. */
  export type Outbound = GetCustomDataTypeConfigurationRequest$Outbound;
}

export function getCustomDataTypeConfigurationRequestToJSON(
  getCustomDataTypeConfigurationRequest: GetCustomDataTypeConfigurationRequest,
): string {
  return JSON.stringify(
    GetCustomDataTypeConfigurationRequest$outboundSchema.parse(
      getCustomDataTypeConfigurationRequest,
    ),
  );
}

export function getCustomDataTypeConfigurationRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetCustomDataTypeConfigurationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetCustomDataTypeConfigurationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCustomDataTypeConfigurationRequest' from JSON`,
  );
}
