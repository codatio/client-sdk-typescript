/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetConnectionManagementAccessTokenRequest = {
  /**
   * Unique identifier for a company.
   */
  companyId: string;
};

/** @internal */
export const GetConnectionManagementAccessTokenRequest$inboundSchema: z.ZodType<
  GetConnectionManagementAccessTokenRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  companyId: z.string(),
});

/** @internal */
export type GetConnectionManagementAccessTokenRequest$Outbound = {
  companyId: string;
};

/** @internal */
export const GetConnectionManagementAccessTokenRequest$outboundSchema:
  z.ZodType<
    GetConnectionManagementAccessTokenRequest$Outbound,
    z.ZodTypeDef,
    GetConnectionManagementAccessTokenRequest
  > = z.object({
    companyId: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConnectionManagementAccessTokenRequest$ {
  /** @deprecated use `GetConnectionManagementAccessTokenRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetConnectionManagementAccessTokenRequest$inboundSchema;
  /** @deprecated use `GetConnectionManagementAccessTokenRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetConnectionManagementAccessTokenRequest$outboundSchema;
  /** @deprecated use `GetConnectionManagementAccessTokenRequest$Outbound` instead. */
  export type Outbound = GetConnectionManagementAccessTokenRequest$Outbound;
}

export function getConnectionManagementAccessTokenRequestToJSON(
  getConnectionManagementAccessTokenRequest:
    GetConnectionManagementAccessTokenRequest,
): string {
  return JSON.stringify(
    GetConnectionManagementAccessTokenRequest$outboundSchema.parse(
      getConnectionManagementAccessTokenRequest,
    ),
  );
}

export function getConnectionManagementAccessTokenRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetConnectionManagementAccessTokenRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetConnectionManagementAccessTokenRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetConnectionManagementAccessTokenRequest' from JSON`,
  );
}
