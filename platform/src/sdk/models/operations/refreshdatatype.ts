/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type RefreshDataTypeRequest = {
  /**
   * Unique identifier for a company.
   */
  companyId: string;
  /**
   * The key of a Codat data type.
   */
  dataType: shared.DataType;
  /**
   * Optionally, provide a data connection id to only queue pull operations on that connection.
   */
  connectionId?: string | undefined;
};

/** @internal */
export const RefreshDataTypeRequest$inboundSchema: z.ZodType<
  RefreshDataTypeRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  companyId: z.string(),
  dataType: shared.DataType$inboundSchema,
  connectionId: z.string().optional(),
});

/** @internal */
export type RefreshDataTypeRequest$Outbound = {
  companyId: string;
  dataType: string;
  connectionId?: string | undefined;
};

/** @internal */
export const RefreshDataTypeRequest$outboundSchema: z.ZodType<
  RefreshDataTypeRequest$Outbound,
  z.ZodTypeDef,
  RefreshDataTypeRequest
> = z.object({
  companyId: z.string(),
  dataType: shared.DataType$outboundSchema,
  connectionId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefreshDataTypeRequest$ {
  /** @deprecated use `RefreshDataTypeRequest$inboundSchema` instead. */
  export const inboundSchema = RefreshDataTypeRequest$inboundSchema;
  /** @deprecated use `RefreshDataTypeRequest$outboundSchema` instead. */
  export const outboundSchema = RefreshDataTypeRequest$outboundSchema;
  /** @deprecated use `RefreshDataTypeRequest$Outbound` instead. */
  export type Outbound = RefreshDataTypeRequest$Outbound;
}

export function refreshDataTypeRequestToJSON(
  refreshDataTypeRequest: RefreshDataTypeRequest,
): string {
  return JSON.stringify(
    RefreshDataTypeRequest$outboundSchema.parse(refreshDataTypeRequest),
  );
}

export function refreshDataTypeRequestFromJSON(
  jsonString: string,
): SafeParseResult<RefreshDataTypeRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RefreshDataTypeRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RefreshDataTypeRequest' from JSON`,
  );
}
