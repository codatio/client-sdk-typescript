/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListCustomDataTypeRecordsRequest = {
  /**
   * Unique identifier for a company.
   */
  companyId: string;
  /**
   * Unique identifier for a connection.
   */
  connectionId: string;
  /**
   * Unique identifier for a custom data type.
   */
  customDataIdentifier: string;
  /**
   * Page number. [Read more](https://docs.codat.io/using-the-api/paging).
   */
  page?: number | undefined;
  /**
   * Number of records to return in a page. [Read more](https://docs.codat.io/using-the-api/paging).
   */
  pageSize?: number | undefined;
};

/** @internal */
export const ListCustomDataTypeRecordsRequest$inboundSchema: z.ZodType<
  ListCustomDataTypeRecordsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  companyId: z.string(),
  connectionId: z.string(),
  customDataIdentifier: z.string(),
  page: z.number().int().default(1),
  pageSize: z.number().int().default(100),
});

/** @internal */
export type ListCustomDataTypeRecordsRequest$Outbound = {
  companyId: string;
  connectionId: string;
  customDataIdentifier: string;
  page: number;
  pageSize: number;
};

/** @internal */
export const ListCustomDataTypeRecordsRequest$outboundSchema: z.ZodType<
  ListCustomDataTypeRecordsRequest$Outbound,
  z.ZodTypeDef,
  ListCustomDataTypeRecordsRequest
> = z.object({
  companyId: z.string(),
  connectionId: z.string(),
  customDataIdentifier: z.string(),
  page: z.number().int().default(1),
  pageSize: z.number().int().default(100),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCustomDataTypeRecordsRequest$ {
  /** @deprecated use `ListCustomDataTypeRecordsRequest$inboundSchema` instead. */
  export const inboundSchema = ListCustomDataTypeRecordsRequest$inboundSchema;
  /** @deprecated use `ListCustomDataTypeRecordsRequest$outboundSchema` instead. */
  export const outboundSchema = ListCustomDataTypeRecordsRequest$outboundSchema;
  /** @deprecated use `ListCustomDataTypeRecordsRequest$Outbound` instead. */
  export type Outbound = ListCustomDataTypeRecordsRequest$Outbound;
}

export function listCustomDataTypeRecordsRequestToJSON(
  listCustomDataTypeRecordsRequest: ListCustomDataTypeRecordsRequest,
): string {
  return JSON.stringify(
    ListCustomDataTypeRecordsRequest$outboundSchema.parse(
      listCustomDataTypeRecordsRequest,
    ),
  );
}

export function listCustomDataTypeRecordsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListCustomDataTypeRecordsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCustomDataTypeRecordsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCustomDataTypeRecordsRequest' from JSON`,
  );
}
