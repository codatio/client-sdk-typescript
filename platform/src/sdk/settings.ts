/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { settingsCreateApiKey } from "../funcs/settingsCreateApiKey.js";
import { settingsDeleteApiKey } from "../funcs/settingsDeleteApiKey.js";
import { settingsGetProfile } from "../funcs/settingsGetProfile.js";
import { settingsGetSyncSettings } from "../funcs/settingsGetSyncSettings.js";
import { settingsListApiKeys } from "../funcs/settingsListApiKeys.js";
import { settingsUpdateProfile } from "../funcs/settingsUpdateProfile.js";
import { settingsUpdateSyncSettings } from "../funcs/settingsUpdateSyncSettings.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Settings extends ClientSDK {
  /**
   * Get profile
   *
   * @remarks
   * Fetch your Codat profile.
   */
  async getProfile(
    options?: RequestOptions,
  ): Promise<shared.Profile> {
    return unwrapAsync(settingsGetProfile(
      this,
      options,
    ));
  }

  /**
   * Update profile
   *
   * @remarks
   * Update your Codat profile
   */
  async updateProfile(
    request?: shared.Profile | undefined,
    options?: RequestOptions,
  ): Promise<shared.Profile> {
    return unwrapAsync(settingsUpdateProfile(
      this,
      request,
      options,
    ));
  }

  /**
   * Get sync settings
   *
   * @remarks
   * Retrieve the [sync settings](https://docs.codat.io/knowledge-base/advanced-sync-settings) for your client. This includes how often data types should be queued to be updated, and how much history should be fetched.
   */
  async getSyncSettings(
    options?: RequestOptions,
  ): Promise<shared.SyncSettings> {
    return unwrapAsync(settingsGetSyncSettings(
      this,
      options,
    ));
  }

  /**
   * Update all sync settings
   *
   * @remarks
   * Update sync settings for all data types.
   */
  async updateSyncSettings(
    request?: operations.UpdateProfileSyncSettingsRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(settingsUpdateSyncSettings(
      this,
      request,
      options,
    ));
  }

  /**
   * List API keys
   *
   * @remarks
   * Use the *List API keys* endpoint to return a list of all API keys that currently exist for your client. This includes keys created via the Portal UI or the *Create API keys* endpoint.
   *
   * [API keys](https://docs.codat.io/platform-api#/schemas/apiKeys) are tokens used to control access to the API. Include this token in the `Authorization` header parameter when making API calls, following the word "Basic" and a space with your API key.
   *
   * You can [read more](https://docs.codat.io/using-the-api/authentication) about authentication at Codat and managing API keys via the Portal UI or API.
   */
  async listApiKeys(
    options?: RequestOptions,
  ): Promise<shared.ApiKeys> {
    return unwrapAsync(settingsListApiKeys(
      this,
      options,
    ));
  }

  /**
   * Create API key
   *
   * @remarks
   * Use the *Create API keys* endpoint to generate a new API key for your client.
   *
   * [API keys](https://docs.codat.io/platform-api#/schemas/apiKeys) are tokens used to control access to the API. Include this token in the `Authorization` header parameter when making API calls, following the word "Basic" and a space with your API key.
   *
   * You can [read more](https://docs.codat.io/using-the-api/authentication) about authentication at Codat and managing API keys via the Portal UI or API.
   *
   * ### Tips and pitfalls
   *
   * * Your first API key is created for you. Access this key via [Codat's Portal](https://app.codat.io/developers/api-keys).
   * * If you require multiple API keys, perform multiple calls to the *Create API keys* endpoint.
   * * The number of API keys is limited to 10. If you have reached the maximum amount of keys, use the *Delete API key* endpoint to delete an unused key first.
   */
  async createApiKey(
    request?: shared.CreateApiKey | undefined,
    options?: RequestOptions,
  ): Promise<shared.ApiKeyDetails> {
    return unwrapAsync(settingsCreateApiKey(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete API key
   *
   * @remarks
   * Use the *Delete API keys* endpoint to delete an existing API key, providing its valid `id` as a parameter. Note that this operation is not reversible.
   *
   * [API keys](https://docs.codat.io/platform-api#/schemas/apiKeys) are tokens used to control access to the API. Include this token in the `Authorization` header parameter when making API calls, following the word "Basic" and a space with your API key.
   *
   * You can [read more](https://docs.codat.io/using-the-api/authentication) about authentication at Codat and managing API keys via the Portal UI or API.
   *
   * ### Tips and pitfalls
   *
   * * It is possible to delete the last remaining API key. If this happens, a new key can be created via the [API key management page](https://app.codat.io/developers/api-keys) of the Portal.
   * * It is possible to delete the API key used to authenticate the *Delete API key* request.
   */
  async deleteApiKey(
    request: operations.DeleteApiKeyRequest,
    options?: RequestOptions,
  ): Promise<shared.ErrorMessage> {
    return unwrapAsync(settingsDeleteApiKey(
      this,
      request,
      options,
    ));
  }
}
