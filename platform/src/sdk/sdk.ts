/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as shared from "../sdk/models/shared";
import { Companies } from "./companies";
import { ConnectionManagement } from "./connectionmanagement";
import { Connections } from "./connections";
import { CustomDataType } from "./customdatatype";
import { Groups } from "./groups";
import { Integrations } from "./integrations";
import { PushData } from "./pushdata";
import { RefreshData } from "./refreshdata";
import { Settings } from "./settings";
import { SupplementalData } from "./supplementaldata";
import { Webhooks } from "./webhooks";
import axios from "axios";
import { AxiosInstance } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = [
    /**
     * Production
     */
    "https://api.codat.io",
] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
    /**
     * The security details required to authenticate the SDK
     */
    security?: shared.Security | (() => Promise<shared.Security>);

    /**
     * Allows overriding the default axios client used by the SDK
     */
    defaultClient?: AxiosInstance;

    /**
     * Allows overriding the default server used by the SDK
     */
    serverIdx?: number;

    /**
     * Allows overriding the default server URL used by the SDK
     */
    serverURL?: string;
    /**
     * Allows overriding the default retry config used by the SDK
     */
    retryConfig?: utils.RetryConfig;
};

export class SDKConfiguration {
    defaultClient: AxiosInstance;
    security?: shared.Security | (() => Promise<shared.Security>);
    serverURL: string;
    serverDefaults: any;
    language = "typescript";
    openapiDocVersion = "3.0.0";
    sdkVersion = "2.5.0";
    genVersion = "2.314.0";
    userAgent = "speakeasy-sdk/typescript 2.5.0 2.314.0 3.0.0 @codat/platform";
    retryConfig?: utils.RetryConfig;
    public constructor(init?: Partial<SDKConfiguration>) {
        Object.assign(this, init);
    }
}

/**
 * Platform API: Platform API
 *
 * @remarks
 * An API for the common components of all of Codat's products.
 *
 * These end points cover creating and managing your companies, data connections, and integrations.
 *
 * [Read about the building blocks of Codat...](https://docs.codat.io/core-concepts/companies) | [See our OpenAPI spec](https://github.com/codatio/oas)
 *
 * ---
 * <!-- Start Codat Tags Table -->
 * ## Endpoints
 *
 * | Endpoints | Description |
 * | :- |:- |
 * | Companies | Create and manage your SMB users' companies. |
 * | Connections | Create new and manage existing data connections for a company. |
 * | Connection management | Configure connection management UI and retrieve access tokens for authentication. |
 * | Groups | Define and manage sets of companies based on a chosen characteristic. |
 * | Webhooks | Create and manage webhooks that listen to Codat's events. |
 * | Integrations | Get a list of integrations supported by Codat and their logos. |
 * | Refresh data | Initiate data refreshes, view pull status and history. |
 * | Settings | Manage company profile configuration, sync settings, and API keys. |
 * | Push data | Initiate and monitor Create, Update, and Delete operations. |
 * | Supplemental data | Configure and pull additional data you can include in Codat's standard data types. |
 * | Custom data type | Configure and pull additional data types that are not included in Codat's standardized data model. |
 * <!-- End Codat Tags Table -->
 */
export class CodatPlatform {
    /**
     * Manage company profile configuration, sync settings, and API keys.
     */
    public settings: Settings;
    /**
     * Create and manage your SMB users' companies.
     */
    public companies: Companies;
    /**
     * Configure connection management UI and retrieve access tokens for authentication.
     */
    public connectionManagement: ConnectionManagement;
    /**
     * Create new and manage existing data connections for a company.
     */
    public connections: Connections;
    /**
     * Configure and pull additional data types that are not included in Codat's standardized data model.
     */
    public customDataType: CustomDataType;
    /**
     * Initiate and monitor Create, Update, and Delete operations.
     */
    public pushData: PushData;
    /**
     * Initiate data refreshes, view pull status and history.
     */
    public refreshData: RefreshData;
    /**
     * Define and manage sets of companies based on a chosen characteristic.
     */
    public groups: Groups;
    /**
     * Get a list of integrations supported by Codat and their logos.
     */
    public integrations: Integrations;
    /**
     * Configure and pull additional data you can include in Codat's standard data types.
     */
    public supplementalData: SupplementalData;
    /**
     * Create and manage webhooks that listen to Codat's events.
     */
    public webhooks: Webhooks;

    private sdkConfiguration: SDKConfiguration;

    constructor(props?: SDKProps) {
        let serverURL = props?.serverURL;

        if (!serverURL) {
            const serverIdx = props?.serverIdx ?? 0;
            if (serverIdx < 0 || serverIdx >= ServerList.length) {
                throw new Error(`Invalid server index ${serverIdx}`);
            }
            serverURL = ServerList[serverIdx];
        }

        const defaultClient = props?.defaultClient ?? axios.create();
        this.sdkConfiguration = new SDKConfiguration({
            defaultClient: defaultClient,
            security: props?.security,
            serverURL: serverURL,
            retryConfig: props?.retryConfig,
        });

        this.settings = new Settings(this.sdkConfiguration);
        this.companies = new Companies(this.sdkConfiguration);
        this.connectionManagement = new ConnectionManagement(this.sdkConfiguration);
        this.connections = new Connections(this.sdkConfiguration);
        this.customDataType = new CustomDataType(this.sdkConfiguration);
        this.pushData = new PushData(this.sdkConfiguration);
        this.refreshData = new RefreshData(this.sdkConfiguration);
        this.groups = new Groups(this.sdkConfiguration);
        this.integrations = new Integrations(this.sdkConfiguration);
        this.supplementalData = new SupplementalData(this.sdkConfiguration);
        this.webhooks = new Webhooks(this.sdkConfiguration);
    }
}
