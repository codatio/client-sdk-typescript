/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks/hooks.js";
import { SDKOptions, serverURLFromOptions } from "../lib/config.js";
import { HTTPClient } from "../lib/http.js";
import { ClientSDK } from "../lib/sdks.js";
import { CompaniesSDK } from "./companiessdk.js";
import { ConnectionManagement } from "./connectionmanagement.js";
import { ConnectionsSDK } from "./connectionssdk.js";
import { CustomDataType } from "./customdatatype.js";
import { GroupsSDK } from "./groupssdk.js";
import { IntegrationsSDK } from "./integrationssdk.js";
import { PushData } from "./pushdata.js";
import { RefreshData } from "./refreshdata.js";
import { Settings } from "./settings.js";
import { SupplementalData } from "./supplementaldata.js";
import { WebhooksSDK } from "./webhookssdk.js";

export class CodatPlatform extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    private _companiesSDK?: CompaniesSDK;
    get companiesSDK(): CompaniesSDK {
        return (this._companiesSDK ??= new CompaniesSDK(this.options$));
    }

    private _connectionsSDK?: ConnectionsSDK;
    get connectionsSDK(): ConnectionsSDK {
        return (this._connectionsSDK ??= new ConnectionsSDK(this.options$));
    }

    private _connectionManagement?: ConnectionManagement;
    get connectionManagement(): ConnectionManagement {
        return (this._connectionManagement ??= new ConnectionManagement(this.options$));
    }

    private _refreshData?: RefreshData;
    get refreshData(): RefreshData {
        return (this._refreshData ??= new RefreshData(this.options$));
    }

    private _groupsSDK?: GroupsSDK;
    get groupsSDK(): GroupsSDK {
        return (this._groupsSDK ??= new GroupsSDK(this.options$));
    }

    private _webhooksSDK?: WebhooksSDK;
    get webhooksSDK(): WebhooksSDK {
        return (this._webhooksSDK ??= new WebhooksSDK(this.options$));
    }

    private _integrationsSDK?: IntegrationsSDK;
    get integrationsSDK(): IntegrationsSDK {
        return (this._integrationsSDK ??= new IntegrationsSDK(this.options$));
    }

    private _settings?: Settings;
    get settings(): Settings {
        return (this._settings ??= new Settings(this.options$));
    }

    private _pushData?: PushData;
    get pushData(): PushData {
        return (this._pushData ??= new PushData(this.options$));
    }

    private _supplementalData?: SupplementalData;
    get supplementalData(): SupplementalData {
        return (this._supplementalData ??= new SupplementalData(this.options$));
    }

    private _customDataType?: CustomDataType;
    get customDataType(): CustomDataType {
        return (this._customDataType ??= new CustomDataType(this.options$));
    }
}
