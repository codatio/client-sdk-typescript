/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { webhooksCreate } from "../funcs/webhooksCreate.js";
import { webhooksCreateConsumer } from "../funcs/webhooksCreateConsumer.js";
import { webhooksDeleteConsumer } from "../funcs/webhooksDeleteConsumer.js";
import { webhooksGet } from "../funcs/webhooksGet.js";
import { webhooksList } from "../funcs/webhooksList.js";
import { webhooksListConsumers } from "../funcs/webhooksListConsumers.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Webhooks extends ClientSDK {
  /**
   * List webhooks
   *
   * @remarks
   * List webhooks that you are subscribed to.
   *
   * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  async list(
    request?: operations.ListRulesRequest | undefined,
    options?: RequestOptions,
  ): Promise<shared.Webhooks> {
    return unwrapAsync(webhooksList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create webhook
   *
   * @remarks
   * Create a new webhook configuration
   *
   * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  async create(
    request?: shared.CreateRule | undefined,
    options?: RequestOptions,
  ): Promise<shared.Webhook> {
    return unwrapAsync(webhooksCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get webhook
   *
   * @remarks
   * Get a single webhook
   *
   * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  async get(
    request: operations.GetWebhookRequest,
    options?: RequestOptions,
  ): Promise<shared.Webhook> {
    return unwrapAsync(webhooksGet(
      this,
      request,
      options,
    ));
  }

  /**
   * List webhook consumers
   *
   * @remarks
   * Use the *List webhook consumers* endpoint to return a list of all webhook consumers that currently exist for your client.
   *
   * [Webhook consumer](https://docs.codat.io/platform-api#/schemas/WebhookConsumer) is an HTTP endpoint that you configure to subscribe to specific events. See our documentation for more details on [Codat's webhook service](https://docs.codat.io/using-the-api/webhooks/overview).
   */
  async listConsumers(
    options?: RequestOptions,
  ): Promise<shared.WebhookConsumers> {
    return unwrapAsync(webhooksListConsumers(
      this,
      options,
    ));
  }

  /**
   * Create webhook consumer
   *
   * @remarks
   * Use the *Create webhook consumer* endpoint to create a new webhook consumer that will listen to messages we send you.
   *
   * [Webhook consumer](https://docs.codat.io/platform-api#/schemas/WebhookConsumer) is an HTTP endpoint that you configure to subscribe to specific events. See our documentation for more details on [Codat's webhook service](https://docs.codat.io/using-the-api/webhooks/overview).
   *
   * ### Tips and traps
   * - The number of webhook consumers you can create is limited to 50. If you have reached the maximum number of consumers, use the [*Delete webhook consumer*](https://docs.codat.io/platform-api#/operations/delete-webhook-consumer) endpoint to delete an unused consumer first.
   */
  async createConsumer(
    request?: shared.WebhookConsumerPrototype | undefined,
    options?: RequestOptions,
  ): Promise<shared.WebhookConsumer> {
    return unwrapAsync(webhooksCreateConsumer(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete webhook consumer
   *
   * @remarks
   * Use the *Delete webhook consumer* endpoint to delete an existing webhoook consumer, providing its valid `id` as a parameter.
   *
   * [Webhook consumer](https://docs.codat.io/platform-api#/schemas/WebhookConsumer) is an HTTP endpoint that you configure to subscribe to specific events. See our documentation for more details on [Codat's webhook service](https://docs.codat.io/using-the-api/webhooks/overview).
   */
  async deleteConsumer(
    request: operations.DeleteWebhookConsumerRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(webhooksDeleteConsumer(
      this,
      request,
      options,
    ));
  }
}
