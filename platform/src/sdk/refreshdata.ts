/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { refreshDataAll } from "../funcs/refreshDataAll.js";
import { refreshDataByDataType } from "../funcs/refreshDataByDataType.js";
import { refreshDataGet } from "../funcs/refreshDataGet.js";
import { refreshDataGetPullOperation } from "../funcs/refreshDataGetPullOperation.js";
import { refreshDataListPullOperations } from "../funcs/refreshDataListPullOperations.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class RefreshData extends ClientSDK {
  /**
   * Refresh all data
   *
   * @remarks
   * Refreshes all data types with `fetch on first link` set to `true` for a given company.
   *
   * This is an asynchronous operation, and will bring updated data into Codat from the linked integration for you to view.
   *
   * [Read more](https://docs.codat.io/core-concepts/data-type-settings) about data type settings and `fetch on first link`.
   */
  async all(
    request: operations.RefreshCompanyDataRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(refreshDataAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Refresh data type
   *
   * @remarks
   * Refreshes a given data type for a given company.
   *
   * This is an asynchronous operation, and will bring updated data into Codat from the linked integration for you to view.
   */
  async byDataType(
    request: operations.RefreshDataTypeRequest,
    options?: RequestOptions,
  ): Promise<shared.PullOperation> {
    return unwrapAsync(refreshDataByDataType(
      this,
      request,
      options,
    ));
  }

  /**
   * Get data status
   *
   * @remarks
   * Get the state of each data type for a company
   */
  async get(
    request: operations.GetCompanyDataStatusRequest,
    options?: RequestOptions,
  ): Promise<shared.DataStatuses> {
    return unwrapAsync(refreshDataGet(
      this,
      request,
      options,
    ));
  }

  /**
   * List pull operations
   *
   * @remarks
   * Gets the pull operation history (datasets) for a given company.
   */
  async listPullOperations(
    request: operations.ListPullOperationsRequest,
    options?: RequestOptions,
  ): Promise<shared.PullOperations> {
    return unwrapAsync(refreshDataListPullOperations(
      this,
      request,
      options,
    ));
  }

  /**
   * Get pull operation
   *
   * @remarks
   * Retrieve information about a single dataset or pull operation.
   */
  async getPullOperation(
    request: operations.GetPullOperationRequest,
    options?: RequestOptions,
  ): Promise<shared.PullOperation> {
    return unwrapAsync(refreshDataGetPullOperation(
      this,
      request,
      options,
    ));
  }
}
