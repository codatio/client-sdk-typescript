/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Company, Company$ } from "./company";
import { CompanyRequestBody, CompanyRequestBody$ } from "./companyrequestbody";
import { ErrorMessage, ErrorMessage$ } from "./errormessage";
import * as z from "zod";

export type UpdateCompanyRequest = {
    companyRequestBody?: CompanyRequestBody | undefined;
    /**
     * Unique identifier for a company.
     */
    companyId: string;
};

export type UpdateCompanyResponse = ErrorMessage | Company;

/** @internal */
export namespace UpdateCompanyRequest$ {
    export const inboundSchema: z.ZodType<UpdateCompanyRequest, z.ZodTypeDef, unknown> = z
        .object({
            CompanyRequestBody: CompanyRequestBody$.inboundSchema.optional(),
            companyId: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.CompanyRequestBody === undefined
                    ? null
                    : { companyRequestBody: v.CompanyRequestBody }),
                companyId: v.companyId,
            };
        });

    export type Outbound = {
        CompanyRequestBody?: CompanyRequestBody$.Outbound | undefined;
        companyId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateCompanyRequest> = z
        .object({
            companyRequestBody: CompanyRequestBody$.outboundSchema.optional(),
            companyId: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.companyRequestBody === undefined
                    ? null
                    : { CompanyRequestBody: v.companyRequestBody }),
                companyId: v.companyId,
            };
        });
}

/** @internal */
export namespace UpdateCompanyResponse$ {
    export const inboundSchema: z.ZodType<UpdateCompanyResponse, z.ZodTypeDef, unknown> = z.union([
        ErrorMessage$.inboundSchema,
        Company$.inboundSchema,
    ]);

    export type Outbound = ErrorMessage$.Outbound | Company$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateCompanyResponse> = z.union(
        [ErrorMessage$.outboundSchema, Company$.outboundSchema]
    );
}
