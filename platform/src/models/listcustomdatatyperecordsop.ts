/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { CustomDataTypeRecords, CustomDataTypeRecords$ } from "./customdatatyperecords";
import { ErrorMessage, ErrorMessage$ } from "./errormessage";
import * as z from "zod";

export type ListCustomDataTypeRecordsRequest = {
    /**
     * Unique identifier for a company.
     */
    companyId: string;
    /**
     * Unique identifier for a connection.
     */
    connectionId: string;
    /**
     * Unique identifier for a custom data type.
     */
    customDataIdentifier: string;
    /**
     * Page number. [Read more](https://docs.codat.io/using-the-api/paging).
     */
    page?: number | undefined;
    /**
     * Number of records to return in a page. [Read more](https://docs.codat.io/using-the-api/paging).
     */
    pageSize?: number | undefined;
};

export type ListCustomDataTypeRecordsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * OK
     */
    customDataTypeRecords?: CustomDataTypeRecords | undefined;
    /**
     * The request made is not valid.
     */
    errorMessage?: ErrorMessage | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace ListCustomDataTypeRecordsRequest$ {
    export const inboundSchema: z.ZodType<ListCustomDataTypeRecordsRequest, z.ZodTypeDef, unknown> =
        z
            .object({
                companyId: z.string(),
                connectionId: z.string(),
                customDataIdentifier: z.string(),
                page: z.number().int().default(1),
                pageSize: z.number().int().default(100),
            })
            .transform((v) => {
                return {
                    companyId: v.companyId,
                    connectionId: v.connectionId,
                    customDataIdentifier: v.customDataIdentifier,
                    page: v.page,
                    pageSize: v.pageSize,
                };
            });

    export type Outbound = {
        companyId: string;
        connectionId: string;
        customDataIdentifier: string;
        page: number;
        pageSize: number;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ListCustomDataTypeRecordsRequest
    > = z
        .object({
            companyId: z.string(),
            connectionId: z.string(),
            customDataIdentifier: z.string(),
            page: z.number().int().default(1),
            pageSize: z.number().int().default(100),
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
                connectionId: v.connectionId,
                customDataIdentifier: v.customDataIdentifier,
                page: v.page,
                pageSize: v.pageSize,
            };
        });
}

/** @internal */
export namespace ListCustomDataTypeRecordsResponse$ {
    export const inboundSchema: z.ZodType<
        ListCustomDataTypeRecordsResponse,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            ContentType: z.string(),
            CustomDataTypeRecords: CustomDataTypeRecords$.inboundSchema.optional(),
            ErrorMessage: ErrorMessage$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.CustomDataTypeRecords === undefined
                    ? null
                    : { customDataTypeRecords: v.CustomDataTypeRecords }),
                ...(v.ErrorMessage === undefined ? null : { errorMessage: v.ErrorMessage }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        CustomDataTypeRecords?: CustomDataTypeRecords$.Outbound | undefined;
        ErrorMessage?: ErrorMessage$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ListCustomDataTypeRecordsResponse
    > = z
        .object({
            contentType: z.string(),
            customDataTypeRecords: CustomDataTypeRecords$.outboundSchema.optional(),
            errorMessage: ErrorMessage$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.customDataTypeRecords === undefined
                    ? null
                    : { CustomDataTypeRecords: v.customDataTypeRecords }),
                ...(v.errorMessage === undefined ? null : { ErrorMessage: v.errorMessage }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
