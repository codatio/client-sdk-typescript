/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Branding, Branding$ } from "./branding";
import { ErrorMessage, ErrorMessage$ } from "./errormessage";
import * as z from "zod";

export type GetIntegrationsBrandingRequest = {
    /**
     * A unique 4-letter key to represent a platform in each integration.
     */
    platformKey: string;
};

export type GetIntegrationsBrandingResponse = {
    /**
     * OK
     */
    branding?: Branding | undefined;
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * Your API request was not properly authorized.
     */
    errorMessage?: ErrorMessage | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace GetIntegrationsBrandingRequest$ {
    export const inboundSchema: z.ZodType<GetIntegrationsBrandingRequest, z.ZodTypeDef, unknown> = z
        .object({
            platformKey: z.string(),
        })
        .transform((v) => {
            return {
                platformKey: v.platformKey,
            };
        });

    export type Outbound = {
        platformKey: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetIntegrationsBrandingRequest> =
        z
            .object({
                platformKey: z.string(),
            })
            .transform((v) => {
                return {
                    platformKey: v.platformKey,
                };
            });
}

/** @internal */
export namespace GetIntegrationsBrandingResponse$ {
    export const inboundSchema: z.ZodType<GetIntegrationsBrandingResponse, z.ZodTypeDef, unknown> =
        z
            .object({
                Branding: Branding$.inboundSchema.optional(),
                ContentType: z.string(),
                ErrorMessage: ErrorMessage$.inboundSchema.optional(),
                StatusCode: z.number().int(),
                RawResponse: z.instanceof(Response),
            })
            .transform((v) => {
                return {
                    ...(v.Branding === undefined ? null : { branding: v.Branding }),
                    contentType: v.ContentType,
                    ...(v.ErrorMessage === undefined ? null : { errorMessage: v.ErrorMessage }),
                    statusCode: v.StatusCode,
                    rawResponse: v.RawResponse,
                };
            });

    export type Outbound = {
        Branding?: Branding$.Outbound | undefined;
        ContentType: string;
        ErrorMessage?: ErrorMessage$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetIntegrationsBrandingResponse
    > = z
        .object({
            branding: Branding$.outboundSchema.optional(),
            contentType: z.string(),
            errorMessage: ErrorMessage$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ...(v.branding === undefined ? null : { Branding: v.branding }),
                ContentType: v.contentType,
                ...(v.errorMessage === undefined ? null : { ErrorMessage: v.errorMessage }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
