/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Branding, Branding$ } from "./branding";
import { ErrorMessage, ErrorMessage$ } from "./errormessage";
import * as z from "zod";

export type GetIntegrationsBrandingRequest = {
    /**
     * A unique 4-letter key to represent a platform in each integration.
     */
    platformKey: string;
};

export type GetIntegrationsBrandingResponse = Branding | ErrorMessage;

/** @internal */
export namespace GetIntegrationsBrandingRequest$ {
    export const inboundSchema: z.ZodType<GetIntegrationsBrandingRequest, z.ZodTypeDef, unknown> = z
        .object({
            platformKey: z.string(),
        })
        .transform((v) => {
            return {
                platformKey: v.platformKey,
            };
        });

    export type Outbound = {
        platformKey: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetIntegrationsBrandingRequest> =
        z
            .object({
                platformKey: z.string(),
            })
            .transform((v) => {
                return {
                    platformKey: v.platformKey,
                };
            });
}

/** @internal */
export namespace GetIntegrationsBrandingResponse$ {
    export const inboundSchema: z.ZodType<GetIntegrationsBrandingResponse, z.ZodTypeDef, unknown> =
        z.union([Branding$.inboundSchema, ErrorMessage$.inboundSchema]);

    export type Outbound = Branding$.Outbound | ErrorMessage$.Outbound;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetIntegrationsBrandingResponse
    > = z.union([Branding$.outboundSchema, ErrorMessage$.outboundSchema]);
}
