/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../lib/primitives.js";
import * as z from "zod";

export type UpdateConnectionAuthorizationRequest = {
    /**
     * Unique identifier for a company.
     */
    companyId: string;
    /**
     * Unique identifier for a connection.
     */
    connectionId: string;
    requestBody?: { [k: string]: string } | undefined;
};

/** @internal */
export namespace UpdateConnectionAuthorizationRequest$ {
    export const inboundSchema: z.ZodType<
        UpdateConnectionAuthorizationRequest,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            companyId: z.string(),
            connectionId: z.string(),
            RequestBody: z.record(z.string()).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                RequestBody: "requestBody",
            });
        });

    export type Outbound = {
        companyId: string;
        connectionId: string;
        RequestBody?: { [k: string]: string } | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UpdateConnectionAuthorizationRequest
    > = z
        .object({
            companyId: z.string(),
            connectionId: z.string(),
            requestBody: z.record(z.string()).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                requestBody: "RequestBody",
            });
        });
}
