/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SyncSetting, SyncSetting$ } from "./syncsetting.js";
import * as z from "zod";

export type SyncSettings = {
    /**
     * Unique identifier for your client in Codat.
     */
    clientId?: string | undefined;
    settings?: Array<SyncSetting> | undefined;
    /**
     * Set to `True` if you want to override the default [sync settings](https://docs.codat.io/knowledge-base/advanced-sync-settings).
     */
    overridesDefaults?: boolean | undefined;
};

/** @internal */
export namespace SyncSettings$ {
    export const inboundSchema: z.ZodType<SyncSettings, z.ZodTypeDef, unknown> = z.object({
        clientId: z.string().optional(),
        settings: z.array(SyncSetting$.inboundSchema).optional(),
        overridesDefaults: z.boolean().optional(),
    });

    export type Outbound = {
        clientId?: string | undefined;
        settings?: Array<SyncSetting$.Outbound> | undefined;
        overridesDefaults?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SyncSettings> = z.object({
        clientId: z.string().optional(),
        settings: z.array(SyncSetting$.outboundSchema).optional(),
        overridesDefaults: z.boolean().optional(),
    });
}
