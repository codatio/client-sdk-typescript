/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ErrorValidationItem, ErrorValidationItem$ } from "./errorvalidationitem";
import * as z from "zod";

/**
 * A human-readable object describing validation decisions Codat has made. If an operation has failed because of validation errors, they will be detailed here.
 */
export type ErrorValidation = {
    errors?: Array<ErrorValidationItem> | null | undefined;
    warnings?: Array<ErrorValidationItem> | null | undefined;
};

/** @internal */
export namespace ErrorValidation$ {
    export const inboundSchema: z.ZodType<ErrorValidation, z.ZodTypeDef, unknown> = z
        .object({
            errors: z.nullable(z.array(ErrorValidationItem$.inboundSchema)).optional(),
            warnings: z.nullable(z.array(ErrorValidationItem$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.errors === undefined ? null : { errors: v.errors }),
                ...(v.warnings === undefined ? null : { warnings: v.warnings }),
            };
        });

    export type Outbound = {
        errors?: Array<ErrorValidationItem$.Outbound> | null | undefined;
        warnings?: Array<ErrorValidationItem$.Outbound> | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ErrorValidation> = z
        .object({
            errors: z.nullable(z.array(ErrorValidationItem$.outboundSchema)).optional(),
            warnings: z.nullable(z.array(ErrorValidationItem$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.errors === undefined ? null : { errors: v.errors }),
                ...(v.warnings === undefined ? null : { warnings: v.warnings }),
            };
        });
}
