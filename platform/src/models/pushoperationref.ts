/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { DataType, DataType$ } from "./datatype";
import * as z from "zod";

export type PushOperationRef = {
    /**
     * Available data types
     */
    dataType?: DataType | undefined;
    /**
     * Unique identifier for a push operation.
     */
    id?: string | undefined;
};

/** @internal */
export namespace PushOperationRef$ {
    export const inboundSchema: z.ZodType<PushOperationRef, z.ZodTypeDef, unknown> = z
        .object({
            dataType: DataType$.inboundSchema.optional(),
            id: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.dataType === undefined ? null : { dataType: v.dataType }),
                ...(v.id === undefined ? null : { id: v.id }),
            };
        });

    export type Outbound = {
        dataType?: string | undefined;
        id?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PushOperationRef> = z
        .object({
            dataType: DataType$.outboundSchema.optional(),
            id: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.dataType === undefined ? null : { dataType: v.dataType }),
                ...(v.id === undefined ? null : { id: v.id }),
            };
        });
}
