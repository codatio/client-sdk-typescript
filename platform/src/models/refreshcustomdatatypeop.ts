/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ErrorMessage, ErrorMessage$ } from "./errormessage";
import { PullOperation, PullOperation$ } from "./pulloperation";
import * as z from "zod";

export type RefreshCustomDataTypeRequest = {
    /**
     * Unique identifier for a company.
     */
    companyId: string;
    /**
     * Unique identifier for a connection.
     */
    connectionId: string;
    /**
     * Unique identifier for a custom data type.
     */
    customDataIdentifier: string;
};

export type RefreshCustomDataTypeResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * Your API request was not properly authorized.
     */
    errorMessage?: ErrorMessage | undefined;
    /**
     * OK
     */
    pullOperation?: PullOperation | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace RefreshCustomDataTypeRequest$ {
    export const inboundSchema: z.ZodType<RefreshCustomDataTypeRequest, z.ZodTypeDef, unknown> = z
        .object({
            companyId: z.string(),
            connectionId: z.string(),
            customDataIdentifier: z.string(),
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
                connectionId: v.connectionId,
                customDataIdentifier: v.customDataIdentifier,
            };
        });

    export type Outbound = {
        companyId: string;
        connectionId: string;
        customDataIdentifier: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RefreshCustomDataTypeRequest> = z
        .object({
            companyId: z.string(),
            connectionId: z.string(),
            customDataIdentifier: z.string(),
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
                connectionId: v.connectionId,
                customDataIdentifier: v.customDataIdentifier,
            };
        });
}

/** @internal */
export namespace RefreshCustomDataTypeResponse$ {
    export const inboundSchema: z.ZodType<RefreshCustomDataTypeResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            ErrorMessage: ErrorMessage$.inboundSchema.optional(),
            PullOperation: PullOperation$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.ErrorMessage === undefined ? null : { errorMessage: v.ErrorMessage }),
                ...(v.PullOperation === undefined ? null : { pullOperation: v.PullOperation }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        ErrorMessage?: ErrorMessage$.Outbound | undefined;
        PullOperation?: PullOperation$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RefreshCustomDataTypeResponse> =
        z
            .object({
                contentType: z.string(),
                errorMessage: ErrorMessage$.outboundSchema.optional(),
                pullOperation: PullOperation$.outboundSchema.optional(),
                statusCode: z.number().int(),
                rawResponse: z.instanceof(Response).transform(() => {
                    throw new Error("Response cannot be serialized");
                }),
            })
            .transform((v) => {
                return {
                    ContentType: v.contentType,
                    ...(v.errorMessage === undefined ? null : { ErrorMessage: v.errorMessage }),
                    ...(v.pullOperation === undefined ? null : { PullOperation: v.pullOperation }),
                    StatusCode: v.statusCode,
                    RawResponse: v.rawResponse,
                };
            });
}
