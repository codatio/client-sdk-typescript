/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Connections, Connections$ } from "./connections";
import { ErrorMessage, ErrorMessage$ } from "./errormessage";
import * as z from "zod";

export type ListConnectionsRequest = {
    /**
     * Unique identifier for a company.
     */
    companyId: string;
    /**
     * Field to order results by. [Read more](https://docs.codat.io/using-the-api/ordering-results).
     */
    orderBy?: string | undefined;
    /**
     * Page number. [Read more](https://docs.codat.io/using-the-api/paging).
     */
    page?: number | undefined;
    /**
     * Number of records to return in a page. [Read more](https://docs.codat.io/using-the-api/paging).
     */
    pageSize?: number | undefined;
    /**
     * Codat query string. [Read more](https://docs.codat.io/using-the-api/querying).
     */
    query?: string | undefined;
};

export type ListConnectionsResponse = Connections | ErrorMessage;

/** @internal */
export namespace ListConnectionsRequest$ {
    export const inboundSchema: z.ZodType<ListConnectionsRequest, z.ZodTypeDef, unknown> = z
        .object({
            companyId: z.string(),
            orderBy: z.string().optional(),
            page: z.number().int().default(1),
            pageSize: z.number().int().default(100),
            query: z.string().optional(),
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
                ...(v.orderBy === undefined ? null : { orderBy: v.orderBy }),
                page: v.page,
                pageSize: v.pageSize,
                ...(v.query === undefined ? null : { query: v.query }),
            };
        });

    export type Outbound = {
        companyId: string;
        orderBy?: string | undefined;
        page: number;
        pageSize: number;
        query?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListConnectionsRequest> = z
        .object({
            companyId: z.string(),
            orderBy: z.string().optional(),
            page: z.number().int().default(1),
            pageSize: z.number().int().default(100),
            query: z.string().optional(),
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
                ...(v.orderBy === undefined ? null : { orderBy: v.orderBy }),
                page: v.page,
                pageSize: v.pageSize,
                ...(v.query === undefined ? null : { query: v.query }),
            };
        });
}

/** @internal */
export namespace ListConnectionsResponse$ {
    export const inboundSchema: z.ZodType<ListConnectionsResponse, z.ZodTypeDef, unknown> = z.union(
        [Connections$.inboundSchema, ErrorMessage$.inboundSchema]
    );

    export type Outbound = Connections$.Outbound | ErrorMessage$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListConnectionsResponse> =
        z.union([Connections$.outboundSchema, ErrorMessage$.outboundSchema]);
}
