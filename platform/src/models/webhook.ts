/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { WebhookNotifier, WebhookNotifier$ } from "./webhooknotifier.js";
import * as z from "zod";

/**
 * Configuration to provide an event notification to a URL or list of email addresses based on the given type or condition.
 */
export type Webhook = {
    /**
     * Unique identifier for the configured notification.
     */
    id?: string | undefined;
    /**
     * The type of webhook.
     */
    type: string;
    /**
     * Unique identifier for your SMB in Codat.
     */
    companyId?: string | undefined;
    notifiers: WebhookNotifier;
};

/** @internal */
export namespace Webhook$ {
    export const inboundSchema: z.ZodType<Webhook, z.ZodTypeDef, unknown> = z.object({
        id: z.string().optional(),
        type: z.string(),
        companyId: z.string().optional(),
        notifiers: WebhookNotifier$.inboundSchema,
    });

    export type Outbound = {
        id?: string | undefined;
        type: string;
        companyId?: string | undefined;
        notifiers: WebhookNotifier$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Webhook> = z.object({
        id: z.string().optional(),
        type: z.string(),
        companyId: z.string().optional(),
        notifiers: WebhookNotifier$.outboundSchema,
    });
}
