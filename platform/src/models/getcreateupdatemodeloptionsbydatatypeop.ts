/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ErrorMessage, ErrorMessage$ } from "./errormessage";
import { PushOption, PushOption$ } from "./pushoption";
import { SchemaDataType, SchemaDataType$ } from "./schemadatatype";
import * as z from "zod";

export type GetCreateUpdateModelOptionsByDataTypeRequest = {
    /**
     * Unique identifier for a company.
     */
    companyId: string;
    /**
     * Unique identifier for a connection.
     */
    connectionId: string;
    /**
     * The key of a Codat data type
     */
    dataType: SchemaDataType;
};

export type GetCreateUpdateModelOptionsByDataTypeResponse = ErrorMessage | PushOption;

/** @internal */
export namespace GetCreateUpdateModelOptionsByDataTypeRequest$ {
    export const inboundSchema: z.ZodType<
        GetCreateUpdateModelOptionsByDataTypeRequest,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            companyId: z.string(),
            connectionId: z.string(),
            dataType: SchemaDataType$.inboundSchema,
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
                connectionId: v.connectionId,
                dataType: v.dataType,
            };
        });

    export type Outbound = {
        companyId: string;
        connectionId: string;
        dataType: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetCreateUpdateModelOptionsByDataTypeRequest
    > = z
        .object({
            companyId: z.string(),
            connectionId: z.string(),
            dataType: SchemaDataType$.outboundSchema,
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
                connectionId: v.connectionId,
                dataType: v.dataType,
            };
        });
}

/** @internal */
export namespace GetCreateUpdateModelOptionsByDataTypeResponse$ {
    export const inboundSchema: z.ZodType<
        GetCreateUpdateModelOptionsByDataTypeResponse,
        z.ZodTypeDef,
        unknown
    > = z.union([ErrorMessage$.inboundSchema, PushOption$.inboundSchema]);

    export type Outbound = ErrorMessage$.Outbound | PushOption$.Outbound;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetCreateUpdateModelOptionsByDataTypeResponse
    > = z.union([ErrorMessage$.outboundSchema, PushOption$.outboundSchema]);
}
