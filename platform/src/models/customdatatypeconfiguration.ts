/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Client's configuration details for a specific custom data type and platform pair.
 */
export type CustomDataTypeConfiguration = {
    /**
     * Underlying endpoint of the source platform that will serve as a data source for the custom data type. This value is not validated by Codat.
     */
    dataSource?: string | undefined;
    /**
     * An array of properties from the source system that can be used to uniquely identify the records returned for the custom data type. This value is not validated by Codat.
     */
    keyBy?: Array<string> | undefined;
    /**
     * Properties required to be fetched from the underlying platform for the custom data type that is being configured. This value is not validated by Codat.
     */
    requiredData?: { [k: string]: string } | undefined;
    /**
     * Property in the source platform nominated by the client that defines the date when a record was last modified there. This value is not validated by Codat.
     */
    sourceModifiedDate?: Array<string> | null | undefined;
};

/** @internal */
export namespace CustomDataTypeConfiguration$ {
    export const inboundSchema: z.ZodType<CustomDataTypeConfiguration, z.ZodTypeDef, unknown> = z
        .object({
            dataSource: z.string().optional(),
            keyBy: z.array(z.string()).optional(),
            requiredData: z.record(z.string()).optional(),
            sourceModifiedDate: z.nullable(z.array(z.string())).optional(),
        })
        .transform((v) => {
            return {
                ...(v.dataSource === undefined ? null : { dataSource: v.dataSource }),
                ...(v.keyBy === undefined ? null : { keyBy: v.keyBy }),
                ...(v.requiredData === undefined ? null : { requiredData: v.requiredData }),
                ...(v.sourceModifiedDate === undefined
                    ? null
                    : { sourceModifiedDate: v.sourceModifiedDate }),
            };
        });

    export type Outbound = {
        dataSource?: string | undefined;
        keyBy?: Array<string> | undefined;
        requiredData?: { [k: string]: string } | undefined;
        sourceModifiedDate?: Array<string> | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CustomDataTypeConfiguration> = z
        .object({
            dataSource: z.string().optional(),
            keyBy: z.array(z.string()).optional(),
            requiredData: z.record(z.string()).optional(),
            sourceModifiedDate: z.nullable(z.array(z.string())).optional(),
        })
        .transform((v) => {
            return {
                ...(v.dataSource === undefined ? null : { dataSource: v.dataSource }),
                ...(v.keyBy === undefined ? null : { keyBy: v.keyBy }),
                ...(v.requiredData === undefined ? null : { requiredData: v.requiredData }),
                ...(v.sourceModifiedDate === undefined
                    ? null
                    : { sourceModifiedDate: v.sourceModifiedDate }),
            };
        });
}
