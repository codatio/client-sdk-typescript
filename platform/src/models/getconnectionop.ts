/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Connection, Connection$ } from "./connection";
import { ErrorMessage, ErrorMessage$ } from "./errormessage";
import * as z from "zod";

export type GetConnectionRequest = {
    /**
     * Unique identifier for a company.
     */
    companyId: string;
    /**
     * Unique identifier for a connection.
     */
    connectionId: string;
};

export type GetConnectionResponse = ErrorMessage | Connection;

/** @internal */
export namespace GetConnectionRequest$ {
    export const inboundSchema: z.ZodType<GetConnectionRequest, z.ZodTypeDef, unknown> = z
        .object({
            companyId: z.string(),
            connectionId: z.string(),
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
                connectionId: v.connectionId,
            };
        });

    export type Outbound = {
        companyId: string;
        connectionId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetConnectionRequest> = z
        .object({
            companyId: z.string(),
            connectionId: z.string(),
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
                connectionId: v.connectionId,
            };
        });
}

/** @internal */
export namespace GetConnectionResponse$ {
    export const inboundSchema: z.ZodType<GetConnectionResponse, z.ZodTypeDef, unknown> = z.union([
        ErrorMessage$.inboundSchema,
        Connection$.inboundSchema,
    ]);

    export type Outbound = ErrorMessage$.Outbound | Connection$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetConnectionResponse> = z.union(
        [ErrorMessage$.outboundSchema, Connection$.outboundSchema]
    );
}
