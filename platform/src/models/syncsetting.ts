/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { DataType, DataType$ } from "./datatype";
import * as z from "zod";

/**
 * Describes how often, and how much history, should be fetched for the given data type when a pull operation is queued.
 */
export type SyncSetting = {
    /**
     * Available data types
     */
    dataType: DataType;
    /**
     * Whether this data type should be queued after a company has authorized a connection.
     */
    fetchOnFirstLink: boolean;
    /**
     * `True` if the [sync setting](https://docs.codat.io/knowledge-base/advanced-sync-settings) is locked.
     */
    isLocked?: boolean | undefined;
    /**
     * Months of data to fetch, for report data types (`balanceSheet` & `profitAndLoss`) only.
     */
    monthsToSync?: number | undefined;
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    syncFromUtc?: string | undefined;
    /**
     * Number of months of data to be fetched. Set this *or* `syncFromUTC`.
     */
    syncFromWindow?: number | undefined;
    /**
     * The sync in which data types are queued for a sync.
     */
    syncOrder: number;
    /**
     * Number of hours after which this data type should be refreshed.
     */
    syncSchedule: number;
};

/** @internal */
export namespace SyncSetting$ {
    export const inboundSchema: z.ZodType<SyncSetting, z.ZodTypeDef, unknown> = z
        .object({
            dataType: DataType$.inboundSchema,
            fetchOnFirstLink: z.boolean(),
            isLocked: z.boolean().optional(),
            monthsToSync: z.number().int().optional(),
            syncFromUtc: z.string().optional(),
            syncFromWindow: z.number().int().optional(),
            syncOrder: z.number().int(),
            syncSchedule: z.number().int(),
        })
        .transform((v) => {
            return {
                dataType: v.dataType,
                fetchOnFirstLink: v.fetchOnFirstLink,
                ...(v.isLocked === undefined ? null : { isLocked: v.isLocked }),
                ...(v.monthsToSync === undefined ? null : { monthsToSync: v.monthsToSync }),
                ...(v.syncFromUtc === undefined ? null : { syncFromUtc: v.syncFromUtc }),
                ...(v.syncFromWindow === undefined ? null : { syncFromWindow: v.syncFromWindow }),
                syncOrder: v.syncOrder,
                syncSchedule: v.syncSchedule,
            };
        });

    export type Outbound = {
        dataType: string;
        fetchOnFirstLink: boolean;
        isLocked?: boolean | undefined;
        monthsToSync?: number | undefined;
        syncFromUtc?: string | undefined;
        syncFromWindow?: number | undefined;
        syncOrder: number;
        syncSchedule: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SyncSetting> = z
        .object({
            dataType: DataType$.outboundSchema,
            fetchOnFirstLink: z.boolean(),
            isLocked: z.boolean().optional(),
            monthsToSync: z.number().int().optional(),
            syncFromUtc: z.string().optional(),
            syncFromWindow: z.number().int().optional(),
            syncOrder: z.number().int(),
            syncSchedule: z.number().int(),
        })
        .transform((v) => {
            return {
                dataType: v.dataType,
                fetchOnFirstLink: v.fetchOnFirstLink,
                ...(v.isLocked === undefined ? null : { isLocked: v.isLocked }),
                ...(v.monthsToSync === undefined ? null : { monthsToSync: v.monthsToSync }),
                ...(v.syncFromUtc === undefined ? null : { syncFromUtc: v.syncFromUtc }),
                ...(v.syncFromWindow === undefined ? null : { syncFromWindow: v.syncFromWindow }),
                syncOrder: v.syncOrder,
                syncSchedule: v.syncSchedule,
            };
        });
}
