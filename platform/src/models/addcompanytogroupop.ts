/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Company, Company$ } from "./company";
import { CompanyGroupAssignment, CompanyGroupAssignment$ } from "./companygroupassignment";
import { ErrorMessage, ErrorMessage$ } from "./errormessage";
import * as z from "zod";

export type AddCompanyToGroupRequest = {
    companyGroupAssignment?: CompanyGroupAssignment | undefined;
    /**
     * Unique identifier for a company.
     */
    companyId: string;
};

export type AddCompanyToGroupResponse = ErrorMessage | Company;

/** @internal */
export namespace AddCompanyToGroupRequest$ {
    export const inboundSchema: z.ZodType<AddCompanyToGroupRequest, z.ZodTypeDef, unknown> = z
        .object({
            companyGroupAssignment: CompanyGroupAssignment$.inboundSchema.optional(),
            companyId: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.companyGroupAssignment === undefined
                    ? null
                    : { companyGroupAssignment: v.companyGroupAssignment }),
                companyId: v.companyId,
            };
        });

    export type Outbound = {
        companyGroupAssignment?: CompanyGroupAssignment$.Outbound | undefined;
        companyId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddCompanyToGroupRequest> = z
        .object({
            companyGroupAssignment: CompanyGroupAssignment$.outboundSchema.optional(),
            companyId: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.companyGroupAssignment === undefined
                    ? null
                    : { companyGroupAssignment: v.companyGroupAssignment }),
                companyId: v.companyId,
            };
        });
}

/** @internal */
export namespace AddCompanyToGroupResponse$ {
    export const inboundSchema: z.ZodType<AddCompanyToGroupResponse, z.ZodTypeDef, unknown> =
        z.union([ErrorMessage$.inboundSchema, Company$.inboundSchema]);

    export type Outbound = ErrorMessage$.Outbound | Company$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddCompanyToGroupResponse> =
        z.union([ErrorMessage$.outboundSchema, Company$.outboundSchema]);
}
