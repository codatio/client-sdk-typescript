/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../lib/primitives.js";
import { Links, Links$ } from "./links.js";
import { Webhook, Webhook$ } from "./webhook.js";
import * as z from "zod";

export type Webhooks = {
    results?: Array<Webhook> | undefined;
    /**
     * Current page number.
     */
    pageNumber: number;
    /**
     * Number of items to return in results array.
     */
    pageSize: number;
    /**
     * Total number of items.
     */
    totalResults: number;
    links: Links;
};

/** @internal */
export namespace Webhooks$ {
    export const inboundSchema: z.ZodType<Webhooks, z.ZodTypeDef, unknown> = z
        .object({
            results: z.array(Webhook$.inboundSchema).optional(),
            pageNumber: z.number().int(),
            pageSize: z.number().int(),
            totalResults: z.number().int(),
            _links: Links$.inboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                _links: "links",
            });
        });

    export type Outbound = {
        results?: Array<Webhook$.Outbound> | undefined;
        pageNumber: number;
        pageSize: number;
        totalResults: number;
        _links: Links$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Webhooks> = z
        .object({
            results: z.array(Webhook$.outboundSchema).optional(),
            pageNumber: z.number().int(),
            pageSize: z.number().int(),
            totalResults: z.number().int(),
            links: Links$.outboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                links: "_links",
            });
        });
}
