/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { DataStatuses, DataStatuses$ } from "./datastatuses";
import { ErrorMessage, ErrorMessage$ } from "./errormessage";
import * as z from "zod";

export type GetCompanyDataStatusRequest = {
    /**
     * Unique identifier for a company.
     */
    companyId: string;
};

export type GetCompanyDataStatusResponse = ErrorMessage | DataStatuses;

/** @internal */
export namespace GetCompanyDataStatusRequest$ {
    export const inboundSchema: z.ZodType<GetCompanyDataStatusRequest, z.ZodTypeDef, unknown> = z
        .object({
            companyId: z.string(),
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
            };
        });

    export type Outbound = {
        companyId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCompanyDataStatusRequest> = z
        .object({
            companyId: z.string(),
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
            };
        });
}

/** @internal */
export namespace GetCompanyDataStatusResponse$ {
    export const inboundSchema: z.ZodType<GetCompanyDataStatusResponse, z.ZodTypeDef, unknown> =
        z.union([ErrorMessage$.inboundSchema, DataStatuses$.inboundSchema]);

    export type Outbound = ErrorMessage$.Outbound | DataStatuses$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCompanyDataStatusResponse> =
        z.union([ErrorMessage$.outboundSchema, DataStatuses$.outboundSchema]);
}
