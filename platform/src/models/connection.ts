/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { DataConnectionError, DataConnectionError$ } from "./dataconnectionerror";
import { DataConnectionStatus, DataConnectionStatus$ } from "./dataconnectionstatus";
import { SourceType, SourceType$ } from "./sourcetype";
import * as z from "zod";

/**
 * A connection represents a [company's](https://docs.codat.io/platform-api#/schemas/Company) connection to a data source and allows you to synchronize data (pull and/or push) with that source.
 *
 * @remarks
 *
 * A company can have multiple data connections depending on the type of data source it is connecting to. For example, a single company can link to:
 *
 * - [Accounting data](https://docs.codat.io/accounting-api/overview) - 1 active connection.
 * - [Banking data](https://docs.codat.io/banking-api/overview) - Multiple active connections.
 * - [Commerce data](https://docs.codat.io/commerce-api/overview) - Multiple active connections.
 * Any combination of accounting, banking, and commerce data connections is allowed.
 *
 * Before you can use a data connection to pull or push data, the company must grant you access to their business data by [linking the connection](https://docs.codat.io/auth-flow/overview).
 */
export type Connection = {
    additionalProperties?: any | undefined;
    connectionInfo?: { [k: string]: string } | undefined;
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    created: string;
    dataConnectionErrors?: Array<DataConnectionError> | undefined;
    /**
     * Unique identifier for a company's data connection.
     */
    id: string;
    /**
     * A Codat ID representing the integration.
     */
    integrationId: string;
    /**
     * A unique four-character ID that identifies the platform of the company's data connection. This ensures continuity if the platform changes its name in the future.
     */
    integrationKey: string;
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    lastSync?: string | undefined;
    /**
     * The link URL your customers can use to authorize access to their business application.
     */
    linkUrl: string;
    /**
     * Name of integration connected to company.
     */
    platformName: string;
    /**
     * A source-specific ID used to distinguish between different sources originating from the same data connection. In general, a data connection is a single data source. However, for TrueLayer, `sourceId` is associated with a specific bank and has a many-to-one relationship with the `integrationId`.
     */
    sourceId: string;
    /**
     * The type of platform of the connection.
     */
    sourceType: SourceType;
    /**
     * The current authorization status of the data connection.
     */
    status: DataConnectionStatus;
};

/** @internal */
export namespace Connection$ {
    export const inboundSchema: z.ZodType<Connection, z.ZodTypeDef, unknown> = z
        .object({
            additionalProperties: z.any().optional(),
            connectionInfo: z.record(z.string()).optional(),
            created: z.string(),
            dataConnectionErrors: z.array(DataConnectionError$.inboundSchema).optional(),
            id: z.string(),
            integrationId: z.string(),
            integrationKey: z.string(),
            lastSync: z.string().optional(),
            linkUrl: z.string(),
            platformName: z.string(),
            sourceId: z.string(),
            sourceType: SourceType$.inboundSchema,
            status: DataConnectionStatus$.inboundSchema,
        })
        .transform((v) => {
            return {
                ...(v.additionalProperties === undefined
                    ? null
                    : { additionalProperties: v.additionalProperties }),
                ...(v.connectionInfo === undefined ? null : { connectionInfo: v.connectionInfo }),
                created: v.created,
                ...(v.dataConnectionErrors === undefined
                    ? null
                    : { dataConnectionErrors: v.dataConnectionErrors }),
                id: v.id,
                integrationId: v.integrationId,
                integrationKey: v.integrationKey,
                ...(v.lastSync === undefined ? null : { lastSync: v.lastSync }),
                linkUrl: v.linkUrl,
                platformName: v.platformName,
                sourceId: v.sourceId,
                sourceType: v.sourceType,
                status: v.status,
            };
        });

    export type Outbound = {
        additionalProperties?: any | undefined;
        connectionInfo?: { [k: string]: string } | undefined;
        created: string;
        dataConnectionErrors?: Array<DataConnectionError$.Outbound> | undefined;
        id: string;
        integrationId: string;
        integrationKey: string;
        lastSync?: string | undefined;
        linkUrl: string;
        platformName: string;
        sourceId: string;
        sourceType: string;
        status: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Connection> = z
        .object({
            additionalProperties: z.any().optional(),
            connectionInfo: z.record(z.string()).optional(),
            created: z.string(),
            dataConnectionErrors: z.array(DataConnectionError$.outboundSchema).optional(),
            id: z.string(),
            integrationId: z.string(),
            integrationKey: z.string(),
            lastSync: z.string().optional(),
            linkUrl: z.string(),
            platformName: z.string(),
            sourceId: z.string(),
            sourceType: SourceType$.outboundSchema,
            status: DataConnectionStatus$.outboundSchema,
        })
        .transform((v) => {
            return {
                ...(v.additionalProperties === undefined
                    ? null
                    : { additionalProperties: v.additionalProperties }),
                ...(v.connectionInfo === undefined ? null : { connectionInfo: v.connectionInfo }),
                created: v.created,
                ...(v.dataConnectionErrors === undefined
                    ? null
                    : { dataConnectionErrors: v.dataConnectionErrors }),
                id: v.id,
                integrationId: v.integrationId,
                integrationKey: v.integrationKey,
                ...(v.lastSync === undefined ? null : { lastSync: v.lastSync }),
                linkUrl: v.linkUrl,
                platformName: v.platformName,
                sourceId: v.sourceId,
                sourceType: v.sourceType,
                status: v.status,
            };
        });
}
