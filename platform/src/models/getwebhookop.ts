/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ErrorMessage, ErrorMessage$ } from "./errormessage";
import { Webhook, Webhook$ } from "./webhook";
import * as z from "zod";

export type GetWebhookRequest = {
    /**
     * Unique ID of the webhook or rule.
     */
    ruleId: string;
};

export type GetWebhookResponse = Webhook | ErrorMessage;

/** @internal */
export namespace GetWebhookRequest$ {
    export const inboundSchema: z.ZodType<GetWebhookRequest, z.ZodTypeDef, unknown> = z
        .object({
            ruleId: z.string(),
        })
        .transform((v) => {
            return {
                ruleId: v.ruleId,
            };
        });

    export type Outbound = {
        ruleId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetWebhookRequest> = z
        .object({
            ruleId: z.string(),
        })
        .transform((v) => {
            return {
                ruleId: v.ruleId,
            };
        });
}

/** @internal */
export namespace GetWebhookResponse$ {
    export const inboundSchema: z.ZodType<GetWebhookResponse, z.ZodTypeDef, unknown> = z.union([
        Webhook$.inboundSchema,
        ErrorMessage$.inboundSchema,
    ]);

    export type Outbound = Webhook$.Outbound | ErrorMessage$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetWebhookResponse> = z.union([
        Webhook$.outboundSchema,
        ErrorMessage$.outboundSchema,
    ]);
}
