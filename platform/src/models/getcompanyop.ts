/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Company, Company$ } from "./company";
import { ErrorMessage, ErrorMessage$ } from "./errormessage";
import * as z from "zod";

export type GetCompanyRequest = {
    /**
     * Unique identifier for a company.
     */
    companyId: string;
};

export type GetCompanyResponse = ErrorMessage | Company;

/** @internal */
export namespace GetCompanyRequest$ {
    export const inboundSchema: z.ZodType<GetCompanyRequest, z.ZodTypeDef, unknown> = z
        .object({
            companyId: z.string(),
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
            };
        });

    export type Outbound = {
        companyId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCompanyRequest> = z
        .object({
            companyId: z.string(),
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
            };
        });
}

/** @internal */
export namespace GetCompanyResponse$ {
    export const inboundSchema: z.ZodType<GetCompanyResponse, z.ZodTypeDef, unknown> = z.union([
        ErrorMessage$.inboundSchema,
        Company$.inboundSchema,
    ]);

    export type Outbound = ErrorMessage$.Outbound | Company$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCompanyResponse> = z.union([
        ErrorMessage$.outboundSchema,
        Company$.outboundSchema,
    ]);
}
