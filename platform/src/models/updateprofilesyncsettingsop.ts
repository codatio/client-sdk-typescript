/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ErrorMessage, ErrorMessage$ } from "./errormessage";
import { SyncSetting, SyncSetting$ } from "./syncsetting";
import * as z from "zod";

/**
 * Include a `syncSetting` object for each data type.
 *
 * @remarks
 * `syncFromWindow`, `syncFromUTC` & `monthsToSync` only need to be included if you wish to set a value for them.
 */
export type UpdateProfileSyncSettingsRequestBody = {
    /**
     * Unique identifier for your client in Codat.
     */
    clientId: string;
    /**
     * Set to `True` if you want to override default [sync settings](https://docs.codat.io/knowledge-base/advanced-sync-settings).
     */
    overridesDefaults?: boolean | undefined;
    settings: Array<SyncSetting>;
};

export type UpdateProfileSyncSettingsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * Your API request was not properly authorized.
     */
    errorMessage?: ErrorMessage | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace UpdateProfileSyncSettingsRequestBody$ {
    export const inboundSchema: z.ZodType<
        UpdateProfileSyncSettingsRequestBody,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            clientId: z.string(),
            overridesDefaults: z.boolean().default(true),
            settings: z.array(SyncSetting$.inboundSchema),
        })
        .transform((v) => {
            return {
                clientId: v.clientId,
                overridesDefaults: v.overridesDefaults,
                settings: v.settings,
            };
        });

    export type Outbound = {
        clientId: string;
        overridesDefaults: boolean;
        settings: Array<SyncSetting$.Outbound>;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UpdateProfileSyncSettingsRequestBody
    > = z
        .object({
            clientId: z.string(),
            overridesDefaults: z.boolean().default(true),
            settings: z.array(SyncSetting$.outboundSchema),
        })
        .transform((v) => {
            return {
                clientId: v.clientId,
                overridesDefaults: v.overridesDefaults,
                settings: v.settings,
            };
        });
}

/** @internal */
export namespace UpdateProfileSyncSettingsResponse$ {
    export const inboundSchema: z.ZodType<
        UpdateProfileSyncSettingsResponse,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            ContentType: z.string(),
            ErrorMessage: ErrorMessage$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.ErrorMessage === undefined ? null : { errorMessage: v.ErrorMessage }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        ErrorMessage?: ErrorMessage$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UpdateProfileSyncSettingsResponse
    > = z
        .object({
            contentType: z.string(),
            errorMessage: ErrorMessage$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.errorMessage === undefined ? null : { ErrorMessage: v.errorMessage }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
