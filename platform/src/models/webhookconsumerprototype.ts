/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type WebhookConsumerPrototype = {
    /**
     * Unique identifier of the company to indicate company-specific events. The associated webhook consumer will receive events only for the specified ID.
     */
    companyId?: string | null | undefined;
    /**
     * Flag that enables or disables the endpoint from receiving events. Disabled when set to `true`.
     */
    disabled?: boolean | null | undefined;
    /**
     * An array of event types the webhook consumer subscribes to.
     */
    eventTypes?: Array<string> | undefined;
    /**
     * The URL that will consume webhook events dispatched by Codat.
     */
    url?: string | undefined;
};

/** @internal */
export namespace WebhookConsumerPrototype$ {
    export const inboundSchema: z.ZodType<WebhookConsumerPrototype, z.ZodTypeDef, unknown> = z
        .object({
            companyId: z.nullable(z.string()).optional(),
            disabled: z.nullable(z.boolean().default(false)),
            eventTypes: z.array(z.string()).optional(),
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.companyId === undefined ? null : { companyId: v.companyId }),
                disabled: v.disabled,
                ...(v.eventTypes === undefined ? null : { eventTypes: v.eventTypes }),
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });

    export type Outbound = {
        companyId?: string | null | undefined;
        disabled: boolean | null;
        eventTypes?: Array<string> | undefined;
        url?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, WebhookConsumerPrototype> = z
        .object({
            companyId: z.nullable(z.string()).optional(),
            disabled: z.nullable(z.boolean().default(false)),
            eventTypes: z.array(z.string()).optional(),
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.companyId === undefined ? null : { companyId: v.companyId }),
                disabled: v.disabled,
                ...(v.eventTypes === undefined ? null : { eventTypes: v.eventTypes }),
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });
}
