/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type WebhookConsumerPrototype = {
    /**
     * The URL that will consume webhook events dispatched by Codat.
     */
    url?: string | undefined;
    /**
     * Flag that enables or disables the endpoint from receiving events. Disabled when set to `true`.
     */
    disabled?: boolean | null | undefined;
    /**
     * An array of event types the webhook consumer subscribes to.
     */
    eventTypes?: Array<string> | undefined;
    /**
     * Unique identifier of the company to indicate company-specific events. The associated webhook consumer will receive events only for the specified ID.
     */
    companyId?: string | null | undefined;
};

/** @internal */
export namespace WebhookConsumerPrototype$ {
    export const inboundSchema: z.ZodType<WebhookConsumerPrototype, z.ZodTypeDef, unknown> =
        z.object({
            url: z.string().optional(),
            disabled: z.nullable(z.boolean().default(false)),
            eventTypes: z.array(z.string()).optional(),
            companyId: z.nullable(z.string()).optional(),
        });

    export type Outbound = {
        url?: string | undefined;
        disabled: boolean | null;
        eventTypes?: Array<string> | undefined;
        companyId?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, WebhookConsumerPrototype> =
        z.object({
            url: z.string().optional(),
            disabled: z.nullable(z.boolean().default(false)),
            eventTypes: z.array(z.string()).optional(),
            companyId: z.nullable(z.string()).optional(),
        });
}
