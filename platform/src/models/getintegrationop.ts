/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ErrorMessage, ErrorMessage$ } from "./errormessage";
import { Integration, Integration$ } from "./integration";
import * as z from "zod";

export type GetIntegrationRequest = {
    /**
     * A unique 4-letter key to represent a platform in each integration.
     */
    platformKey: string;
};

export type GetIntegrationResponse = ErrorMessage | Integration;

/** @internal */
export namespace GetIntegrationRequest$ {
    export const inboundSchema: z.ZodType<GetIntegrationRequest, z.ZodTypeDef, unknown> = z
        .object({
            platformKey: z.string(),
        })
        .transform((v) => {
            return {
                platformKey: v.platformKey,
            };
        });

    export type Outbound = {
        platformKey: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetIntegrationRequest> = z
        .object({
            platformKey: z.string(),
        })
        .transform((v) => {
            return {
                platformKey: v.platformKey,
            };
        });
}

/** @internal */
export namespace GetIntegrationResponse$ {
    export const inboundSchema: z.ZodType<GetIntegrationResponse, z.ZodTypeDef, unknown> = z.union([
        ErrorMessage$.inboundSchema,
        Integration$.inboundSchema,
    ]);

    export type Outbound = ErrorMessage$.Outbound | Integration$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetIntegrationResponse> =
        z.union([ErrorMessage$.outboundSchema, Integration$.outboundSchema]);
}
