/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Describes your Codat client instance
 */
export type Profile = {
    /**
     * Alert or webhooks authorization header.
     */
    alertAuthHeader?: string | undefined;
    /**
     * The API key for this Codat instance.
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    apiKey?: string | undefined;
    /**
     * `True` if the company name has been confirmed.
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    confirmCompanyName?: boolean | undefined;
    /**
     * Static url to your organization's icon.
     */
    iconUrl?: string | undefined;
    /**
     * Static url to your organization's logo.
     */
    logoUrl?: string | undefined;
    /**
     * The name given to the instance.
     */
    name: string;
    /**
     * The redirect URL pasted on to the SMB once Codat's [Hosted Link](https://docs.codat.io/auth-flow/authorize-hosted-link) has been completed by the SMB.
     */
    redirectUrl: string;
    /**
     * A list of urls that are allowed to communicate with Codat. If empty any url is allowed to communicate with Codat.
     */
    whiteListUrls?: Array<string> | undefined;
};

/** @internal */
export namespace Profile$ {
    export const inboundSchema: z.ZodType<Profile, z.ZodTypeDef, unknown> = z
        .object({
            alertAuthHeader: z.string().optional(),
            apiKey: z.string().optional(),
            confirmCompanyName: z.boolean().optional(),
            iconUrl: z.string().optional(),
            logoUrl: z.string().optional(),
            name: z.string(),
            redirectUrl: z.string(),
            whiteListUrls: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.alertAuthHeader === undefined
                    ? null
                    : { alertAuthHeader: v.alertAuthHeader }),
                ...(v.apiKey === undefined ? null : { apiKey: v.apiKey }),
                ...(v.confirmCompanyName === undefined
                    ? null
                    : { confirmCompanyName: v.confirmCompanyName }),
                ...(v.iconUrl === undefined ? null : { iconUrl: v.iconUrl }),
                ...(v.logoUrl === undefined ? null : { logoUrl: v.logoUrl }),
                name: v.name,
                redirectUrl: v.redirectUrl,
                ...(v.whiteListUrls === undefined ? null : { whiteListUrls: v.whiteListUrls }),
            };
        });

    export type Outbound = {
        alertAuthHeader?: string | undefined;
        apiKey?: string | undefined;
        confirmCompanyName?: boolean | undefined;
        iconUrl?: string | undefined;
        logoUrl?: string | undefined;
        name: string;
        redirectUrl: string;
        whiteListUrls?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Profile> = z
        .object({
            alertAuthHeader: z.string().optional(),
            apiKey: z.string().optional(),
            confirmCompanyName: z.boolean().optional(),
            iconUrl: z.string().optional(),
            logoUrl: z.string().optional(),
            name: z.string(),
            redirectUrl: z.string(),
            whiteListUrls: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.alertAuthHeader === undefined
                    ? null
                    : { alertAuthHeader: v.alertAuthHeader }),
                ...(v.apiKey === undefined ? null : { apiKey: v.apiKey }),
                ...(v.confirmCompanyName === undefined
                    ? null
                    : { confirmCompanyName: v.confirmCompanyName }),
                ...(v.iconUrl === undefined ? null : { iconUrl: v.iconUrl }),
                ...(v.logoUrl === undefined ? null : { logoUrl: v.logoUrl }),
                name: v.name,
                redirectUrl: v.redirectUrl,
                ...(v.whiteListUrls === undefined ? null : { whiteListUrls: v.whiteListUrls }),
            };
        });
}
