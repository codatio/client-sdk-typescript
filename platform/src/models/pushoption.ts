/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { PushOptionChoice, PushOptionChoice$ } from "./pushoptionchoice.js";
import { PushOptionProperty, PushOptionProperty$ } from "./pushoptionproperty.js";
import { PushOptionType, PushOptionType$ } from "./pushoptiontype.js";
import { PushValidationInfo, PushValidationInfo$ } from "./pushvalidationinfo.js";
import * as z from "zod";

export type PushOption = {
    /**
     * The option type.
     */
    type: PushOptionType;
    /**
     * The property's display name.
     */
    displayName: string;
    /**
     * A description of the property.
     */
    description?: string | undefined;
    /**
     * The property is required if `True`.
     */
    required: boolean;
    properties?: { [k: string]: PushOptionProperty } | null | undefined;
    options?: Array<PushOptionChoice> | null | undefined;
    validation?: PushValidationInfo | undefined;
};

/** @internal */
export namespace PushOption$ {
    export const inboundSchema: z.ZodType<PushOption, z.ZodTypeDef, unknown> = z.object({
        type: PushOptionType$.inboundSchema,
        displayName: z.string(),
        description: z.string().optional(),
        required: z.boolean(),
        properties: z.nullable(z.record(PushOptionProperty$.inboundSchema)).optional(),
        options: z.nullable(z.array(PushOptionChoice$.inboundSchema)).optional(),
        validation: PushValidationInfo$.inboundSchema.optional(),
    });

    export type Outbound = {
        type: string;
        displayName: string;
        description?: string | undefined;
        required: boolean;
        properties?: { [k: string]: PushOptionProperty$.Outbound } | null | undefined;
        options?: Array<PushOptionChoice$.Outbound> | null | undefined;
        validation?: PushValidationInfo$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PushOption> = z.object({
        type: PushOptionType$.outboundSchema,
        displayName: z.string(),
        description: z.string().optional(),
        required: z.boolean(),
        properties: z.nullable(z.record(PushOptionProperty$.outboundSchema)).optional(),
        options: z.nullable(z.array(PushOptionChoice$.outboundSchema)).optional(),
        validation: PushValidationInfo$.outboundSchema.optional(),
    });
}
