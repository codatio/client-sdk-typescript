/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { CustomDataTypeRecord, CustomDataTypeRecord$ } from "./customdatatyperecord";
import * as z from "zod";

/**
 * Resulting records pulled from the source platform for a specific custom data type.
 */
export type CustomDataTypeRecords = {
    /**
     * Current page number.
     */
    pageNumber?: number | undefined;
    /**
     * Number of items to return in results array.
     */
    pageSize?: number | undefined;
    results?: Array<CustomDataTypeRecord> | undefined;
    /**
     * Total number of items.
     */
    totalResults?: number | undefined;
};

/** @internal */
export namespace CustomDataTypeRecords$ {
    export const inboundSchema: z.ZodType<CustomDataTypeRecords, z.ZodTypeDef, unknown> = z
        .object({
            pageNumber: z.number().int().optional(),
            pageSize: z.number().int().optional(),
            results: z.array(CustomDataTypeRecord$.inboundSchema).optional(),
            totalResults: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.pageNumber === undefined ? null : { pageNumber: v.pageNumber }),
                ...(v.pageSize === undefined ? null : { pageSize: v.pageSize }),
                ...(v.results === undefined ? null : { results: v.results }),
                ...(v.totalResults === undefined ? null : { totalResults: v.totalResults }),
            };
        });

    export type Outbound = {
        pageNumber?: number | undefined;
        pageSize?: number | undefined;
        results?: Array<CustomDataTypeRecord$.Outbound> | undefined;
        totalResults?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CustomDataTypeRecords> = z
        .object({
            pageNumber: z.number().int().optional(),
            pageSize: z.number().int().optional(),
            results: z.array(CustomDataTypeRecord$.outboundSchema).optional(),
            totalResults: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.pageNumber === undefined ? null : { pageNumber: v.pageNumber }),
                ...(v.pageSize === undefined ? null : { pageSize: v.pageSize }),
                ...(v.results === undefined ? null : { results: v.results }),
                ...(v.totalResults === undefined ? null : { totalResults: v.totalResults }),
            };
        });
}
