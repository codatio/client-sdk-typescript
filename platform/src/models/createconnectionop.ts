/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../lib/primitives.js";
import * as z from "zod";

export type CreateConnectionRequestBody = {
    /**
     * A unique 4-letter key to represent a platform in each integration. View [accounting](https://docs.codat.io/integrations/accounting/overview#platform-keys), [banking](https://docs.codat.io/integrations/banking/overview#platform-keys), and [commerce](https://docs.codat.io/integrations/commerce/overview#platform-keys) platform keys.
     */
    platformKey?: string | undefined;
};

export type CreateConnectionRequest = {
    /**
     * Unique identifier for a company.
     */
    companyId: string;
    requestBody?: CreateConnectionRequestBody | undefined;
};

/** @internal */
export namespace CreateConnectionRequestBody$ {
    export const inboundSchema: z.ZodType<CreateConnectionRequestBody, z.ZodTypeDef, unknown> =
        z.object({
            platformKey: z.string().optional(),
        });

    export type Outbound = {
        platformKey?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateConnectionRequestBody> =
        z.object({
            platformKey: z.string().optional(),
        });
}

/** @internal */
export namespace CreateConnectionRequest$ {
    export const inboundSchema: z.ZodType<CreateConnectionRequest, z.ZodTypeDef, unknown> = z
        .object({
            companyId: z.string(),
            RequestBody: z.lazy(() => CreateConnectionRequestBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                RequestBody: "requestBody",
            });
        });

    export type Outbound = {
        companyId: string;
        RequestBody?: CreateConnectionRequestBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateConnectionRequest> = z
        .object({
            companyId: z.string(),
            requestBody: z.lazy(() => CreateConnectionRequestBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                requestBody: "RequestBody",
            });
        });
}
