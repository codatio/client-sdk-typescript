/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { DataType, DataType$ } from "./datatype";
import { SupportedFeature, SupportedFeature$ } from "./supportedfeature";
import * as z from "zod";

/**
 * Describes support for a given datatype and associated operations
 */
export type DataTypeFeature = {
    /**
     * Available data types
     */
    dataType?: DataType | undefined;
    supportedFeatures: Array<SupportedFeature>;
};

/** @internal */
export namespace DataTypeFeature$ {
    export const inboundSchema: z.ZodType<DataTypeFeature, z.ZodTypeDef, unknown> = z
        .object({
            dataType: DataType$.inboundSchema.optional(),
            supportedFeatures: z.array(SupportedFeature$.inboundSchema),
        })
        .transform((v) => {
            return {
                ...(v.dataType === undefined ? null : { dataType: v.dataType }),
                supportedFeatures: v.supportedFeatures,
            };
        });

    export type Outbound = {
        dataType?: string | undefined;
        supportedFeatures: Array<SupportedFeature$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DataTypeFeature> = z
        .object({
            dataType: DataType$.outboundSchema.optional(),
            supportedFeatures: z.array(SupportedFeature$.outboundSchema),
        })
        .transform((v) => {
            return {
                ...(v.dataType === undefined ? null : { dataType: v.dataType }),
                supportedFeatures: v.supportedFeatures,
            };
        });
}
