/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { DataType, DataType$ } from "./datatype";
import * as z from "zod";

export type PushOperationTimedOutWebhookData = {
    /**
     * Available data types
     */
    dataType?: DataType | undefined;
    /**
     * A unique identifier generated by Codat to represent this single push operation. This identifier can be used to track the status of the push, and should be persisted.
     */
    pushOperationGuid?: string | undefined;
    /**
     * A unique identifier generated by Codat to represent this single push operation. This identifier can be used to track the status of the push, and should be persisted.
     */
    pushOperationKey?: string | undefined;
};

/** @internal */
export namespace PushOperationTimedOutWebhookData$ {
    export const inboundSchema: z.ZodType<PushOperationTimedOutWebhookData, z.ZodTypeDef, unknown> =
        z
            .object({
                dataType: DataType$.inboundSchema.optional(),
                pushOperationGuid: z.string().optional(),
                pushOperationKey: z.string().optional(),
            })
            .transform((v) => {
                return {
                    ...(v.dataType === undefined ? null : { dataType: v.dataType }),
                    ...(v.pushOperationGuid === undefined
                        ? null
                        : { pushOperationGuid: v.pushOperationGuid }),
                    ...(v.pushOperationKey === undefined
                        ? null
                        : { pushOperationKey: v.pushOperationKey }),
                };
            });

    export type Outbound = {
        dataType?: string | undefined;
        pushOperationGuid?: string | undefined;
        pushOperationKey?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PushOperationTimedOutWebhookData
    > = z
        .object({
            dataType: DataType$.outboundSchema.optional(),
            pushOperationGuid: z.string().optional(),
            pushOperationKey: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.dataType === undefined ? null : { dataType: v.dataType }),
                ...(v.pushOperationGuid === undefined
                    ? null
                    : { pushOperationGuid: v.pushOperationGuid }),
                ...(v.pushOperationKey === undefined
                    ? null
                    : { pushOperationKey: v.pushOperationKey }),
            };
        });
}
