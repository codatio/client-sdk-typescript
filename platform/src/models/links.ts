/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { HalRef, HalRef$ } from "./halref";
import * as z from "zod";

export type Links = {
    current: HalRef;
    next?: HalRef | undefined;
    previous?: HalRef | undefined;
    self: HalRef;
};

/** @internal */
export namespace Links$ {
    export const inboundSchema: z.ZodType<Links, z.ZodTypeDef, unknown> = z
        .object({
            current: HalRef$.inboundSchema,
            next: HalRef$.inboundSchema.optional(),
            previous: HalRef$.inboundSchema.optional(),
            self: HalRef$.inboundSchema,
        })
        .transform((v) => {
            return {
                current: v.current,
                ...(v.next === undefined ? null : { next: v.next }),
                ...(v.previous === undefined ? null : { previous: v.previous }),
                self: v.self,
            };
        });

    export type Outbound = {
        current: HalRef$.Outbound;
        next?: HalRef$.Outbound | undefined;
        previous?: HalRef$.Outbound | undefined;
        self: HalRef$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Links> = z
        .object({
            current: HalRef$.outboundSchema,
            next: HalRef$.outboundSchema.optional(),
            previous: HalRef$.outboundSchema.optional(),
            self: HalRef$.outboundSchema,
        })
        .transform((v) => {
            return {
                current: v.current,
                ...(v.next === undefined ? null : { next: v.next }),
                ...(v.previous === undefined ? null : { previous: v.previous }),
                self: v.self,
            };
        });
}
