/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { DataConnectionStatus, DataConnectionStatus$ } from "./dataconnectionstatus.js";
import * as z from "zod";

export type ConnectionStatusChangedWebhookData = {
    /**
     * Unique identifier for a company's data connection.
     */
    dataConnectionId?: string | undefined;
    /**
     * The current authorization status of the data connection.
     */
    newStatus?: DataConnectionStatus | undefined;
    /**
     * The current authorization status of the data connection.
     */
    oldStatus?: DataConnectionStatus | undefined;
    /**
     * A unique 4-letter key to represent a platform in each integration. View [accounting](https://docs.codat.io/integrations/accounting/overview#platform-keys), [banking](https://docs.codat.io/integrations/banking/overview#platform-keys), and [commerce](https://docs.codat.io/integrations/commerce/overview#platform-keys) platform keys.
     */
    platformKey?: string | undefined;
};

/** @internal */
export namespace ConnectionStatusChangedWebhookData$ {
    export const inboundSchema: z.ZodType<
        ConnectionStatusChangedWebhookData,
        z.ZodTypeDef,
        unknown
    > = z.object({
        dataConnectionId: z.string().optional(),
        newStatus: DataConnectionStatus$.inboundSchema.optional(),
        oldStatus: DataConnectionStatus$.inboundSchema.optional(),
        platformKey: z.string().optional(),
    });

    export type Outbound = {
        dataConnectionId?: string | undefined;
        newStatus?: string | undefined;
        oldStatus?: string | undefined;
        platformKey?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ConnectionStatusChangedWebhookData
    > = z.object({
        dataConnectionId: z.string().optional(),
        newStatus: DataConnectionStatus$.outboundSchema.optional(),
        oldStatus: DataConnectionStatus$.outboundSchema.optional(),
        platformKey: z.string().optional(),
    });
}
