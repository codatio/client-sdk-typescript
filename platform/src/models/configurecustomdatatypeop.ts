/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    CustomDataTypeConfiguration,
    CustomDataTypeConfiguration$,
} from "./customdatatypeconfiguration";
import { ErrorMessage, ErrorMessage$ } from "./errormessage";
import * as z from "zod";

export type ConfigureCustomDataTypeRequest = {
    /**
     * Custom data type configuration for the specified platform.
     */
    customDataTypeConfiguration?: CustomDataTypeConfiguration | undefined;
    /**
     * Unique identifier for a custom data type.
     */
    customDataIdentifier: string;
    /**
     * A unique 4-letter key to represent a platform in each integration.
     */
    platformKey: string;
};

export type ConfigureCustomDataTypeResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * OK
     */
    customDataTypeConfiguration?: CustomDataTypeConfiguration | undefined;
    /**
     * Your API request was not properly authorized.
     */
    errorMessage?: ErrorMessage | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace ConfigureCustomDataTypeRequest$ {
    export const inboundSchema: z.ZodType<ConfigureCustomDataTypeRequest, z.ZodTypeDef, unknown> = z
        .object({
            CustomDataTypeConfiguration: CustomDataTypeConfiguration$.inboundSchema.optional(),
            customDataIdentifier: z.string(),
            platformKey: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.CustomDataTypeConfiguration === undefined
                    ? null
                    : { customDataTypeConfiguration: v.CustomDataTypeConfiguration }),
                customDataIdentifier: v.customDataIdentifier,
                platformKey: v.platformKey,
            };
        });

    export type Outbound = {
        CustomDataTypeConfiguration?: CustomDataTypeConfiguration$.Outbound | undefined;
        customDataIdentifier: string;
        platformKey: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ConfigureCustomDataTypeRequest> =
        z
            .object({
                customDataTypeConfiguration: CustomDataTypeConfiguration$.outboundSchema.optional(),
                customDataIdentifier: z.string(),
                platformKey: z.string(),
            })
            .transform((v) => {
                return {
                    ...(v.customDataTypeConfiguration === undefined
                        ? null
                        : { CustomDataTypeConfiguration: v.customDataTypeConfiguration }),
                    customDataIdentifier: v.customDataIdentifier,
                    platformKey: v.platformKey,
                };
            });
}

/** @internal */
export namespace ConfigureCustomDataTypeResponse$ {
    export const inboundSchema: z.ZodType<ConfigureCustomDataTypeResponse, z.ZodTypeDef, unknown> =
        z
            .object({
                ContentType: z.string(),
                CustomDataTypeConfiguration: CustomDataTypeConfiguration$.inboundSchema.optional(),
                ErrorMessage: ErrorMessage$.inboundSchema.optional(),
                StatusCode: z.number().int(),
                RawResponse: z.instanceof(Response),
            })
            .transform((v) => {
                return {
                    contentType: v.ContentType,
                    ...(v.CustomDataTypeConfiguration === undefined
                        ? null
                        : { customDataTypeConfiguration: v.CustomDataTypeConfiguration }),
                    ...(v.ErrorMessage === undefined ? null : { errorMessage: v.ErrorMessage }),
                    statusCode: v.StatusCode,
                    rawResponse: v.RawResponse,
                };
            });

    export type Outbound = {
        ContentType: string;
        CustomDataTypeConfiguration?: CustomDataTypeConfiguration$.Outbound | undefined;
        ErrorMessage?: ErrorMessage$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ConfigureCustomDataTypeResponse
    > = z
        .object({
            contentType: z.string(),
            customDataTypeConfiguration: CustomDataTypeConfiguration$.outboundSchema.optional(),
            errorMessage: ErrorMessage$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.customDataTypeConfiguration === undefined
                    ? null
                    : { CustomDataTypeConfiguration: v.customDataTypeConfiguration }),
                ...(v.errorMessage === undefined ? null : { ErrorMessage: v.errorMessage }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
