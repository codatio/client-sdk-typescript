/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The current status of a transient error. Null statuses indicate that the error is not transient.
 */
export enum ErrorStatus {
    Active = "Active",
    Resolved = "Resolved",
}

export type DataConnectionError = {
    /**
     * A message about a error returned by Codat.
     */
    errorMessage?: string | undefined;
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    erroredOnUtc?: string | undefined;
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    resolvedOnUtc?: string | undefined;
    /**
     * The current status of a transient error. Null statuses indicate that the error is not transient.
     */
    status?: ErrorStatus | null | undefined;
    /**
     * The HTTP status code returned by the source platform when the error occurred.
     */
    statusCode?: string | undefined;
    /**
     * A non-numeric status code/text returned by the source platform when the error occurred.
     */
    statusText?: string | undefined;
};

/** @internal */
export namespace ErrorStatus$ {
    export const inboundSchema = z.nativeEnum(ErrorStatus);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace DataConnectionError$ {
    export const inboundSchema: z.ZodType<DataConnectionError, z.ZodTypeDef, unknown> = z
        .object({
            errorMessage: z.string().optional(),
            erroredOnUtc: z.string().optional(),
            resolvedOnUtc: z.string().optional(),
            status: z.nullable(ErrorStatus$.inboundSchema).optional(),
            statusCode: z.string().optional(),
            statusText: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.errorMessage === undefined ? null : { errorMessage: v.errorMessage }),
                ...(v.erroredOnUtc === undefined ? null : { erroredOnUtc: v.erroredOnUtc }),
                ...(v.resolvedOnUtc === undefined ? null : { resolvedOnUtc: v.resolvedOnUtc }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                ...(v.statusText === undefined ? null : { statusText: v.statusText }),
            };
        });

    export type Outbound = {
        errorMessage?: string | undefined;
        erroredOnUtc?: string | undefined;
        resolvedOnUtc?: string | undefined;
        status?: string | null | undefined;
        statusCode?: string | undefined;
        statusText?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DataConnectionError> = z
        .object({
            errorMessage: z.string().optional(),
            erroredOnUtc: z.string().optional(),
            resolvedOnUtc: z.string().optional(),
            status: z.nullable(ErrorStatus$.outboundSchema).optional(),
            statusCode: z.string().optional(),
            statusText: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.errorMessage === undefined ? null : { errorMessage: v.errorMessage }),
                ...(v.erroredOnUtc === undefined ? null : { erroredOnUtc: v.erroredOnUtc }),
                ...(v.resolvedOnUtc === undefined ? null : { resolvedOnUtc: v.resolvedOnUtc }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                ...(v.statusText === undefined ? null : { statusText: v.statusText }),
            };
        });
}
