/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type Content = {};

export type ModifiedDate = {
    modifiedDate?: string | undefined;
};

export type CustomDataTypeRecord = {
    /**
     * Values from the source system for the properties defined in the custom data type configuration.
     */
    content?: { [k: string]: Content } | undefined;
    /**
     * Unique identifier of the record.
     */
    id?: string | undefined;
    modifiedDate?: ModifiedDate | undefined;
};

/** @internal */
export namespace Content$ {
    export const inboundSchema: z.ZodType<Content, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Content> = z.object({});
}

/** @internal */
export namespace ModifiedDate$ {
    export const inboundSchema: z.ZodType<ModifiedDate, z.ZodTypeDef, unknown> = z
        .object({
            modifiedDate: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.modifiedDate === undefined ? null : { modifiedDate: v.modifiedDate }),
            };
        });

    export type Outbound = {
        modifiedDate?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ModifiedDate> = z
        .object({
            modifiedDate: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.modifiedDate === undefined ? null : { modifiedDate: v.modifiedDate }),
            };
        });
}

/** @internal */
export namespace CustomDataTypeRecord$ {
    export const inboundSchema: z.ZodType<CustomDataTypeRecord, z.ZodTypeDef, unknown> = z
        .object({
            content: z.record(z.lazy(() => Content$.inboundSchema)).optional(),
            id: z.string().optional(),
            modifiedDate: z.lazy(() => ModifiedDate$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.modifiedDate === undefined ? null : { modifiedDate: v.modifiedDate }),
            };
        });

    export type Outbound = {
        content?: { [k: string]: Content$.Outbound } | undefined;
        id?: string | undefined;
        modifiedDate?: ModifiedDate$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CustomDataTypeRecord> = z
        .object({
            content: z.record(z.lazy(() => Content$.outboundSchema)).optional(),
            id: z.string().optional(),
            modifiedDate: z.lazy(() => ModifiedDate$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.modifiedDate === undefined ? null : { modifiedDate: v.modifiedDate }),
            };
        });
}
