/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { CustomDataTypeRecords, CustomDataTypeRecords$ } from "./customdatatyperecords";
import { ErrorMessage, ErrorMessage$ } from "./errormessage";
import * as z from "zod";

export type GetCustomDataTypeConfigurationRequest = {
    /**
     * Unique identifier for a custom data type.
     */
    customDataIdentifier: string;
    /**
     * A unique 4-letter key to represent a platform in each integration.
     */
    platformKey: string;
};

export type GetCustomDataTypeConfigurationResponse = CustomDataTypeRecords | ErrorMessage;

/** @internal */
export namespace GetCustomDataTypeConfigurationRequest$ {
    export const inboundSchema: z.ZodType<
        GetCustomDataTypeConfigurationRequest,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            customDataIdentifier: z.string(),
            platformKey: z.string(),
        })
        .transform((v) => {
            return {
                customDataIdentifier: v.customDataIdentifier,
                platformKey: v.platformKey,
            };
        });

    export type Outbound = {
        customDataIdentifier: string;
        platformKey: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetCustomDataTypeConfigurationRequest
    > = z
        .object({
            customDataIdentifier: z.string(),
            platformKey: z.string(),
        })
        .transform((v) => {
            return {
                customDataIdentifier: v.customDataIdentifier,
                platformKey: v.platformKey,
            };
        });
}

/** @internal */
export namespace GetCustomDataTypeConfigurationResponse$ {
    export const inboundSchema: z.ZodType<
        GetCustomDataTypeConfigurationResponse,
        z.ZodTypeDef,
        unknown
    > = z.union([CustomDataTypeRecords$.inboundSchema, ErrorMessage$.inboundSchema]);

    export type Outbound = CustomDataTypeRecords$.Outbound | ErrorMessage$.Outbound;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetCustomDataTypeConfigurationResponse
    > = z.union([CustomDataTypeRecords$.outboundSchema, ErrorMessage$.outboundSchema]);
}
