/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ErrorMessage, ErrorMessage$ } from "./errormessage";
import { PullOperation, PullOperation$ } from "./pulloperation";
import { SchemaDataType, SchemaDataType$ } from "./schemadatatype";
import * as z from "zod";

export type RefreshDataTypeRequest = {
    /**
     * Unique identifier for a company.
     */
    companyId: string;
    /**
     * Optionally, provide a data connection id to only queue pull operations on that connection.
     */
    connectionId?: string | undefined;
    /**
     * The key of a Codat data type
     */
    dataType: SchemaDataType;
};

export type RefreshDataTypeResponse = ErrorMessage | PullOperation;

/** @internal */
export namespace RefreshDataTypeRequest$ {
    export const inboundSchema: z.ZodType<RefreshDataTypeRequest, z.ZodTypeDef, unknown> = z
        .object({
            companyId: z.string(),
            connectionId: z.string().optional(),
            dataType: SchemaDataType$.inboundSchema,
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
                ...(v.connectionId === undefined ? null : { connectionId: v.connectionId }),
                dataType: v.dataType,
            };
        });

    export type Outbound = {
        companyId: string;
        connectionId?: string | undefined;
        dataType: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RefreshDataTypeRequest> = z
        .object({
            companyId: z.string(),
            connectionId: z.string().optional(),
            dataType: SchemaDataType$.outboundSchema,
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
                ...(v.connectionId === undefined ? null : { connectionId: v.connectionId }),
                dataType: v.dataType,
            };
        });
}

/** @internal */
export namespace RefreshDataTypeResponse$ {
    export const inboundSchema: z.ZodType<RefreshDataTypeResponse, z.ZodTypeDef, unknown> = z.union(
        [ErrorMessage$.inboundSchema, PullOperation$.inboundSchema]
    );

    export type Outbound = ErrorMessage$.Outbound | PullOperation$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RefreshDataTypeResponse> =
        z.union([ErrorMessage$.outboundSchema, PullOperation$.outboundSchema]);
}
