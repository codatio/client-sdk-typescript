/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ClosedEnum } from "../types";
import { ErrorMessage, ErrorMessage$ } from "./errormessage";
import {
    SupplementalDataConfiguration,
    SupplementalDataConfiguration$,
} from "./supplementaldataconfiguration";
import * as z from "zod";

/**
 * Data types that support supplemental data
 */
export const PathParamDataType = {
    ChartOfAccounts: "chartOfAccounts",
    Bills: "bills",
    Company: "company",
    CreditNotes: "creditNotes",
    Customers: "customers",
    Invoices: "invoices",
    Items: "items",
    JournalEntries: "journalEntries",
    Suppliers: "suppliers",
    TaxRates: "taxRates",
    CommerceCompanyInfo: "commerce-companyInfo",
    CommerceCustomers: "commerce-customers",
    CommerceDisputes: "commerce-disputes",
    CommerceLocations: "commerce-locations",
    CommerceOrders: "commerce-orders",
    CommercePayments: "commerce-payments",
    CommercePaymentMethods: "commerce-paymentMethods",
    CommerceProducts: "commerce-products",
    CommerceProductCategories: "commerce-productCategories",
    CommerceTaxComponents: "commerce-taxComponents",
    CommerceTransactions: "commerce-transactions",
} as const;
/**
 * Data types that support supplemental data
 */
export type PathParamDataType = ClosedEnum<typeof PathParamDataType>;

export type GetSupplementalDataConfigurationRequest = {
    /**
     * Supported supplemental data data type.
     */
    dataType: PathParamDataType;
    /**
     * A unique 4-letter key to represent a platform in each integration.
     */
    platformKey: string;
};

export type GetSupplementalDataConfigurationResponse = SupplementalDataConfiguration | ErrorMessage;

/** @internal */
export namespace PathParamDataType$ {
    export const inboundSchema = z.nativeEnum(PathParamDataType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetSupplementalDataConfigurationRequest$ {
    export const inboundSchema: z.ZodType<
        GetSupplementalDataConfigurationRequest,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            dataType: PathParamDataType$.inboundSchema,
            platformKey: z.string(),
        })
        .transform((v) => {
            return {
                dataType: v.dataType,
                platformKey: v.platformKey,
            };
        });

    export type Outbound = {
        dataType: string;
        platformKey: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetSupplementalDataConfigurationRequest
    > = z
        .object({
            dataType: PathParamDataType$.outboundSchema,
            platformKey: z.string(),
        })
        .transform((v) => {
            return {
                dataType: v.dataType,
                platformKey: v.platformKey,
            };
        });
}

/** @internal */
export namespace GetSupplementalDataConfigurationResponse$ {
    export const inboundSchema: z.ZodType<
        GetSupplementalDataConfigurationResponse,
        z.ZodTypeDef,
        unknown
    > = z.union([SupplementalDataConfiguration$.inboundSchema, ErrorMessage$.inboundSchema]);

    export type Outbound = SupplementalDataConfiguration$.Outbound | ErrorMessage$.Outbound;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetSupplementalDataConfigurationResponse
    > = z.union([SupplementalDataConfiguration$.outboundSchema, ErrorMessage$.outboundSchema]);
}
