/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ErrorMessage, ErrorMessage$ } from "./errormessage";
import {
    SupplementalDataConfiguration,
    SupplementalDataConfiguration$,
} from "./supplementaldataconfiguration";
import * as z from "zod";

/**
 * Data types that support supplemental data
 */
export enum ConfigureSupplementalDataPathParamDataType {
    ChartOfAccounts = "chartOfAccounts",
    Bills = "bills",
    Company = "company",
    CreditNotes = "creditNotes",
    Customers = "customers",
    Invoices = "invoices",
    Items = "items",
    JournalEntries = "journalEntries",
    Suppliers = "suppliers",
    TaxRates = "taxRates",
    CommerceCompanyInfo = "commerce-companyInfo",
    CommerceCustomers = "commerce-customers",
    CommerceDisputes = "commerce-disputes",
    CommerceLocations = "commerce-locations",
    CommerceOrders = "commerce-orders",
    CommercePayments = "commerce-payments",
    CommercePaymentMethods = "commerce-paymentMethods",
    CommerceProducts = "commerce-products",
    CommerceProductCategories = "commerce-productCategories",
    CommerceTaxComponents = "commerce-taxComponents",
    CommerceTransactions = "commerce-transactions",
}

export type ConfigureSupplementalDataRequest = {
    /**
     * The configuration for the specified platform and data type.
     */
    supplementalDataConfiguration?: SupplementalDataConfiguration | undefined;
    /**
     * Supported supplemental data data type.
     */
    dataType: ConfigureSupplementalDataPathParamDataType;
    /**
     * A unique 4-letter key to represent a platform in each integration.
     */
    platformKey: string;
};

export type ConfigureSupplementalDataResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * Your API request was not properly authorized.
     */
    errorMessage?: ErrorMessage | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace ConfigureSupplementalDataPathParamDataType$ {
    export const inboundSchema = z.nativeEnum(ConfigureSupplementalDataPathParamDataType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace ConfigureSupplementalDataRequest$ {
    export const inboundSchema: z.ZodType<ConfigureSupplementalDataRequest, z.ZodTypeDef, unknown> =
        z
            .object({
                SupplementalDataConfiguration:
                    SupplementalDataConfiguration$.inboundSchema.optional(),
                dataType: ConfigureSupplementalDataPathParamDataType$.inboundSchema,
                platformKey: z.string(),
            })
            .transform((v) => {
                return {
                    ...(v.SupplementalDataConfiguration === undefined
                        ? null
                        : { supplementalDataConfiguration: v.SupplementalDataConfiguration }),
                    dataType: v.dataType,
                    platformKey: v.platformKey,
                };
            });

    export type Outbound = {
        SupplementalDataConfiguration?: SupplementalDataConfiguration$.Outbound | undefined;
        dataType: string;
        platformKey: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ConfigureSupplementalDataRequest
    > = z
        .object({
            supplementalDataConfiguration: SupplementalDataConfiguration$.outboundSchema.optional(),
            dataType: ConfigureSupplementalDataPathParamDataType$.outboundSchema,
            platformKey: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.supplementalDataConfiguration === undefined
                    ? null
                    : { SupplementalDataConfiguration: v.supplementalDataConfiguration }),
                dataType: v.dataType,
                platformKey: v.platformKey,
            };
        });
}

/** @internal */
export namespace ConfigureSupplementalDataResponse$ {
    export const inboundSchema: z.ZodType<
        ConfigureSupplementalDataResponse,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            ContentType: z.string(),
            ErrorMessage: ErrorMessage$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.ErrorMessage === undefined ? null : { errorMessage: v.ErrorMessage }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        ErrorMessage?: ErrorMessage$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ConfigureSupplementalDataResponse
    > = z
        .object({
            contentType: z.string(),
            errorMessage: ErrorMessage$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.errorMessage === undefined ? null : { ErrorMessage: v.errorMessage }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
