/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    ConnectionManagementAccessToken,
    ConnectionManagementAccessToken$,
} from "./connectionmanagementaccesstoken";
import { ErrorMessage, ErrorMessage$ } from "./errormessage";
import * as z from "zod";

export type GetConnectionManagementAccessTokenRequest = {
    /**
     * Unique identifier for a company.
     */
    companyId: string;
};

export type GetConnectionManagementAccessTokenResponse =
    | ConnectionManagementAccessToken
    | ErrorMessage;

/** @internal */
export namespace GetConnectionManagementAccessTokenRequest$ {
    export const inboundSchema: z.ZodType<
        GetConnectionManagementAccessTokenRequest,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            companyId: z.string(),
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
            };
        });

    export type Outbound = {
        companyId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetConnectionManagementAccessTokenRequest
    > = z
        .object({
            companyId: z.string(),
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
            };
        });
}

/** @internal */
export namespace GetConnectionManagementAccessTokenResponse$ {
    export const inboundSchema: z.ZodType<
        GetConnectionManagementAccessTokenResponse,
        z.ZodTypeDef,
        unknown
    > = z.union([ConnectionManagementAccessToken$.inboundSchema, ErrorMessage$.inboundSchema]);

    export type Outbound = ConnectionManagementAccessToken$.Outbound | ErrorMessage$.Outbound;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetConnectionManagementAccessTokenResponse
    > = z.union([ConnectionManagementAccessToken$.outboundSchema, ErrorMessage$.outboundSchema]);
}
