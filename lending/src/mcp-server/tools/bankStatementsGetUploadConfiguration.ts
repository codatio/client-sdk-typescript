/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { bankStatementsGetUploadConfiguration } from "../../funcs/bankStatementsGetUploadConfiguration.js";
import * as operations from "../../sdk/models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.GetBankStatementUploadConfigurationRequest$inboundSchema,
};

export const tool$bankStatementsGetUploadConfiguration: ToolDefinition<
  typeof args
> = {
  name: "bank-statements-get-upload-configuration",
  description: `Get upload configuration

Use the *Get upload configuration* endpoint to view the existing bank statement upload configuration for the specified data connection.

With this configuration, you set the source of the data you plan to upload, the ID of the account in third-party banking platform, and a provider ID, if required. This lets us determine the expected format of the data and any source-specific requirements.

When you use the [*Upload data*](https://docs.codat.io/lending-api#/operations/upload-bank-statement-data) endpoint next, you must upload the data for the account you configured. `,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await bankStatementsGetUploadConfiguration(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
