/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { salesCustomersGet } from "../funcs/salesCustomersGet.js";
import { salesCustomersList } from "../funcs/salesCustomersList.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class CodatLendingCustomers extends ClientSDK {
  /**
   * List customers
   *
   * @remarks
   * The *List customers* endpoint returns a list of [customers](https://docs.codat.io/lending-api#/schemas/Customer) for a given company's connection.
   *
   * [Customers](https://docs.codat.io/lending-api#/schemas/Customer) are people or organizations that place orders, make payments and recieve goods and/or services from the SMB.
   *
   * Before using this endpoint, you must have [retrieved data for the company](https://docs.codat.io/lending-api#/operations/refresh-company-data).
   */
  async list(
    request: operations.ListCommerceCustomersRequest,
    options?: RequestOptions,
  ): Promise<shared.CommerceCustomers> {
    return unwrapAsync(salesCustomersList(
      this,
      request,
      options,
    ));
  }

  /**
   * Get customer
   *
   * @remarks
   * The *Get customer* endpoint returns a single customer for a given customerId.
   *
   * [Customers](https://docs.codat.io/lending-api#/schemas/Customer) are people or organizations that place orders, make payments and receive goods and/or services from the SMB.
   *
   * Check out our [coverage explorer](https://knowledge.codat.io/supported-features/commerce?view=tab-by-data-type&dataType=commerce-customers) for integrations that support getting a specific customer.
   *
   * Before using this endpoint, you must have [retrieved data for the company](https://docs.codat.io/lending-api#/operations/refresh-company-data).
   */
  async get(
    request: operations.GetCommerceCustomerRequest,
    options?: RequestOptions,
  ): Promise<shared.CommerceCustomer> {
    return unwrapAsync(salesCustomersGet(
      this,
      request,
      options,
    ));
  }
}
