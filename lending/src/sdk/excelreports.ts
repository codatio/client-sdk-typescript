/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { excelReportsDownload } from "../funcs/excelReportsDownload.js";
import { excelReportsGenerate } from "../funcs/excelReportsGenerate.js";
import { excelReportsGetStatus } from "../funcs/excelReportsGetStatus.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class ExcelReports extends ClientSDK {
  /**
   * Generate Excel report
   *
   * @remarks
   * The *Generate Excel report* endpoint requests the production of a downloadable Excel file for a report type specified in the `reportType` query parameter.
   *
   * In response, the endpoint returns the [status](https://docs.codat.io/lending-api#/schemas/ExcelStatus) detailing the current state of the report generation request.
   *
   * ### Report types
   *
   * | reportType                                                                           | Description                                                                                                                                   |
   * |--------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------|
   * | [audit](https://docs.codat.io/lending/excel/audit-report)                            | Identifies inaccurate or out-of-date accounts, helping you to make decisions with confidence.                                                   || [audit](https://docs.codat.io/lending/excel/audit-report)                            | Identify inaccurate or out-of-date accounts, helping you to make decisions with confidence.                                                   |
   * | [enhancedCashFlow](https://docs.codat.io/lending/excel/enhanced-invoices-report)     | Provides a fully categorized list of bank transactions for a company, allowing lenders to accurately forecast a company's cash flow.  |
   * | [enhancedFinancials](https://docs.codat.io/lending/excel/enhanced-financials-report) | Supports decision-making using fully categorized financial statements to allow lenders to automate their underwriting processes.                |
   * | [enhancedInvoices](https://docs.codat.io/lending/excel/enhanced-invoices-report)     | Helps verify that payments have been made against historic invoices. Great for invoice finance lenders.                                       |
   *
   * [Learn more](https://docs.codat.io/lending/excel/overview) about valid Excel report types.
   */
  async generate(
    request: operations.GenerateExcelReportRequest,
    options?: RequestOptions,
  ): Promise<shared.ExcelStatus> {
    return unwrapAsync(excelReportsGenerate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Excel report status
   *
   * @remarks
   * The *Get Excel report status* returns the status of the report mostly recently requested for Excel generation. It does not return the status of any historical report requests.
   *
   * Poll this endpoint to check the progress of the report once you have requested its generation. This will not affect the generation of the report.
   *
   * When the report generation completes successfully, the `inProgress` property will be marked as `false` and the `success` field will be marked as `true`.
   */
  async getStatus(
    request: operations.GetExcelReportGenerationStatusRequest,
    options?: RequestOptions,
  ): Promise<shared.ExcelStatus> {
    return unwrapAsync(excelReportsGetStatus(
      this,
      request,
      options,
    ));
  }

  /**
   * Download Excel report
   *
   * @remarks
   * The *Download Excel report* endpoint downloads the latest successfully generated Excel report of a specified report type for a given company.
   *
   * The downloadable Excel file is returned in the response. You can save it to your local machine.
   *
   * You can [learn more](https://docs.codat.io/lending/excel/overview) about valid Excel report types.
   */
  async download(
    request: operations.DownloadExcelReportRequest,
    options?: RequestOptions,
  ): Promise<Uint8Array> {
    return unwrapAsync(excelReportsDownload(
      this,
      request,
      options,
    ));
  }
}
