/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { accountsReceivableCustomersDownloadAttachment } from "../funcs/accountsReceivableCustomersDownloadAttachment.js";
import { accountsReceivableCustomersGet } from "../funcs/accountsReceivableCustomersGet.js";
import { accountsReceivableCustomersGetAttachment } from "../funcs/accountsReceivableCustomersGetAttachment.js";
import { accountsReceivableCustomersList } from "../funcs/accountsReceivableCustomersList.js";
import { accountsReceivableCustomersListAttachments } from "../funcs/accountsReceivableCustomersListAttachments.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Customers extends ClientSDK {
  /**
   * List customers
   *
   * @remarks
   * The *List customers* endpoint returns a list of [customers](https://docs.codat.io/lending-api#/schemas/Customer) for a given company's connection.
   *
   * [Customers](https://docs.codat.io/lending-api#/schemas/Customer) are people or organizations that buy goods or services from the SMB.
   *
   * Before using this endpoint, you must have [retrieved data for the company](https://docs.codat.io/lending-api#/operations/refresh-company-data).
   */
  async list(
    request: operations.ListAccountingCustomersRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingCustomers> {
    return unwrapAsync(accountsReceivableCustomersList(
      this,
      request,
      options,
    ));
  }

  /**
   * Get customer
   *
   * @remarks
   * The *Get customer* endpoint returns a single customer for a given customerId.
   *
   * [Customers](https://docs.codat.io/lending-api#/schemas/Customer) are people or organizations that buy goods or services from the SMB.
   *
   * Before using this endpoint, you must have [retrieved data for the company](https://docs.codat.io/lending-api#/operations/refresh-company-data).
   */
  async get(
    request: operations.GetAccountingCustomerRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingCustomer> {
    return unwrapAsync(accountsReceivableCustomersGet(
      this,
      request,
      options,
    ));
  }

  /**
   * List customer attachments
   *
   * @remarks
   * The *List customer attachments* endpoint returns a list of attachments avialable to download for given `customerId`.
   *
   * [Customers](https://docs.codat.io/lending-api#/schemas/Customer) are people or organizations that buy goods or services from the SMB.
   */
  async listAttachments(
    request: operations.ListAccountingCustomerAttachmentsRequest,
    options?: RequestOptions,
  ): Promise<shared.Attachments> {
    return unwrapAsync(accountsReceivableCustomersListAttachments(
      this,
      request,
      options,
    ));
  }

  /**
   * Get customer attachment
   *
   * @remarks
   * The *Get customer attachment* endpoint returns a specific attachment for a given `customerId` and `attachmentId`.
   *
   * [Customers](https://docs.codat.io/lending-api#/schemas/Customer) are people or organizations that buy goods or services from the SMB.
   */
  async getAttachment(
    request: operations.GetAccountingCustomerAttachmentRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingAttachment> {
    return unwrapAsync(accountsReceivableCustomersGetAttachment(
      this,
      request,
      options,
    ));
  }

  /**
   * Download customer attachment
   *
   * @remarks
   * The *Download customer attachment* endpoint downloads a specific attachment for a given `customerId` and `attachmentId`.
   *
   * [Customers](https://docs.codat.io/lending-api#/schemas/Customer) are people or organizations that buy goods or services from the SMB.
   */
  async downloadAttachment(
    request: operations.DownloadAccountingCustomerAttachmentRequest,
    options?: RequestOptions,
  ): Promise<ReadableStream<Uint8Array>> {
    return unwrapAsync(accountsReceivableCustomersDownloadAttachment(
      this,
      request,
      options,
    ));
  }
}
