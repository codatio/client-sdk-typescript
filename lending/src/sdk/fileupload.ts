/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { fileUploadDownload } from "../funcs/fileUploadDownload.js";
import { fileUploadListUploaded } from "../funcs/fileUploadListUploaded.js";
import { fileUploadUpload } from "../funcs/fileUploadUpload.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class FileUpload extends ClientSDK {
  /**
   * List all files uploaded by a company
   *
   * @remarks
   * The *List files* endpoint returns a list of all files uploaded to Codat by the SMB.
   */
  async listUploaded(
    request: operations.ListFilesRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.FileT>> {
    return unwrapAsync(fileUploadListUploaded(
      this,
      request,
      options,
    ));
  }

  /**
   * Download all files for a company
   *
   * @remarks
   * The *Download files* endpoint downloads all files that have  been uploaded by to SMB to Codat. A `date` may be specified to download any files uploaded on the date provided.
   */
  async download(
    request: operations.DownloadFilesRequest,
    options?: RequestOptions,
  ): Promise<ReadableStream<Uint8Array>> {
    return unwrapAsync(fileUploadDownload(
      this,
      request,
      options,
    ));
  }

  /**
   * Upload files for a company
   *
   * @remarks
   * The *Upload files* endpoint uploads multiple files provided by the SMB to Codat. This may include personal identity documents, pitch decks, contracts, or files with accounting and banking data.
   *
   * Uploaded files must meet the following requirements:
   *
   * - Up to 20 files can be uploaded at a time.
   * - PDF, XLS, XLSX, XLSB, CSV, DOC, DOCX, PPT, PPTX, JPEG, JPG, and PNG files can be uploaded.
   * - Each file can be up to 10MB in size.
   */
  async upload(
    request: operations.UploadFilesRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(fileUploadUpload(
      this,
      request,
      options,
    ));
  }
}
