/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import { AccountingBankData } from "./accountingbankdata";
import { AccountsPayable } from "./accountspayable";
import { AccountsReceivable } from "./accountsreceivable";
import { CashFlow } from "./cashflow";
import { Companies } from "./companies";
import { CompanyInfo } from "./companyinfo";
import { Connections } from "./connections";
import { DataIntegrity } from "./dataintegrity";
import { ExcelReports } from "./excelreports";
import { FileUpload } from "./fileupload";
import { Financials } from "./financials";
import { Liabilities } from "./liabilities";
import { ManageData } from "./managedata";
import * as shared from "./models/shared";
import { Sales } from "./sales";
import { Transactions } from "./transactions";
import axios from "axios";
import { AxiosInstance } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = [
    /**
     * Production
     */
    "https://api.codat.io",
] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
    /**
     * The security details required to authenticate the SDK
     */
    security?: shared.Security;
    /**
     * Allows overriding the default axios client used by the SDK
     */
    defaultClient?: AxiosInstance;

    /**
     * Allows overriding the default server used by the SDK
     */
    serverIdx?: number;

    /**
     * Allows overriding the default server URL used by the SDK
     */
    serverURL?: string;
};

export class SDKConfiguration {
    defaultClient: AxiosInstance;
    securityClient: AxiosInstance;
    serverURL: string;
    serverDefaults: any;
    language = "typescript";
    openapiDocVersion = "3.0.0";
    sdkVersion = "0.1.0";
    genVersion = "2.91.4";

    public constructor(init?: Partial<SDKConfiguration>) {
        Object.assign(this, init);
    }
}

/**
 * Lending API: An API for uploading and downloading files from 'File Upload' Integrations.
 *
 * @remarks
 *
 * The Accounting file upload, Banking file upload, and Business documents file upload integrations provide simple file upload functionality.
 *
 * [Read more...](https://docs.codat.io/other/file-upload)
 *
 * [See our OpenAPI spec](https://github.com/codatio/oas)
 */
export class CodatLending {
    /**
     * Access bank transactions from an accounting platform.
     */
    public accountingBankData: AccountingBankData;
    /**
     * Data from a linked accounting platform representing money the business owes money to its suppliers.
     */
    public accountsPayable: AccountsPayable;
    /**
     * Data from a linked accounting platform representing money owed to the business for sold goods or services.
     */
    public accountsReceivable: AccountsReceivable;
    /**
     * Retrieve banking data from linked bank accounts.
     */
    public cashFlow: CashFlow;
    /**
     * Create and manage your Codat companies.
     */
    public companies: Companies;
    /**
     * View company information fetched from the source platform.
     */
    public companyInfo: CompanyInfo;
    /**
     * Manage your companies' data connections.
     */
    public connections: Connections;
    /**
     * Match mutable accounting data with immutable banking data to increase confidence in financial data.
     */
    public dataIntegrity: DataIntegrity;
    /**
     * Downloadable reports
     */
    public excelReports: ExcelReports;
    /**
     * Endpoints to manage uploaded files.
     */
    public fileUpload: FileUpload;
    /**
     * Financial data and reports from a linked accounting platform.
     */
    public financials: Financials;
    /**
     * Debt and other liabilities.
     */
    public liabilities: Liabilities;
    /**
     * Control how data is retrieved from an integration.
     */
    public manageData: ManageData;
    /**
     * Retrieve standardized sales data from a linked commerce platform.
     */
    public sales: Sales;
    /**
     * Data from a linked accounting platform representing transactions.
     */
    public transactions: Transactions;

    private sdkConfiguration: SDKConfiguration;

    constructor(props?: SDKProps) {
        let serverURL = props?.serverURL;
        const serverIdx = props?.serverIdx ?? 0;

        if (!serverURL) {
            serverURL = ServerList[serverIdx];
        }

        const defaultClient = props?.defaultClient ?? axios.create({ baseURL: serverURL });
        let securityClient = defaultClient;

        if (props?.security) {
            let security: shared.Security = props.security;
            if (!(props.security instanceof utils.SpeakeasyBase)) {
                security = new shared.Security(props.security);
            }
            securityClient = utils.createSecurityClient(defaultClient, security);
        }

        this.sdkConfiguration = new SDKConfiguration({
            defaultClient: defaultClient,
            securityClient: securityClient,
            serverURL: serverURL,
        });

        this.accountingBankData = new AccountingBankData(this.sdkConfiguration);
        this.accountsPayable = new AccountsPayable(this.sdkConfiguration);
        this.accountsReceivable = new AccountsReceivable(this.sdkConfiguration);
        this.cashFlow = new CashFlow(this.sdkConfiguration);
        this.companies = new Companies(this.sdkConfiguration);
        this.companyInfo = new CompanyInfo(this.sdkConfiguration);
        this.connections = new Connections(this.sdkConfiguration);
        this.dataIntegrity = new DataIntegrity(this.sdkConfiguration);
        this.excelReports = new ExcelReports(this.sdkConfiguration);
        this.fileUpload = new FileUpload(this.sdkConfiguration);
        this.financials = new Financials(this.sdkConfiguration);
        this.liabilities = new Liabilities(this.sdkConfiguration);
        this.manageData = new ManageData(this.sdkConfiguration);
        this.sales = new Sales(this.sdkConfiguration);
        this.transactions = new Transactions(this.sdkConfiguration);
    }
}
