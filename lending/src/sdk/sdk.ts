/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import { AccountingBankData } from "./accountingbankdata";
import { AccountsPayable } from "./accountspayable";
import { AccountsReceivable } from "./accountsreceivable";
import { BankStatements } from "./bankstatements";
import { Companies } from "./companies";
import { CompanyInfo } from "./companyinfo";
import { Connections } from "./connections";
import { DataIntegrity } from "./dataintegrity";
import { ExcelReports } from "./excelreports";
import { FileUpload } from "./fileupload";
import { FinancialStatements } from "./financialstatements";
import { Liabilities } from "./liabilities";
import { ManageData } from "./managedata";
import * as errors from "./models/errors";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { Sales } from "./sales";
import { Transactions } from "./transactions";
import axios from "axios";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = [
    /**
     * Production
     */
    "https://api.codat.io",
] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
    /**
     * The security details required to authenticate the SDK
     */
    security?: shared.Security | (() => Promise<shared.Security>);
    /**
     * Allows overriding the default axios client used by the SDK
     */
    defaultClient?: AxiosInstance;

    /**
     * Allows overriding the default server used by the SDK
     */
    serverIdx?: number;

    /**
     * Allows overriding the default server URL used by the SDK
     */
    serverURL?: string;
    /**
     * Allows overriding the default retry config used by the SDK
     */
    retryConfig?: utils.RetryConfig;
};

export class SDKConfiguration {
    defaultClient: AxiosInstance;
    security?: shared.Security | (() => Promise<shared.Security>);
    serverURL: string;
    serverDefaults: any;
    language = "typescript";
    openapiDocVersion = "3.0.0";
    sdkVersion = "0.2.1";
    genVersion = "2.108.3";
    retryConfig?: utils.RetryConfig;
    public constructor(init?: Partial<SDKConfiguration>) {
        Object.assign(this, init);
    }
}

/**
 * Lending API: Our Lending API helps you make smarter credit decisions on small businesses by enabling you to pull your customers' latest data from accounting, banking, and commerce platforms they are already using. It also includes features to help providers verify the accuracy of data and process it more efficiently.
 *
 * @remarks
 *
 * The Lending API is built on top of the latest accounting, commerce, and banking data, providing you with the most important data points you need to get a full picture of SMB creditworthiness and make a comprehensive assessment of your customers.
 *
 * [Explore product](https://docs.codat.io/lending/overview) | [See OpenAPI spec](https://github.com/codatio/oas)
 *
 * ---
 *
 * ## Endpoints
 *
 * | Endpoints            | Description                                                                                                |
 * |:---------------------|:-----------------------------------------------------------------------------------------------------------|
 * | Companies            | Create and manage your SMB users' companies.                                                               |
 * | Connections          | Create new and manage existing data connections for a company.                                             |
 * | Company info         | View company profile from the source platform.                                                             |
 * | Accounts payable     | Data from a linked accounting platform representing money the business owes money to its suppliers.        |
 * | Accounts receivable  | Data from a linked accounting platform representing money owed to the business for sold goods or services. |
 * | Transactions         | Data from a linked accounting platform representing transactions.                                          |
 * | Financial statements | Financial data and reports from a linked accounting platform.                                              |
 * | Bank statements              | Retrieve banking data from linked bank accounts.                                                           |
 * | Sales                | Retrieve standardized sales data from a linked commerce platform.                                          |
 * | Liabilities          | Debt and other liabilities.                                                                                |
 * | Data integrity       | Match mutable accounting data with immutable banking data to increase confidence in financial data.        |
 * | Excel reports        | Download reports in Excel format.                                                                          |
 * | Categories           | Manage Codat's automatic account categorization functionality.                                             |
 * | Manage data          | Control how data is retrieved from an integration.                                                         |
 * | File upload          | Endpoints to manage uploaded files.                                                                        |
 */
export class CodatLending {
    /**
     * Access bank transactions from an accounting platform.
     */
    public accountingBankData: AccountingBankData;
    /**
     * Data from a linked accounting platform representing money the business owes money to its suppliers.
     */
    public accountsPayable: AccountsPayable;
    /**
     * Data from a linked accounting platform representing money owed to the business for sold goods or services.
     */
    public accountsReceivable: AccountsReceivable;
    /**
     * Retrieve banking data from linked bank accounts.
     */
    public bankStatements: BankStatements;
    /**
     * Create and manage your Codat companies.
     */
    public companies: Companies;
    /**
     * View company information fetched from the source platform.
     */
    public companyInfo: CompanyInfo;
    /**
     * Manage your companies' data connections.
     */
    public connections: Connections;
    /**
     * Match mutable accounting data with immutable banking data to increase confidence in financial data.
     */
    public dataIntegrity: DataIntegrity;
    /**
     * Downloadable reports
     */
    public excelReports: ExcelReports;
    /**
     * Endpoints to manage uploaded files.
     */
    public fileUpload: FileUpload;
    /**
     * Financial data and reports from a linked accounting platform.
     */
    public financialStatements: FinancialStatements;
    /**
     * Debt and other liabilities.
     */
    public liabilities: Liabilities;
    /**
     * Control how data is retrieved from an integration.
     */
    public manageData: ManageData;
    /**
     * Retrieve standardized sales data from a linked commerce platform.
     */
    public sales: Sales;
    /**
     * Data from a linked accounting platform representing transactions.
     */
    public transactions: Transactions;

    private sdkConfiguration: SDKConfiguration;

    constructor(props?: SDKProps) {
        let serverURL = props?.serverURL;
        const serverIdx = props?.serverIdx ?? 0;

        if (!serverURL) {
            serverURL = ServerList[serverIdx];
        }

        const defaultClient = props?.defaultClient ?? axios.create({ baseURL: serverURL });
        this.sdkConfiguration = new SDKConfiguration({
            defaultClient: defaultClient,
            security: props?.security,
            serverURL: serverURL,
            retryConfig: props?.retryConfig,
        });

        this.accountingBankData = new AccountingBankData(this.sdkConfiguration);
        this.accountsPayable = new AccountsPayable(this.sdkConfiguration);
        this.accountsReceivable = new AccountsReceivable(this.sdkConfiguration);
        this.bankStatements = new BankStatements(this.sdkConfiguration);
        this.companies = new Companies(this.sdkConfiguration);
        this.companyInfo = new CompanyInfo(this.sdkConfiguration);
        this.connections = new Connections(this.sdkConfiguration);
        this.dataIntegrity = new DataIntegrity(this.sdkConfiguration);
        this.excelReports = new ExcelReports(this.sdkConfiguration);
        this.fileUpload = new FileUpload(this.sdkConfiguration);
        this.financialStatements = new FinancialStatements(this.sdkConfiguration);
        this.liabilities = new Liabilities(this.sdkConfiguration);
        this.manageData = new ManageData(this.sdkConfiguration);
        this.sales = new Sales(this.sdkConfiguration);
        this.transactions = new Transactions(this.sdkConfiguration);
    }

    /**
     * Get company accounting profile
     *
     * @remarks
     * Gets the latest basic info for a company.
     */
    async getAccountingProfile(
        req: operations.GetAccountingProfileRequest,
        retries?: utils.RetryConfig,
        config?: AxiosRequestConfig
    ): Promise<operations.GetAccountingProfileResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetAccountingProfileRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/companies/{companyId}/data/info", req);
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        let globalSecurity = this.sdkConfiguration.security;
        if (typeof globalSecurity === "function") {
            globalSecurity = await globalSecurity();
        }
        if (!(globalSecurity instanceof utils.SpeakeasyBase)) {
            globalSecurity = new shared.Security(globalSecurity);
        }
        const properties = utils.parseSecurityProperties(globalSecurity);
        const headers = { ...config?.headers, ...properties.headers };
        headers["Accept"] = "application/json";

        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion} ${this.sdkConfiguration.openapiDocVersion}`;

        const globalRetryConfig = this.sdkConfiguration.retryConfig;
        let retryConfig: any = retries;
        if (!retryConfig) {
            if (globalRetryConfig) {
                retryConfig = globalRetryConfig;
            } else {
                retryConfig = new utils.RetryConfig(
                    "backoff",
                    new utils.BackoffStrategy(500, 60000, 1.5, 3600000),
                    true
                );
            }
        }
        const httpRes: AxiosResponse = await utils.Retry(() => {
            return client.request({
                validateStatus: () => true,
                url: url,
                method: "get",
                headers: headers,
                responseType: "arraybuffer",
                ...config,
            });
        }, new utils.Retries(retryConfig, ["408", "429", "5XX"]));

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetAccountingProfileResponse =
            new operations.GetAccountingProfileResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.accountingCompanyInfo = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.AccountingCompanyInfo
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case [401, 404, 409, 429].includes(httpRes?.status):
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.errorMessage = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.ErrorMessage
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }
}
