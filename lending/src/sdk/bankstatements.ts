/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { bankStatementsEndUploadSession } from "../funcs/bankStatementsEndUploadSession.js";
import { bankStatementsGetUploadConfiguration } from "../funcs/bankStatementsGetUploadConfiguration.js";
import { bankStatementsSetUploadConfiguration } from "../funcs/bankStatementsSetUploadConfiguration.js";
import { bankStatementsStartUploadSession } from "../funcs/bankStatementsStartUploadSession.js";
import { bankStatementsUploadBankStatementData } from "../funcs/bankStatementsUploadBankStatementData.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class BankStatements extends ClientSDK {
  /**
   * Get upload configuration
   *
   * @remarks
   * Use the *Get upload configuration* endpoint to view the existing bank statement upload configuration for the specified data connection.
   *
   * With this configuration, you set the source of the data you plan to upload, the ID of the account in third-party banking platform, and a provider ID, if required. This lets us determine the expected format of the data and any source-specific requirements.
   *
   * When you use the [*Upload data*](https://docs.codat.io/lending-api#/operations/upload-bank-statement-data) endpoint next, you must upload the data for the account you configured.
   */
  async getUploadConfiguration(
    request: operations.GetBankStatementUploadConfigurationRequest,
    options?: RequestOptions,
  ): Promise<shared.BankStatementUploadConfiguration> {
    return unwrapAsync(bankStatementsGetUploadConfiguration(
      this,
      request,
      options,
    ));
  }

  /**
   * Set upload configuration
   *
   * @remarks
   * Use the *Set upload configuration* endpoint to create bank statement upload configuration for the specified data connection.
   *
   * With this configuration, you set the source of the data you plan to upload, the ID of the account in third-party banking platform, and a provider ID, if required. This lets us determine the expected format of the data and any source-specific requirements.
   *
   * Each data connection can only have one configuration for each company and external account ID combination. You will receive a Bad Request response if you try to set it again.
   */
  async setUploadConfiguration(
    request: operations.SetBankStatementUploadConfigurationRequest,
    options?: RequestOptions,
  ): Promise<shared.BankStatementUploadConfiguration> {
    return unwrapAsync(bankStatementsSetUploadConfiguration(
      this,
      request,
      options,
    ));
  }

  /**
   * Start upload session
   *
   * @remarks
   * Use the *Start upload session* endpoint to initiate a bank statement upload session for a given company.
   *
   * A session is a one-time process that enables you to upload bank statements to Codat. It will time out after 90 minutes if no data is uploaded.
   *
   * You can only have one active session per data type at a time. You can complete or cancel a session using the [*End upload session*](https://docs.codat.io/lending-api#/operations/end-bank-statement-upload-session) endpoint.
   */
  async startUploadSession(
    request: operations.StartBankStatementUploadSessionRequest,
    options?: RequestOptions,
  ): Promise<shared.PullOperation> {
    return unwrapAsync(bankStatementsStartUploadSession(
      this,
      request,
      options,
    ));
  }

  /**
   * Upload data
   *
   * @remarks
   * During an active session, use the **Upload data* endpoint to uploads a page of bank accounts or bank transactions data to the session.
   *
   * Make sure you created configuration for the account using the [*Set upload configuration*](https://docs.codat.io/lending-api#/operations/set-bank-statement-upload-configuration) endpoint before attempting an upload.
   */
  async uploadBankStatementData(
    request: operations.UploadBankStatementDataRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(bankStatementsUploadBankStatementData(
      this,
      request,
      options,
    ));
  }

  /**
   * End upload session
   *
   * @remarks
   * Use the *End upload session* endpoint to finalize a bank statement upload session. Include a `status` in the request body to indicate if you want to cancel the processing of the dataset or trigger the ingestion and enrichment of the data.
   *
   * A session is a one-time process that enables you to upload bank statements to Codat. It will time out after 90 minutes if no data is uploaded.
   */
  async endUploadSession(
    request: operations.EndBankStatementUploadSessionRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(bankStatementsEndUploadSession(
      this,
      request,
      options,
    ));
  }
}
