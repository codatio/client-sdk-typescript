/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { accountsReceivableReportsGetAgedCreditors } from "../funcs/accountsReceivableReportsGetAgedCreditors.js";
import { accountsReceivableReportsGetAgedDebtors } from "../funcs/accountsReceivableReportsGetAgedDebtors.js";
import { accountsReceivableReportsIsAgedCreditorsAvailable } from "../funcs/accountsReceivableReportsIsAgedCreditorsAvailable.js";
import { accountsReceivableReportsIsAgedDebtorsAvailable } from "../funcs/accountsReceivableReportsIsAgedDebtorsAvailable.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class CodatLendingReports extends ClientSDK {
  /**
   * Aged debtors report available
   *
   * @remarks
   * Indicates whether the aged debtors report is available for the company.
   */
  async isAgedDebtorsAvailable(
    request: operations.IsAgedDebtorsReportAvailableRequest,
    options?: RequestOptions,
  ): Promise<boolean> {
    return unwrapAsync(accountsReceivableReportsIsAgedDebtorsAvailable(
      this,
      request,
      options,
    ));
  }

  /**
   * Aged debtors report
   *
   * @remarks
   * Returns aged debtors report for company that shows the total outstanding balance due from customers to the business over time.
   */
  async getAgedDebtors(
    request: operations.GetAccountingAgedDebtorsReportRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingAgedDebtorReport> {
    return unwrapAsync(accountsReceivableReportsGetAgedDebtors(
      this,
      request,
      options,
    ));
  }

  /**
   * Aged creditors report available
   *
   * @remarks
   * Indicates whether the aged creditor report is available for the company.
   */
  async isAgedCreditorsAvailable(
    request: operations.IsAgedCreditorsReportAvailableRequest,
    options?: RequestOptions,
  ): Promise<boolean> {
    return unwrapAsync(accountsReceivableReportsIsAgedCreditorsAvailable(
      this,
      request,
      options,
    ));
  }

  /**
   * Aged creditors report
   *
   * @remarks
   * Returns aged creditors report for company that shows the total balance owed by a business to its suppliers over time.
   */
  async getAgedCreditors(
    request: operations.GetAccountingAgedCreditorsReportRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingAgedCreditorReport> {
    return unwrapAsync(accountsReceivableReportsGetAgedCreditors(
      this,
      request,
      options,
    ));
  }
}
