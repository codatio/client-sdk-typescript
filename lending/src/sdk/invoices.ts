/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { accountsReceivableInvoicesDownloadAttachment } from "../funcs/accountsReceivableInvoicesDownloadAttachment.js";
import { accountsReceivableInvoicesDownloadPdf } from "../funcs/accountsReceivableInvoicesDownloadPdf.js";
import { accountsReceivableInvoicesGet } from "../funcs/accountsReceivableInvoicesGet.js";
import { accountsReceivableInvoicesGetAttachment } from "../funcs/accountsReceivableInvoicesGetAttachment.js";
import { accountsReceivableInvoicesList } from "../funcs/accountsReceivableInvoicesList.js";
import { accountsReceivableInvoicesListAttachments } from "../funcs/accountsReceivableInvoicesListAttachments.js";
import { accountsReceivableInvoicesListReconciled } from "../funcs/accountsReceivableInvoicesListReconciled.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Invoices extends ClientSDK {
  /**
   * List reconciled invoices
   *
   * @remarks
   * Gets a list of invoices linked to the corresponding banking transaction
   */
  async listReconciled(
    request: operations.ListReconciledInvoicesRequest,
    options?: RequestOptions,
  ): Promise<shared.EnhancedInvoicesReport> {
    return unwrapAsync(accountsReceivableInvoicesListReconciled(
      this,
      request,
      options,
    ));
  }

  /**
   * List invoices
   *
   * @remarks
   * The *List invoices* endpoint returns a list of [invoices](https://docs.codat.io/lending-api#/schemas/Invoice) for a given company's connection.
   *
   * [Invoices](https://docs.codat.io/lending-api#/schemas/Invoice) are itemized records of goods sold or services provided to a customer.
   *
   * Before using this endpoint, you must have [retrieved data for the company](https://docs.codat.io/lending-api#/operations/refresh-company-data).
   *
   * ### Useful queries
   *
   * - Outstanding invoices - `query = amountDue > 0`
   * - Invoices due after a certain date: `query = dueDate > 2021-01-28`
   *
   * [Read more about querying](https://docs.codat.io/using-the-api/querying).
   *
   * ### Tips and traps
   *
   * To access the `paymentAllocations` property, ensure that the `payments` data type is queued and cached in Codat before retrieving `invoices` from Codat's cache.
   */
  async list(
    request: operations.ListAccountingInvoicesRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingInvoices> {
    return unwrapAsync(accountsReceivableInvoicesList(
      this,
      request,
      options,
    ));
  }

  /**
   * Get invoice
   *
   * @remarks
   * The *Get invoice* endpoint returns a single invoice for a given invoiceId.
   *
   * [Invoices](https://docs.codat.io/lending-api#/schemas/Invoice) are itemized records of goods sold or services provided to a customer.
   *
   * Check out our [coverage explorer](https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=invoices) for integrations that support getting a specific invoice.
   *
   * Before using this endpoint, you must have [retrieved data for the company](https://docs.codat.io/lending-api#/operations/refresh-company-data).
   *
   * ### Tips and traps
   *
   * To access the `paymentAllocations` property, ensure that the `payments` data type is queued and cached in Codat before retrieving `invoices` from Codat's cache.
   */
  async get(
    request: operations.GetAccountingInvoiceRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingInvoice> {
    return unwrapAsync(accountsReceivableInvoicesGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Get invoice as PDF
   *
   * @remarks
   * Download invoice as a pdf.
   */
  async downloadPdf(
    request: operations.DownloadAccountingInvoicePdfRequest,
    options?: RequestOptions,
  ): Promise<ReadableStream<Uint8Array>> {
    return unwrapAsync(accountsReceivableInvoicesDownloadPdf(
      this,
      request,
      options,
    ));
  }

  /**
   * List invoice attachments
   *
   * @remarks
   * The *List invoice attachments* endpoint returns a list of attachments available to download for given `invoiceId`.
   *
   * [Invoices](https://docs.codat.io/lending-api#/schemas/Invoice) are itemized records of goods sold or services provided to a customer.
   *
   * Check out our [coverage explorer](https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=invoices) for integrations that support listing invoice attachments.
   */
  async listAttachments(
    request: operations.ListAccountingInvoiceAttachmentsRequest,
    options?: RequestOptions,
  ): Promise<shared.Attachments> {
    return unwrapAsync(accountsReceivableInvoicesListAttachments(
      this,
      request,
      options,
    ));
  }

  /**
   * Get invoice attachment
   *
   * @remarks
   * The *Get invoice attachment* endpoint returns a specific attachment for a given `invoiceId` and `attachmentId`.
   *
   * [Invoices](https://docs.codat.io/lending-api#/schemas/Invoice) are itemized records of goods sold or services provided to a customer.
   *
   * Check out our [coverage explorer](https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=invoices) for integrations that support getting an invoice attachment.
   */
  async getAttachment(
    request: operations.GetAccountingInvoiceAttachmentRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingAttachment> {
    return unwrapAsync(accountsReceivableInvoicesGetAttachment(
      this,
      request,
      options,
    ));
  }

  /**
   * Download invoice attachment
   *
   * @remarks
   * The *Download invoice attachment* endpoint downloads a specific attachment for a given `invoiceId` and `attachmentId`.
   *
   * [Invoices](https://docs.codat.io/lending-api#/schemas/Invoice) are itemized records of goods sold or services provided to a customer.
   *
   * Check out our [coverage explorer](https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=invoices) for integrations that support downloading an invoice attachment.
   */
  async downloadAttachment(
    request: operations.DownloadAccountingInvoiceAttachmentRequest,
    options?: RequestOptions,
  ): Promise<ReadableStream<Uint8Array>> {
    return unwrapAsync(accountsReceivableInvoicesDownloadAttachment(
      this,
      request,
      options,
    ));
  }
}
