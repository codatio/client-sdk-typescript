/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { transactionsTransfersGet } from "../funcs/transactionsTransfersGet.js";
import { transactionsTransfersList } from "../funcs/transactionsTransfersList.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Transfers extends ClientSDK {
  /**
   * List transfers
   *
   * @remarks
   * The *List transfers* endpoint returns a list of [transfers](https://docs.codat.io/lending-api#/schemas/Transfer) for a given company's connection.
   *
   * [Transfers](https://docs.codat.io/lending-api#/schemas/Transfer) record the movement of money between two bank accounts, or between a bank account and a nominal account.
   *
   * Before using this endpoint, you must have [retrieved data for the company](https://docs.codat.io/lending-api#/operations/refresh-company-data).
   */
  async list(
    request: operations.ListAccountingTransfersRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingTransfers> {
    return unwrapAsync(transactionsTransfersList(
      this,
      request,
      options,
    ));
  }

  /**
   * Get transfer
   *
   * @remarks
   * The *Get transfer* endpoint returns a single transfer for a given transferId.
   *
   * [Transfers](https://docs.codat.io/lending-api#/schemas/Transfer) record the movement of money between two bank accounts, or between a bank account and a nominal account.
   *
   * Check out our [coverage explorer](https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=transfers) for integrations that support getting a specific transfer.
   *
   * Before using this endpoint, you must have [retrieved data for the company](https://docs.codat.io/lending-api#/operations/refresh-company-data).
   */
  async get(
    request: operations.GetAccountingTransferRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingTransfer> {
    return unwrapAsync(transactionsTransfersGet(
      this,
      request,
      options,
    ));
  }
}
