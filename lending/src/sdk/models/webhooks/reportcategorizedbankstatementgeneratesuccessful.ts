/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as shared from "../shared/index.js";

export type ReportCategorizedBankStatementGenerateSuccessfulReportGenerationWebhook =
  {
    /**
     * Unique identifier of the event.
     */
    id?: string | undefined;
    /**
     * The type of event.
     */
    eventType?: string | undefined;
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    generatedDate?: string | undefined;
    payload?: shared.ReportGenerationPayload | undefined;
  };

/** @internal */
export const ReportCategorizedBankStatementGenerateSuccessfulReportGenerationWebhook$inboundSchema:
  z.ZodType<
    ReportCategorizedBankStatementGenerateSuccessfulReportGenerationWebhook,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    eventType: z.string().optional(),
    generatedDate: z.string().optional(),
    payload: shared.ReportGenerationPayload$inboundSchema.optional(),
  });

/** @internal */
export type ReportCategorizedBankStatementGenerateSuccessfulReportGenerationWebhook$Outbound =
  {
    id?: string | undefined;
    eventType?: string | undefined;
    generatedDate?: string | undefined;
    payload?: shared.ReportGenerationPayload$Outbound | undefined;
  };

/** @internal */
export const ReportCategorizedBankStatementGenerateSuccessfulReportGenerationWebhook$outboundSchema:
  z.ZodType<
    ReportCategorizedBankStatementGenerateSuccessfulReportGenerationWebhook$Outbound,
    z.ZodTypeDef,
    ReportCategorizedBankStatementGenerateSuccessfulReportGenerationWebhook
  > = z.object({
    id: z.string().optional(),
    eventType: z.string().optional(),
    generatedDate: z.string().optional(),
    payload: shared.ReportGenerationPayload$outboundSchema.optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReportCategorizedBankStatementGenerateSuccessfulReportGenerationWebhook$ {
  /** @deprecated use `ReportCategorizedBankStatementGenerateSuccessfulReportGenerationWebhook$inboundSchema` instead. */
  export const inboundSchema =
    ReportCategorizedBankStatementGenerateSuccessfulReportGenerationWebhook$inboundSchema;
  /** @deprecated use `ReportCategorizedBankStatementGenerateSuccessfulReportGenerationWebhook$outboundSchema` instead. */
  export const outboundSchema =
    ReportCategorizedBankStatementGenerateSuccessfulReportGenerationWebhook$outboundSchema;
  /** @deprecated use `ReportCategorizedBankStatementGenerateSuccessfulReportGenerationWebhook$Outbound` instead. */
  export type Outbound =
    ReportCategorizedBankStatementGenerateSuccessfulReportGenerationWebhook$Outbound;
}
