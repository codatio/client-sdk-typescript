/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AccountingCustomerRef = {
  /**
   * `id` from the Customers data type
   */
  id: string;
  /**
   * `customerName` from the Customer data type
   */
  companyName?: string | null | undefined;
};

/** @internal */
export const AccountingCustomerRef$inboundSchema: z.ZodType<
  AccountingCustomerRef,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  companyName: z.nullable(z.string()).optional(),
});

/** @internal */
export type AccountingCustomerRef$Outbound = {
  id: string;
  companyName?: string | null | undefined;
};

/** @internal */
export const AccountingCustomerRef$outboundSchema: z.ZodType<
  AccountingCustomerRef$Outbound,
  z.ZodTypeDef,
  AccountingCustomerRef
> = z.object({
  id: z.string(),
  companyName: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingCustomerRef$ {
  /** @deprecated use `AccountingCustomerRef$inboundSchema` instead. */
  export const inboundSchema = AccountingCustomerRef$inboundSchema;
  /** @deprecated use `AccountingCustomerRef$outboundSchema` instead. */
  export const outboundSchema = AccountingCustomerRef$outboundSchema;
  /** @deprecated use `AccountingCustomerRef$Outbound` instead. */
  export type Outbound = AccountingCustomerRef$Outbound;
}

export function accountingCustomerRefToJSON(
  accountingCustomerRef: AccountingCustomerRef,
): string {
  return JSON.stringify(
    AccountingCustomerRef$outboundSchema.parse(accountingCustomerRef),
  );
}

export function accountingCustomerRefFromJSON(
  jsonString: string,
): SafeParseResult<AccountingCustomerRef, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingCustomerRef$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingCustomerRef' from JSON`,
  );
}
