/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Decimal as Decimal$ } from "../../types/decimal.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  EnhancedReportAccountCategory,
  EnhancedReportAccountCategory$inboundSchema,
  EnhancedReportAccountCategory$Outbound,
  EnhancedReportAccountCategory$outboundSchema,
} from "./enhancedreportaccountcategory.js";
import {
  EnhancedReportInfo,
  EnhancedReportInfo$inboundSchema,
  EnhancedReportInfo$Outbound,
  EnhancedReportInfo$outboundSchema,
} from "./enhancedreportinfo.js";

export type ReportItem = {
  /**
   * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
   *
   * @remarks
   *
   * ```
   * 2020-10-08T22:40:50Z
   * 2021-01-01T00:00:00
   * ```
   *
   * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
   *
   * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
   * - Unqualified local time: `2021-11-15T01:00:00`
   * - UTC time offsets: `2021-11-15T01:00:00-05:00`
   *
   * > Time zones
   * >
   * > Not all dates from Codat will contain information about time zones.
   * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
   */
  date?: string | undefined;
  /**
   * Balance of the account as reported on the profit and loss or Balance sheet.
   */
  balance?: Decimal$ | number | undefined;
  /**
   * Name of the account.
   */
  accountName?: string | undefined;
  /**
   * The unique account ID.
   */
  accountId?: string | undefined;
  accountCategory?: EnhancedReportAccountCategory | undefined;
};

export type EnhancedFinancialReport = {
  reportInfo?: EnhancedReportInfo | undefined;
  /**
   * An array of report items.
   */
  reportItems?: Array<ReportItem> | undefined;
};

/** @internal */
export const ReportItem$inboundSchema: z.ZodType<
  ReportItem,
  z.ZodTypeDef,
  unknown
> = z.object({
  date: z.string().optional(),
  balance: z.number().transform(v => new Decimal$(v)).optional(),
  accountName: z.string().optional(),
  accountId: z.string().optional(),
  accountCategory: EnhancedReportAccountCategory$inboundSchema.optional(),
});

/** @internal */
export type ReportItem$Outbound = {
  date?: string | undefined;
  balance?: number | undefined;
  accountName?: string | undefined;
  accountId?: string | undefined;
  accountCategory?: EnhancedReportAccountCategory$Outbound | undefined;
};

/** @internal */
export const ReportItem$outboundSchema: z.ZodType<
  ReportItem$Outbound,
  z.ZodTypeDef,
  ReportItem
> = z.object({
  date: z.string().optional(),
  balance: z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
    typeof v === "number" ? v : v.toNumber()
  ).optional(),
  accountName: z.string().optional(),
  accountId: z.string().optional(),
  accountCategory: EnhancedReportAccountCategory$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReportItem$ {
  /** @deprecated use `ReportItem$inboundSchema` instead. */
  export const inboundSchema = ReportItem$inboundSchema;
  /** @deprecated use `ReportItem$outboundSchema` instead. */
  export const outboundSchema = ReportItem$outboundSchema;
  /** @deprecated use `ReportItem$Outbound` instead. */
  export type Outbound = ReportItem$Outbound;
}

export function reportItemToJSON(reportItem: ReportItem): string {
  return JSON.stringify(ReportItem$outboundSchema.parse(reportItem));
}

export function reportItemFromJSON(
  jsonString: string,
): SafeParseResult<ReportItem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReportItem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReportItem' from JSON`,
  );
}

/** @internal */
export const EnhancedFinancialReport$inboundSchema: z.ZodType<
  EnhancedFinancialReport,
  z.ZodTypeDef,
  unknown
> = z.object({
  reportInfo: EnhancedReportInfo$inboundSchema.optional(),
  reportItems: z.array(z.lazy(() => ReportItem$inboundSchema)).optional(),
});

/** @internal */
export type EnhancedFinancialReport$Outbound = {
  reportInfo?: EnhancedReportInfo$Outbound | undefined;
  reportItems?: Array<ReportItem$Outbound> | undefined;
};

/** @internal */
export const EnhancedFinancialReport$outboundSchema: z.ZodType<
  EnhancedFinancialReport$Outbound,
  z.ZodTypeDef,
  EnhancedFinancialReport
> = z.object({
  reportInfo: EnhancedReportInfo$outboundSchema.optional(),
  reportItems: z.array(z.lazy(() => ReportItem$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnhancedFinancialReport$ {
  /** @deprecated use `EnhancedFinancialReport$inboundSchema` instead. */
  export const inboundSchema = EnhancedFinancialReport$inboundSchema;
  /** @deprecated use `EnhancedFinancialReport$outboundSchema` instead. */
  export const outboundSchema = EnhancedFinancialReport$outboundSchema;
  /** @deprecated use `EnhancedFinancialReport$Outbound` instead. */
  export type Outbound = EnhancedFinancialReport$Outbound;
}

export function enhancedFinancialReportToJSON(
  enhancedFinancialReport: EnhancedFinancialReport,
): string {
  return JSON.stringify(
    EnhancedFinancialReport$outboundSchema.parse(enhancedFinancialReport),
  );
}

export function enhancedFinancialReportFromJSON(
  jsonString: string,
): SafeParseResult<EnhancedFinancialReport, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnhancedFinancialReport$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnhancedFinancialReport' from JSON`,
  );
}
