/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * A key for a Codat data type.
 */
export const StartUploadSessionRequestDataType = {
  BankingAccounts: "banking-accounts",
  BankingTransactions: "banking-transactions",
} as const;
/**
 * A key for a Codat data type.
 */
export type StartUploadSessionRequestDataType = ClosedEnum<
  typeof StartUploadSessionRequestDataType
>;

export type StartUploadSessionRequest = {
  /**
   * A key for a Codat data type.
   */
  dataType?: StartUploadSessionRequestDataType | undefined;
};

/** @internal */
export const StartUploadSessionRequestDataType$inboundSchema: z.ZodNativeEnum<
  typeof StartUploadSessionRequestDataType
> = z.nativeEnum(StartUploadSessionRequestDataType);

/** @internal */
export const StartUploadSessionRequestDataType$outboundSchema: z.ZodNativeEnum<
  typeof StartUploadSessionRequestDataType
> = StartUploadSessionRequestDataType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StartUploadSessionRequestDataType$ {
  /** @deprecated use `StartUploadSessionRequestDataType$inboundSchema` instead. */
  export const inboundSchema = StartUploadSessionRequestDataType$inboundSchema;
  /** @deprecated use `StartUploadSessionRequestDataType$outboundSchema` instead. */
  export const outboundSchema =
    StartUploadSessionRequestDataType$outboundSchema;
}

/** @internal */
export const StartUploadSessionRequest$inboundSchema: z.ZodType<
  StartUploadSessionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  dataType: StartUploadSessionRequestDataType$inboundSchema.optional(),
});

/** @internal */
export type StartUploadSessionRequest$Outbound = {
  dataType?: string | undefined;
};

/** @internal */
export const StartUploadSessionRequest$outboundSchema: z.ZodType<
  StartUploadSessionRequest$Outbound,
  z.ZodTypeDef,
  StartUploadSessionRequest
> = z.object({
  dataType: StartUploadSessionRequestDataType$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StartUploadSessionRequest$ {
  /** @deprecated use `StartUploadSessionRequest$inboundSchema` instead. */
  export const inboundSchema = StartUploadSessionRequest$inboundSchema;
  /** @deprecated use `StartUploadSessionRequest$outboundSchema` instead. */
  export const outboundSchema = StartUploadSessionRequest$outboundSchema;
  /** @deprecated use `StartUploadSessionRequest$Outbound` instead. */
  export type Outbound = StartUploadSessionRequest$Outbound;
}

export function startUploadSessionRequestToJSON(
  startUploadSessionRequest: StartUploadSessionRequest,
): string {
  return JSON.stringify(
    StartUploadSessionRequest$outboundSchema.parse(startUploadSessionRequest),
  );
}

export function startUploadSessionRequestFromJSON(
  jsonString: string,
): SafeParseResult<StartUploadSessionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StartUploadSessionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StartUploadSessionRequest' from JSON`,
  );
}
