/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Decimal as Decimal$ } from "../../types/decimal.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TransactionCategory = {
  /**
   * Returns the aggregate confidence of the suggested category for the transaction. The value is between 0 and 100.
   */
  confidence?: Decimal$ | number | undefined;
  /**
   * An ordered array of category level confidences where each element is the confidence of the corresponding item in the `levels` array.
   */
  confidences?: Array<Decimal$ | number> | undefined;
  /**
   * The suggested category is an ordered array of category levels where each element (or level) is a subcategory of the previous element (or level).
   */
  levels?: Array<string> | undefined;
};

/** @internal */
export const TransactionCategory$inboundSchema: z.ZodType<
  TransactionCategory,
  z.ZodTypeDef,
  unknown
> = z.object({
  confidence: z.number().transform(v => new Decimal$(v)).optional(),
  confidences: z.array(z.number().transform(v => new Decimal$(v))).optional(),
  levels: z.array(z.string()).optional(),
});

/** @internal */
export type TransactionCategory$Outbound = {
  confidence?: number | undefined;
  confidences?: Array<number> | undefined;
  levels?: Array<string> | undefined;
};

/** @internal */
export const TransactionCategory$outboundSchema: z.ZodType<
  TransactionCategory$Outbound,
  z.ZodTypeDef,
  TransactionCategory
> = z.object({
  confidence: z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
    typeof v === "number" ? v : v.toNumber()
  ).optional(),
  confidences: z.array(
    z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
      typeof v === "number" ? v : v.toNumber()
    ),
  ).optional(),
  levels: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionCategory$ {
  /** @deprecated use `TransactionCategory$inboundSchema` instead. */
  export const inboundSchema = TransactionCategory$inboundSchema;
  /** @deprecated use `TransactionCategory$outboundSchema` instead. */
  export const outboundSchema = TransactionCategory$outboundSchema;
  /** @deprecated use `TransactionCategory$Outbound` instead. */
  export type Outbound = TransactionCategory$Outbound;
}

export function transactionCategoryToJSON(
  transactionCategory: TransactionCategory,
): string {
  return JSON.stringify(
    TransactionCategory$outboundSchema.parse(transactionCategory),
  );
}

export function transactionCategoryFromJSON(
  jsonString: string,
): SafeParseResult<TransactionCategory, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionCategory$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionCategory' from JSON`,
  );
}
