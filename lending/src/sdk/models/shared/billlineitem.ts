/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { Decimal as Decimal$ } from "../../types/decimal.js";
import { ClosedEnum } from "../../types/enums.js";
import {
  AccountRef,
  AccountRef$inboundSchema,
  AccountRef$Outbound,
  AccountRef$outboundSchema,
} from "./accountref.js";
import {
  AccountsPayableTracking,
  AccountsPayableTracking$inboundSchema,
  AccountsPayableTracking$Outbound,
  AccountsPayableTracking$outboundSchema,
} from "./accountspayabletracking.js";
import {
  PropertieItemRef,
  PropertieItemRef$inboundSchema,
  PropertieItemRef$Outbound,
  PropertieItemRef$outboundSchema,
} from "./propertieitemref.js";
import {
  TaxRateRef,
  TaxRateRef$inboundSchema,
  TaxRateRef$Outbound,
  TaxRateRef$outboundSchema,
} from "./taxrateref.js";
import {
  TrackingCategoryRef,
  TrackingCategoryRef$inboundSchema,
  TrackingCategoryRef$Outbound,
  TrackingCategoryRef$outboundSchema,
} from "./trackingcategoryref.js";

/**
 * Allowed name of the 'dataType'.
 */
export const BillLineItemDataType = {
  PurchaseOrders: "purchaseOrders",
  Bills: "bills",
} as const;
/**
 * Allowed name of the 'dataType'.
 */
export type BillLineItemDataType = ClosedEnum<typeof BillLineItemDataType>;

/**
 * Reference to the purchase order line this line was generated from.
 */
export type RecordLineReference = {
  /**
   * 'id' of the underlying record.
   */
  id?: string | undefined;
  /**
   * Allowed name of the 'dataType'.
   */
  dataType?: BillLineItemDataType | undefined;
  /**
   * Line number of the underlying record.
   */
  lineNumber?: string | undefined;
};

export type BillLineItem = {
  /**
   * The bill line's number.
   */
  lineNumber?: string | null | undefined;
  /**
   * Friendly name of the goods or services received.
   */
  description?: string | null | undefined;
  /**
   * Price of each unit of goods or services.
   */
  unitAmount: Decimal$ | number;
  /**
   * Number of units of goods or services received.
   */
  quantity: Decimal$ | number;
  /**
   * The measurement which defines a unit for this item (e.g. 'kilogram', 'litre').
   */
  unitOfMeasurement?: string | null | undefined;
  /**
   * Numerical value of any discounts applied.
   *
   * @remarks
   *
   * Do not use to apply discounts in Oracle NetSuiteâ€”see Oracle NetSuite integration reference.
   */
  discountAmount?: Decimal$ | number | null | undefined;
  /**
   * Amount of the line, inclusive of discounts but exclusive of tax.
   */
  subTotal?: Decimal$ | number | null | undefined;
  /**
   * Amount of tax for the line.
   */
  taxAmount?: Decimal$ | number | null | undefined;
  /**
   * Total amount of the line, including tax.
   */
  totalAmount?: Decimal$ | number | null | undefined;
  /**
   * Percentage rate of any discount applied to the bill.
   */
  discountPercentage?: Decimal$ | number | null | undefined;
  /**
   * Data types that reference an account, for example bill and invoice line items, use an accountRef that includes the ID and name of the linked account.
   */
  accountRef?: AccountRef | undefined;
  /**
   * Data types that reference a tax rate, for example invoice and bill line items, use a taxRateRef that includes the ID and name of the linked tax rate.
   *
   * @remarks
   *
   * Found on:
   *
   * - Bill line items
   * - Bill Credit Note line items
   * - Credit Note line items
   * - Direct incomes line items
   * - Invoice line items
   * - Items
   */
  taxRateRef?: TaxRateRef | undefined;
  /**
   * Reference to the item the line is linked to.
   */
  itemRef?: PropertieItemRef | undefined;
  purchaseOrderLineRef?: RecordLineReference | undefined;
  /**
   * Collection of categories against which this item is tracked.
   */
  trackingCategoryRefs?: Array<TrackingCategoryRef> | null | undefined;
  /**
   * Categories, and a project and customer, against which the item is tracked.
   */
  tracking?: AccountsPayableTracking | undefined;
  /**
   * The bill is a direct cost if `True`.
   */
  isDirectCost?: boolean | undefined;
};

/** @internal */
export const BillLineItemDataType$inboundSchema: z.ZodNativeEnum<
  typeof BillLineItemDataType
> = z.nativeEnum(BillLineItemDataType);

/** @internal */
export const BillLineItemDataType$outboundSchema: z.ZodNativeEnum<
  typeof BillLineItemDataType
> = BillLineItemDataType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BillLineItemDataType$ {
  /** @deprecated use `BillLineItemDataType$inboundSchema` instead. */
  export const inboundSchema = BillLineItemDataType$inboundSchema;
  /** @deprecated use `BillLineItemDataType$outboundSchema` instead. */
  export const outboundSchema = BillLineItemDataType$outboundSchema;
}

/** @internal */
export const RecordLineReference$inboundSchema: z.ZodType<
  RecordLineReference,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  dataType: BillLineItemDataType$inboundSchema.optional(),
  lineNumber: z.string().optional(),
});

/** @internal */
export type RecordLineReference$Outbound = {
  id?: string | undefined;
  dataType?: string | undefined;
  lineNumber?: string | undefined;
};

/** @internal */
export const RecordLineReference$outboundSchema: z.ZodType<
  RecordLineReference$Outbound,
  z.ZodTypeDef,
  RecordLineReference
> = z.object({
  id: z.string().optional(),
  dataType: BillLineItemDataType$outboundSchema.optional(),
  lineNumber: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecordLineReference$ {
  /** @deprecated use `RecordLineReference$inboundSchema` instead. */
  export const inboundSchema = RecordLineReference$inboundSchema;
  /** @deprecated use `RecordLineReference$outboundSchema` instead. */
  export const outboundSchema = RecordLineReference$outboundSchema;
  /** @deprecated use `RecordLineReference$Outbound` instead. */
  export type Outbound = RecordLineReference$Outbound;
}

/** @internal */
export const BillLineItem$inboundSchema: z.ZodType<
  BillLineItem,
  z.ZodTypeDef,
  unknown
> = z.object({
  lineNumber: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  unitAmount: z.number().transform(v => new Decimal$(v)),
  quantity: z.number().transform(v => new Decimal$(v)),
  unitOfMeasurement: z.nullable(z.string()).optional(),
  discountAmount: z.nullable(z.number().transform(v => new Decimal$(v)))
    .optional(),
  subTotal: z.nullable(z.number().transform(v => new Decimal$(v))).optional(),
  taxAmount: z.nullable(z.number().transform(v => new Decimal$(v))).optional(),
  totalAmount: z.nullable(z.number().transform(v => new Decimal$(v)))
    .optional(),
  discountPercentage: z.nullable(z.number().transform(v => new Decimal$(v)))
    .optional(),
  accountRef: AccountRef$inboundSchema.optional(),
  taxRateRef: TaxRateRef$inboundSchema.optional(),
  itemRef: PropertieItemRef$inboundSchema.optional(),
  purchaseOrderLineRef: z.lazy(() => RecordLineReference$inboundSchema)
    .optional(),
  trackingCategoryRefs: z.nullable(z.array(TrackingCategoryRef$inboundSchema))
    .optional(),
  tracking: AccountsPayableTracking$inboundSchema.optional(),
  isDirectCost: z.boolean().optional(),
});

/** @internal */
export type BillLineItem$Outbound = {
  lineNumber?: string | null | undefined;
  description?: string | null | undefined;
  unitAmount: number;
  quantity: number;
  unitOfMeasurement?: string | null | undefined;
  discountAmount?: number | null | undefined;
  subTotal?: number | null | undefined;
  taxAmount?: number | null | undefined;
  totalAmount?: number | null | undefined;
  discountPercentage?: number | null | undefined;
  accountRef?: AccountRef$Outbound | undefined;
  taxRateRef?: TaxRateRef$Outbound | undefined;
  itemRef?: PropertieItemRef$Outbound | undefined;
  purchaseOrderLineRef?: RecordLineReference$Outbound | undefined;
  trackingCategoryRefs?: Array<TrackingCategoryRef$Outbound> | null | undefined;
  tracking?: AccountsPayableTracking$Outbound | undefined;
  isDirectCost?: boolean | undefined;
};

/** @internal */
export const BillLineItem$outboundSchema: z.ZodType<
  BillLineItem$Outbound,
  z.ZodTypeDef,
  BillLineItem
> = z.object({
  lineNumber: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  unitAmount: z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
    typeof v === "number" ? v : v.toNumber()
  ),
  quantity: z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
    typeof v === "number" ? v : v.toNumber()
  ),
  unitOfMeasurement: z.nullable(z.string()).optional(),
  discountAmount: z.nullable(
    z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
      typeof v === "number" ? v : v.toNumber()
    ),
  ).optional(),
  subTotal: z.nullable(
    z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
      typeof v === "number" ? v : v.toNumber()
    ),
  ).optional(),
  taxAmount: z.nullable(
    z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
      typeof v === "number" ? v : v.toNumber()
    ),
  ).optional(),
  totalAmount: z.nullable(
    z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
      typeof v === "number" ? v : v.toNumber()
    ),
  ).optional(),
  discountPercentage: z.nullable(
    z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
      typeof v === "number" ? v : v.toNumber()
    ),
  ).optional(),
  accountRef: AccountRef$outboundSchema.optional(),
  taxRateRef: TaxRateRef$outboundSchema.optional(),
  itemRef: PropertieItemRef$outboundSchema.optional(),
  purchaseOrderLineRef: z.lazy(() => RecordLineReference$outboundSchema)
    .optional(),
  trackingCategoryRefs: z.nullable(z.array(TrackingCategoryRef$outboundSchema))
    .optional(),
  tracking: AccountsPayableTracking$outboundSchema.optional(),
  isDirectCost: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BillLineItem$ {
  /** @deprecated use `BillLineItem$inboundSchema` instead. */
  export const inboundSchema = BillLineItem$inboundSchema;
  /** @deprecated use `BillLineItem$outboundSchema` instead. */
  export const outboundSchema = BillLineItem$outboundSchema;
  /** @deprecated use `BillLineItem$Outbound` instead. */
  export type Outbound = BillLineItem$Outbound;
}
