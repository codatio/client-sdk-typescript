/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type BankFeedBankAccountMapping = {
  /**
   * Unique ID for the source account
   */
  sourceAccountId: string;
  /**
   * Unique ID for the target account
   */
  targetAccountId?: string | null | undefined;
};

/** @internal */
export const BankFeedBankAccountMapping$inboundSchema: z.ZodType<
  BankFeedBankAccountMapping,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourceAccountId: z.string(),
  targetAccountId: z.nullable(z.string()).optional(),
});

/** @internal */
export type BankFeedBankAccountMapping$Outbound = {
  sourceAccountId: string;
  targetAccountId?: string | null | undefined;
};

/** @internal */
export const BankFeedBankAccountMapping$outboundSchema: z.ZodType<
  BankFeedBankAccountMapping$Outbound,
  z.ZodTypeDef,
  BankFeedBankAccountMapping
> = z.object({
  sourceAccountId: z.string(),
  targetAccountId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BankFeedBankAccountMapping$ {
  /** @deprecated use `BankFeedBankAccountMapping$inboundSchema` instead. */
  export const inboundSchema = BankFeedBankAccountMapping$inboundSchema;
  /** @deprecated use `BankFeedBankAccountMapping$outboundSchema` instead. */
  export const outboundSchema = BankFeedBankAccountMapping$outboundSchema;
  /** @deprecated use `BankFeedBankAccountMapping$Outbound` instead. */
  export type Outbound = BankFeedBankAccountMapping$Outbound;
}

export function bankFeedBankAccountMappingToJSON(
  bankFeedBankAccountMapping: BankFeedBankAccountMapping,
): string {
  return JSON.stringify(
    BankFeedBankAccountMapping$outboundSchema.parse(bankFeedBankAccountMapping),
  );
}

export function bankFeedBankAccountMappingFromJSON(
  jsonString: string,
): SafeParseResult<BankFeedBankAccountMapping, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BankFeedBankAccountMapping$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BankFeedBankAccountMapping' from JSON`,
  );
}
