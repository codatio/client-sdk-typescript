/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CommerceReportError = {
  /**
   * Message returned by error.
   */
  message?: string | undefined;
  /**
   * The type of error.
   */
  type?: string | undefined;
  /**
   * Additional details on the error.
   */
  details?: { [k: string]: Array<string> } | undefined;
};

/** @internal */
export const CommerceReportError$inboundSchema: z.ZodType<
  CommerceReportError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string().optional(),
  type: z.string().optional(),
  details: z.record(z.array(z.string())).optional(),
});

/** @internal */
export type CommerceReportError$Outbound = {
  message?: string | undefined;
  type?: string | undefined;
  details?: { [k: string]: Array<string> } | undefined;
};

/** @internal */
export const CommerceReportError$outboundSchema: z.ZodType<
  CommerceReportError$Outbound,
  z.ZodTypeDef,
  CommerceReportError
> = z.object({
  message: z.string().optional(),
  type: z.string().optional(),
  details: z.record(z.array(z.string())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CommerceReportError$ {
  /** @deprecated use `CommerceReportError$inboundSchema` instead. */
  export const inboundSchema = CommerceReportError$inboundSchema;
  /** @deprecated use `CommerceReportError$outboundSchema` instead. */
  export const outboundSchema = CommerceReportError$outboundSchema;
  /** @deprecated use `CommerceReportError$Outbound` instead. */
  export type Outbound = CommerceReportError$Outbound;
}

export function commerceReportErrorToJSON(
  commerceReportError: CommerceReportError,
): string {
  return JSON.stringify(
    CommerceReportError$outboundSchema.parse(commerceReportError),
  );
}

export function commerceReportErrorFromJSON(
  jsonString: string,
): SafeParseResult<CommerceReportError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CommerceReportError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CommerceReportError' from JSON`,
  );
}
