/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { blobLikeSchema } from "../../types/blobs.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CodatFile,
  CodatFile$inboundSchema,
  CodatFile$Outbound,
  CodatFile$outboundSchema,
} from "./codatfile.js";

export type FileUpload = {
  /**
   * The file to be uploaded as an attachment.
   */
  file: CodatFile | Blob;
};

/** @internal */
export const FileUpload$inboundSchema: z.ZodType<
  FileUpload,
  z.ZodTypeDef,
  unknown
> = z.object({
  file: CodatFile$inboundSchema,
});

/** @internal */
export type FileUpload$Outbound = {
  file: CodatFile$Outbound | Blob;
};

/** @internal */
export const FileUpload$outboundSchema: z.ZodType<
  FileUpload$Outbound,
  z.ZodTypeDef,
  FileUpload
> = z.object({
  file: CodatFile$outboundSchema.or(blobLikeSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileUpload$ {
  /** @deprecated use `FileUpload$inboundSchema` instead. */
  export const inboundSchema = FileUpload$inboundSchema;
  /** @deprecated use `FileUpload$outboundSchema` instead. */
  export const outboundSchema = FileUpload$outboundSchema;
  /** @deprecated use `FileUpload$Outbound` instead. */
  export type Outbound = FileUpload$Outbound;
}

export function fileUploadToJSON(fileUpload: FileUpload): string {
  return JSON.stringify(FileUpload$outboundSchema.parse(fileUpload));
}

export function fileUploadFromJSON(
  jsonString: string,
): SafeParseResult<FileUpload, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FileUpload$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FileUpload' from JSON`,
  );
}
