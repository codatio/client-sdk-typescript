/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  ProductVariant,
  ProductVariant$inboundSchema,
  ProductVariant$Outbound,
  ProductVariant$outboundSchema,
} from "./productvariant.js";
import {
  SupplementalData,
  SupplementalData$inboundSchema,
  SupplementalData$Outbound,
  SupplementalData$outboundSchema,
} from "./supplementaldata.js";

/**
 * A Product is an item in the company's inventory, and includes information about the price and quantity of all products, and variants thereof, available for sale.
 *
 * @remarks
 *
 * Explore our [data coverage](https://knowledge.codat.io/supported-features/commerce?view=tab-by-data-type&dataType=commerce-products) for this data type.
 */
export type CommerceProduct = {
  /**
   * A unique, persistent identifier for this record
   */
  id: string;
  /**
   * Name of the product in the commerce or POS system
   */
  name?: string | undefined;
  /**
   * Description of the product recorded in the commerce or point of sale platform.
   */
  description?: string | undefined;
  /**
   * Retail category that the product is assigned to e.g. `Hardware`.
   */
  categorization?: string | undefined;
  /**
   * Whether the product represents a gift card or voucher that
   *
   * @remarks
   * can be redeemed in the commerce or POS platform.
   */
  isGiftCard?: boolean | undefined;
  variants?: Array<ProductVariant> | undefined;
  /**
   * Supplemental data is additional data you can include in our standard data types.
   *
   * @remarks
   *
   * It is referenced as a configured dynamic key value pair that is unique to the accounting software. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
   */
  supplementalData?: SupplementalData | undefined;
};

/** @internal */
export const CommerceProduct$inboundSchema: z.ZodType<
  CommerceProduct,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string().optional(),
  description: z.string().optional(),
  categorization: z.string().optional(),
  isGiftCard: z.boolean().optional(),
  variants: z.array(ProductVariant$inboundSchema).optional(),
  supplementalData: SupplementalData$inboundSchema.optional(),
});

/** @internal */
export type CommerceProduct$Outbound = {
  id: string;
  name?: string | undefined;
  description?: string | undefined;
  categorization?: string | undefined;
  isGiftCard?: boolean | undefined;
  variants?: Array<ProductVariant$Outbound> | undefined;
  supplementalData?: SupplementalData$Outbound | undefined;
};

/** @internal */
export const CommerceProduct$outboundSchema: z.ZodType<
  CommerceProduct$Outbound,
  z.ZodTypeDef,
  CommerceProduct
> = z.object({
  id: z.string(),
  name: z.string().optional(),
  description: z.string().optional(),
  categorization: z.string().optional(),
  isGiftCard: z.boolean().optional(),
  variants: z.array(ProductVariant$outboundSchema).optional(),
  supplementalData: SupplementalData$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CommerceProduct$ {
  /** @deprecated use `CommerceProduct$inboundSchema` instead. */
  export const inboundSchema = CommerceProduct$inboundSchema;
  /** @deprecated use `CommerceProduct$outboundSchema` instead. */
  export const outboundSchema = CommerceProduct$outboundSchema;
  /** @deprecated use `CommerceProduct$Outbound` instead. */
  export type Outbound = CommerceProduct$Outbound;
}
