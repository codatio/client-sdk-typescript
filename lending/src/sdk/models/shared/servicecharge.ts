/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Decimal as Decimal$ } from "../../types/decimal.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ServiceChargeType,
  ServiceChargeType$inboundSchema,
  ServiceChargeType$outboundSchema,
} from "./servicechargetype.js";
import {
  TaxComponentAllocation,
  TaxComponentAllocation$inboundSchema,
  TaxComponentAllocation$Outbound,
  TaxComponentAllocation$outboundSchema,
} from "./taxcomponentallocation.js";

export type ServiceCharge = {
  /**
   * Service charges for this order.
   */
  description?: string | undefined;
  /**
   * Total amount of the service charge, including tax.
   */
  totalAmount?: Decimal$ | number | undefined;
  /**
   * Percentage rate (from 0 to 100) of any tax applied to the service charge.
   */
  taxPercentage?: Decimal$ | number | undefined;
  /**
   * Amount of the service charge that is tax.
   */
  taxAmount?: Decimal$ | number | undefined;
  /**
   * Taxes breakdown as applied to service charges.
   */
  taxes?: Array<TaxComponentAllocation> | undefined;
  /**
   * The number of times the charge is charged.
   */
  quantity?: number | undefined;
  /**
   * The type of the service charge.
   */
  type?: ServiceChargeType | undefined;
};

/** @internal */
export const ServiceCharge$inboundSchema: z.ZodType<
  ServiceCharge,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string().optional(),
  totalAmount: z.number().transform(v => new Decimal$(v)).optional(),
  taxPercentage: z.number().transform(v => new Decimal$(v)).optional(),
  taxAmount: z.number().transform(v => new Decimal$(v)).optional(),
  taxes: z.array(TaxComponentAllocation$inboundSchema).optional(),
  quantity: z.number().int().optional(),
  type: ServiceChargeType$inboundSchema.optional(),
});

/** @internal */
export type ServiceCharge$Outbound = {
  description?: string | undefined;
  totalAmount?: number | undefined;
  taxPercentage?: number | undefined;
  taxAmount?: number | undefined;
  taxes?: Array<TaxComponentAllocation$Outbound> | undefined;
  quantity?: number | undefined;
  type?: string | undefined;
};

/** @internal */
export const ServiceCharge$outboundSchema: z.ZodType<
  ServiceCharge$Outbound,
  z.ZodTypeDef,
  ServiceCharge
> = z.object({
  description: z.string().optional(),
  totalAmount: z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
    typeof v === "number" ? v : v.toNumber()
  ).optional(),
  taxPercentage: z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
    typeof v === "number" ? v : v.toNumber()
  ).optional(),
  taxAmount: z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
    typeof v === "number" ? v : v.toNumber()
  ).optional(),
  taxes: z.array(TaxComponentAllocation$outboundSchema).optional(),
  quantity: z.number().int().optional(),
  type: ServiceChargeType$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceCharge$ {
  /** @deprecated use `ServiceCharge$inboundSchema` instead. */
  export const inboundSchema = ServiceCharge$inboundSchema;
  /** @deprecated use `ServiceCharge$outboundSchema` instead. */
  export const outboundSchema = ServiceCharge$outboundSchema;
  /** @deprecated use `ServiceCharge$Outbound` instead. */
  export type Outbound = ServiceCharge$Outbound;
}

export function serviceChargeToJSON(serviceCharge: ServiceCharge): string {
  return JSON.stringify(ServiceCharge$outboundSchema.parse(serviceCharge));
}

export function serviceChargeFromJSON(
  jsonString: string,
): SafeParseResult<ServiceCharge, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServiceCharge$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServiceCharge' from JSON`,
  );
}
