/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DataIntegrityAmounts,
  DataIntegrityAmounts$inboundSchema,
  DataIntegrityAmounts$Outbound,
  DataIntegrityAmounts$outboundSchema,
} from "./dataintegrityamounts.js";
import {
  DataIntegrityConnectionId,
  DataIntegrityConnectionId$inboundSchema,
  DataIntegrityConnectionId$Outbound,
  DataIntegrityConnectionId$outboundSchema,
} from "./dataintegrityconnectionid.js";
import {
  DataIntegrityDates,
  DataIntegrityDates$inboundSchema,
  DataIntegrityDates$Outbound,
  DataIntegrityDates$outboundSchema,
} from "./dataintegritydates.js";
import {
  DataIntegrityStatusInfo,
  DataIntegrityStatusInfo$inboundSchema,
  DataIntegrityStatusInfo$Outbound,
  DataIntegrityStatusInfo$outboundSchema,
} from "./dataintegritystatusinfo.js";

export type DataIntegrityStatus = {
  /**
   * The data type which the data type in the URL has been matched against. For example, if you've matched accountTransactions and banking-transactions, and you call this endpoint with accountTransactions in the URL, this property would be banking-transactions.
   */
  type?: string | undefined;
  statusInfo?: DataIntegrityStatusInfo | undefined;
  connectionIds?: DataIntegrityConnectionId | undefined;
  /**
   * Only returned for transactions. For accounts, there is nothing returned.
   */
  amounts?: DataIntegrityAmounts | undefined;
  /**
   * Only returned for transactions. For accounts, there is nothing returned.
   */
  dates?: DataIntegrityDates | undefined;
};

/** @internal */
export const DataIntegrityStatus$inboundSchema: z.ZodType<
  DataIntegrityStatus,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().optional(),
  statusInfo: DataIntegrityStatusInfo$inboundSchema.optional(),
  connectionIds: DataIntegrityConnectionId$inboundSchema.optional(),
  amounts: DataIntegrityAmounts$inboundSchema.optional(),
  dates: DataIntegrityDates$inboundSchema.optional(),
});

/** @internal */
export type DataIntegrityStatus$Outbound = {
  type?: string | undefined;
  statusInfo?: DataIntegrityStatusInfo$Outbound | undefined;
  connectionIds?: DataIntegrityConnectionId$Outbound | undefined;
  amounts?: DataIntegrityAmounts$Outbound | undefined;
  dates?: DataIntegrityDates$Outbound | undefined;
};

/** @internal */
export const DataIntegrityStatus$outboundSchema: z.ZodType<
  DataIntegrityStatus$Outbound,
  z.ZodTypeDef,
  DataIntegrityStatus
> = z.object({
  type: z.string().optional(),
  statusInfo: DataIntegrityStatusInfo$outboundSchema.optional(),
  connectionIds: DataIntegrityConnectionId$outboundSchema.optional(),
  amounts: DataIntegrityAmounts$outboundSchema.optional(),
  dates: DataIntegrityDates$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DataIntegrityStatus$ {
  /** @deprecated use `DataIntegrityStatus$inboundSchema` instead. */
  export const inboundSchema = DataIntegrityStatus$inboundSchema;
  /** @deprecated use `DataIntegrityStatus$outboundSchema` instead. */
  export const outboundSchema = DataIntegrityStatus$outboundSchema;
  /** @deprecated use `DataIntegrityStatus$Outbound` instead. */
  export type Outbound = DataIntegrityStatus$Outbound;
}

export function dataIntegrityStatusToJSON(
  dataIntegrityStatus: DataIntegrityStatus,
): string {
  return JSON.stringify(
    DataIntegrityStatus$outboundSchema.parse(dataIntegrityStatus),
  );
}

export function dataIntegrityStatusFromJSON(
  jsonString: string,
): SafeParseResult<DataIntegrityStatus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DataIntegrityStatus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DataIntegrityStatus' from JSON`,
  );
}
