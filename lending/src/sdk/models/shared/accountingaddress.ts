/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AccountingAddressType,
  AccountingAddressType$inboundSchema,
  AccountingAddressType$outboundSchema,
} from "./accountingaddresstype.js";

export type AccountingAddress = {
  /**
   * The type of the address
   */
  type: AccountingAddressType;
  /**
   * Line 1 of the customer address.
   */
  line1?: string | null | undefined;
  /**
   * Line 2 of the customer address.
   */
  line2?: string | null | undefined;
  /**
   * City of the customer address.
   */
  city?: string | null | undefined;
  /**
   * Region of the customer address.
   */
  region?: string | null | undefined;
  /**
   * Country of the customer address.
   */
  country?: string | null | undefined;
  /**
   * Postal code or zip code.
   */
  postalCode?: string | null | undefined;
};

/** @internal */
export const AccountingAddress$inboundSchema: z.ZodType<
  AccountingAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: AccountingAddressType$inboundSchema,
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  region: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
});

/** @internal */
export type AccountingAddress$Outbound = {
  type: string;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  city?: string | null | undefined;
  region?: string | null | undefined;
  country?: string | null | undefined;
  postalCode?: string | null | undefined;
};

/** @internal */
export const AccountingAddress$outboundSchema: z.ZodType<
  AccountingAddress$Outbound,
  z.ZodTypeDef,
  AccountingAddress
> = z.object({
  type: AccountingAddressType$outboundSchema,
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  region: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingAddress$ {
  /** @deprecated use `AccountingAddress$inboundSchema` instead. */
  export const inboundSchema = AccountingAddress$inboundSchema;
  /** @deprecated use `AccountingAddress$outboundSchema` instead. */
  export const outboundSchema = AccountingAddress$outboundSchema;
  /** @deprecated use `AccountingAddress$Outbound` instead. */
  export type Outbound = AccountingAddress$Outbound;
}

export function accountingAddressToJSON(
  accountingAddress: AccountingAddress,
): string {
  return JSON.stringify(
    AccountingAddress$outboundSchema.parse(accountingAddress),
  );
}

export function accountingAddressFromJSON(
  jsonString: string,
): SafeParseResult<AccountingAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingAddress' from JSON`,
  );
}
