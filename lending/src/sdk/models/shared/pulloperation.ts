/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The current status of the dataset.
 */
export const DatasetStatus = {
  Initial: "Initial",
  Queued: "Queued",
  Fetching: "Fetching",
  MapQueued: "MapQueued",
  Mapping: "Mapping",
  Complete: "Complete",
  FetchError: "FetchError",
  MapError: "MapError",
  InternalError: "InternalError",
  ProcessingQueued: "ProcessingQueued",
  Processing: "Processing",
  ProcessingError: "ProcessingError",
  ValidationQueued: "ValidationQueued",
  Validating: "Validating",
  ValidationError: "ValidationError",
  AuthError: "AuthError",
  Cancelled: "Cancelled",
  NotSupported: "NotSupported",
  RateLimitError: "RateLimitError",
  PermissionsError: "PermissionsError",
  PrerequisiteNotMet: "PrerequisiteNotMet",
} as const;
/**
 * The current status of the dataset.
 */
export type DatasetStatus = ClosedEnum<typeof DatasetStatus>;

/**
 * Information about a queued, in progress or completed pull operation.
 *
 * @remarks
 * *Formally called `dataset`*
 */
export type PullOperation = {
  /**
   * Unique identifier of the pull operation.
   */
  id: string;
  /**
   * Unique identifier of the company associated to this pull operation.
   */
  companyId: string;
  /**
   * Unique identifier of the connection associated to this pull operation.
   */
  connectionId: string;
  /**
   * The data type you are requesting in a pull operation.
   */
  dataType: string;
  /**
   * The current status of the dataset.
   */
  status: DatasetStatus;
  /**
   * Additional information about the dataset status.
   */
  statusDescription?: string | null | undefined;
  /**
   * A message about a transient or persistent error returned by Codat or the source platform.
   */
  errorMessage?: string | null | undefined;
  /**
   * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
   *
   * @remarks
   *
   * ```
   * 2020-10-08T22:40:50Z
   * 2021-01-01T00:00:00
   * ```
   *
   * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
   *
   * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
   * - Unqualified local time: `2021-11-15T01:00:00`
   * - UTC time offsets: `2021-11-15T01:00:00-05:00`
   *
   * > Time zones
   * >
   * > Not all dates from Codat will contain information about time zones.
   * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
   */
  requested: string;
  /**
   * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
   *
   * @remarks
   *
   * ```
   * 2020-10-08T22:40:50Z
   * 2021-01-01T00:00:00
   * ```
   *
   * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
   *
   * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
   * - Unqualified local time: `2021-11-15T01:00:00`
   * - UTC time offsets: `2021-11-15T01:00:00-05:00`
   *
   * > Time zones
   * >
   * > Not all dates from Codat will contain information about time zones.
   * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
   */
  completed?: string | undefined;
  /**
   * An integer signifying the progress of the pull operation.
   */
  progress: number;
  /**
   * `True` if the pull operation is completed successfully. The `isCompleted` property is not queryable. To filter failed pull operations, query by `status!=Complete&&status!=NotSupported` instead.
   */
  isCompleted: boolean;
  /**
   * `True` if the pull operation entered an error state.
   */
  isErrored: boolean;
};

/** @internal */
export const DatasetStatus$inboundSchema: z.ZodNativeEnum<
  typeof DatasetStatus
> = z.nativeEnum(DatasetStatus);

/** @internal */
export const DatasetStatus$outboundSchema: z.ZodNativeEnum<
  typeof DatasetStatus
> = DatasetStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DatasetStatus$ {
  /** @deprecated use `DatasetStatus$inboundSchema` instead. */
  export const inboundSchema = DatasetStatus$inboundSchema;
  /** @deprecated use `DatasetStatus$outboundSchema` instead. */
  export const outboundSchema = DatasetStatus$outboundSchema;
}

/** @internal */
export const PullOperation$inboundSchema: z.ZodType<
  PullOperation,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  companyId: z.string(),
  connectionId: z.string(),
  dataType: z.string(),
  status: DatasetStatus$inboundSchema,
  statusDescription: z.nullable(z.string()).optional(),
  errorMessage: z.nullable(z.string()).optional(),
  requested: z.string(),
  completed: z.string().optional(),
  progress: z.number().int(),
  isCompleted: z.boolean(),
  isErrored: z.boolean(),
});

/** @internal */
export type PullOperation$Outbound = {
  id: string;
  companyId: string;
  connectionId: string;
  dataType: string;
  status: string;
  statusDescription?: string | null | undefined;
  errorMessage?: string | null | undefined;
  requested: string;
  completed?: string | undefined;
  progress: number;
  isCompleted: boolean;
  isErrored: boolean;
};

/** @internal */
export const PullOperation$outboundSchema: z.ZodType<
  PullOperation$Outbound,
  z.ZodTypeDef,
  PullOperation
> = z.object({
  id: z.string(),
  companyId: z.string(),
  connectionId: z.string(),
  dataType: z.string(),
  status: DatasetStatus$outboundSchema,
  statusDescription: z.nullable(z.string()).optional(),
  errorMessage: z.nullable(z.string()).optional(),
  requested: z.string(),
  completed: z.string().optional(),
  progress: z.number().int(),
  isCompleted: z.boolean(),
  isErrored: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PullOperation$ {
  /** @deprecated use `PullOperation$inboundSchema` instead. */
  export const inboundSchema = PullOperation$inboundSchema;
  /** @deprecated use `PullOperation$outboundSchema` instead. */
  export const outboundSchema = PullOperation$outboundSchema;
  /** @deprecated use `PullOperation$Outbound` instead. */
  export type Outbound = PullOperation$Outbound;
}

export function pullOperationToJSON(pullOperation: PullOperation): string {
  return JSON.stringify(PullOperation$outboundSchema.parse(pullOperation));
}

export function pullOperationFromJSON(
  jsonString: string,
): SafeParseResult<PullOperation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PullOperation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PullOperation' from JSON`,
  );
}
