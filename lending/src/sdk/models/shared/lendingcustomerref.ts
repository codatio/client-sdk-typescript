/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export type LendingCustomerRef = {
  /**
   * `id` from the Customers data type.
   */
  id?: string | undefined;
  /**
   * `customerName` from the Customer data type.
   */
  customerName?: string | null | undefined;
};

/** @internal */
export const LendingCustomerRef$inboundSchema: z.ZodType<
  LendingCustomerRef,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  customerName: z.nullable(z.string()).optional(),
});

/** @internal */
export type LendingCustomerRef$Outbound = {
  id?: string | undefined;
  customerName?: string | null | undefined;
};

/** @internal */
export const LendingCustomerRef$outboundSchema: z.ZodType<
  LendingCustomerRef$Outbound,
  z.ZodTypeDef,
  LendingCustomerRef
> = z.object({
  id: z.string().optional(),
  customerName: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LendingCustomerRef$ {
  /** @deprecated use `LendingCustomerRef$inboundSchema` instead. */
  export const inboundSchema = LendingCustomerRef$inboundSchema;
  /** @deprecated use `LendingCustomerRef$outboundSchema` instead. */
  export const outboundSchema = LendingCustomerRef$outboundSchema;
  /** @deprecated use `LendingCustomerRef$Outbound` instead. */
  export type Outbound = LendingCustomerRef$Outbound;
}
