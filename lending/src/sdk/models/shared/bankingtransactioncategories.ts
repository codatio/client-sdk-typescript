/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  BankingTransactionCategory,
  BankingTransactionCategory$inboundSchema,
  BankingTransactionCategory$Outbound,
  BankingTransactionCategory$outboundSchema,
} from "./bankingtransactioncategory.js";
import {
  Links,
  Links$inboundSchema,
  Links$Outbound,
  Links$outboundSchema,
} from "./links.js";

export type BankingTransactionCategories = {
  results?: Array<BankingTransactionCategory> | undefined;
  /**
   * Current page number.
   */
  pageNumber: number;
  /**
   * Number of items to return in results array.
   */
  pageSize: number;
  /**
   * Total number of items.
   */
  totalResults: number;
  links: Links;
};

/** @internal */
export const BankingTransactionCategories$inboundSchema: z.ZodType<
  BankingTransactionCategories,
  z.ZodTypeDef,
  unknown
> = z.object({
  results: z.array(BankingTransactionCategory$inboundSchema).optional(),
  pageNumber: z.number().int(),
  pageSize: z.number().int(),
  totalResults: z.number().int(),
  _links: Links$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type BankingTransactionCategories$Outbound = {
  results?: Array<BankingTransactionCategory$Outbound> | undefined;
  pageNumber: number;
  pageSize: number;
  totalResults: number;
  _links: Links$Outbound;
};

/** @internal */
export const BankingTransactionCategories$outboundSchema: z.ZodType<
  BankingTransactionCategories$Outbound,
  z.ZodTypeDef,
  BankingTransactionCategories
> = z.object({
  results: z.array(BankingTransactionCategory$outboundSchema).optional(),
  pageNumber: z.number().int(),
  pageSize: z.number().int(),
  totalResults: z.number().int(),
  links: Links$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BankingTransactionCategories$ {
  /** @deprecated use `BankingTransactionCategories$inboundSchema` instead. */
  export const inboundSchema = BankingTransactionCategories$inboundSchema;
  /** @deprecated use `BankingTransactionCategories$outboundSchema` instead. */
  export const outboundSchema = BankingTransactionCategories$outboundSchema;
  /** @deprecated use `BankingTransactionCategories$Outbound` instead. */
  export type Outbound = BankingTransactionCategories$Outbound;
}

export function bankingTransactionCategoriesToJSON(
  bankingTransactionCategories: BankingTransactionCategories,
): string {
  return JSON.stringify(
    BankingTransactionCategories$outboundSchema.parse(
      bankingTransactionCategories,
    ),
  );
}

export function bankingTransactionCategoriesFromJSON(
  jsonString: string,
): SafeParseResult<BankingTransactionCategories, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BankingTransactionCategories$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BankingTransactionCategories' from JSON`,
  );
}
