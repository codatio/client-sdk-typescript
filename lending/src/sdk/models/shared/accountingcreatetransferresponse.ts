/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AccountingRecordRef,
  AccountingRecordRef$inboundSchema,
  AccountingRecordRef$Outbound,
  AccountingRecordRef$outboundSchema,
} from "./accountingrecordref.js";
import {
  ContactRef,
  ContactRef$inboundSchema,
  ContactRef$Outbound,
  ContactRef$outboundSchema,
} from "./contactref.js";
import {
  Metadata,
  Metadata$inboundSchema,
  Metadata$Outbound,
  Metadata$outboundSchema,
} from "./metadata.js";
import {
  PropertieDataType,
  PropertieDataType$inboundSchema,
  PropertieDataType$outboundSchema,
} from "./propertiedatatype.js";
import {
  PushOperationChange,
  PushOperationChange$inboundSchema,
  PushOperationChange$Outbound,
  PushOperationChange$outboundSchema,
} from "./pushoperationchange.js";
import {
  PushOperationStatus,
  PushOperationStatus$inboundSchema,
  PushOperationStatus$outboundSchema,
} from "./pushoperationstatus.js";
import {
  SupplementalData,
  SupplementalData$inboundSchema,
  SupplementalData$Outbound,
  SupplementalData$outboundSchema,
} from "./supplementaldata.js";
import {
  TrackingCategoryRef,
  TrackingCategoryRef$inboundSchema,
  TrackingCategoryRef$Outbound,
  TrackingCategoryRef$outboundSchema,
} from "./trackingcategoryref.js";
import {
  TransferAccount,
  TransferAccount$inboundSchema,
  TransferAccount$Outbound,
  TransferAccount$outboundSchema,
} from "./transferaccount.js";
import {
  Validation,
  Validation$inboundSchema,
  Validation$Outbound,
  Validation$outboundSchema,
} from "./validation.js";

/**
 * The status of the transfer in the account
 */
export const AccountingCreateTransferResponseStatus = {
  Unknown: "Unknown",
  Unreconciled: "Unreconciled",
  Reconciled: "Reconciled",
  Void: "Void",
} as const;
/**
 * The status of the transfer in the account
 */
export type AccountingCreateTransferResponseStatus = ClosedEnum<
  typeof AccountingCreateTransferResponseStatus
>;

/**
 * A transfer records the movement of money between two bank accounts, or between a bank account and a nominal account. It is a child data type of [account transactions](https://docs.codat.io/lending-api#/schemas/AccountTransaction).
 *
 * @deprecated class: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export type AccountingCreateTransferResponseAccountingTransfer = {
  modifiedDate?: string | undefined;
  sourceModifiedDate?: string | undefined;
  /**
   * Unique identifier for the transfer.
   */
  id?: string | undefined;
  /**
   * Description of the transfer.
   */
  description?: string | null | undefined;
  contactRef?: ContactRef | undefined;
  /**
   * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
   *
   * @remarks
   *
   * ```
   * 2020-10-08T22:40:50Z
   * 2021-01-01T00:00:00
   * ```
   *
   * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
   *
   * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
   * - Unqualified local time: `2021-11-15T01:00:00`
   * - UTC time offsets: `2021-11-15T01:00:00-05:00`
   *
   * > Time zones
   * >
   * > Not all dates from Codat will contain information about time zones.
   * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
   */
  date?: string | undefined;
  /**
   * Account details of the account sending or receiving the transfer.
   */
  from?: TransferAccount | undefined;
  /**
   * Account details of the account sending or receiving the transfer.
   */
  to?: TransferAccount | undefined;
  /**
   * The status of the transfer in the account
   */
  status?: AccountingCreateTransferResponseStatus | null | undefined;
  /**
   * Reference to the tracking categories this transfer is being tracked against.
   */
  trackingCategoryRefs?: Array<TrackingCategoryRef> | null | undefined;
  /**
   * List of selected transactions to associate with the transfer. Use this field to include transactions which are posted to the _undeposited funds_ (or other holding) account within the transfer.
   */
  depositedRecordRefs?: Array<AccountingRecordRef> | null | undefined;
  metadata?: Metadata | undefined;
  /**
   * Supplemental data is additional data you can include in our standard data types.
   *
   * @remarks
   *
   * It is referenced as a configured dynamic key value pair that is unique to the accounting software. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
   */
  supplementalData?: SupplementalData | undefined;
};

export type AccountingCreateTransferResponse = {
  data?: AccountingCreateTransferResponseAccountingTransfer | null | undefined;
  /**
   * Contains a single entry that communicates which record has changed and the manner in which it changed.
   */
  changes?: Array<PushOperationChange> | null | undefined;
  /**
   * Available data types
   */
  dataType?: PropertieDataType | undefined;
  /**
   * Unique identifier for your SMB in Codat.
   */
  companyId: string;
  /**
   * A unique identifier generated by Codat to represent this single push operation. This identifier can be used to track the status of the push, and should be persisted.
   */
  pushOperationKey: string;
  /**
   * Unique identifier for a company's data connection.
   */
  dataConnectionKey: string;
  /**
   * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
   *
   * @remarks
   *
   * ```
   * 2020-10-08T22:40:50Z
   * 2021-01-01T00:00:00
   * ```
   *
   * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
   *
   * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
   * - Unqualified local time: `2021-11-15T01:00:00`
   * - UTC time offsets: `2021-11-15T01:00:00-05:00`
   *
   * > Time zones
   * >
   * > Not all dates from Codat will contain information about time zones.
   * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
   */
  requestedOnUtc: string;
  /**
   * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
   *
   * @remarks
   *
   * ```
   * 2020-10-08T22:40:50Z
   * 2021-01-01T00:00:00
   * ```
   *
   * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
   *
   * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
   * - Unqualified local time: `2021-11-15T01:00:00`
   * - UTC time offsets: `2021-11-15T01:00:00-05:00`
   *
   * > Time zones
   * >
   * > Not all dates from Codat will contain information about time zones.
   * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
   */
  completedOnUtc?: string | undefined;
  /**
   * Number of minutes the push operation must complete within before it times out.
   */
  timeoutInMinutes?: number | null | undefined;
  /**
   * Number of seconds the push operation must complete within before it times out.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  timeoutInSeconds?: number | null | undefined;
  /**
   * The current status of the push operation.
   */
  status: PushOperationStatus;
  /**
   * A message about the error.
   */
  errorMessage?: string | null | undefined;
  /**
   * A human-readable object describing validation decisions Codat has made when pushing data into the platform. If a push has failed because of validation errors, they will be detailed here.
   */
  validation?: Validation | undefined;
  /**
   * Push status code.
   */
  statusCode: number;
};

/** @internal */
export const AccountingCreateTransferResponseStatus$inboundSchema:
  z.ZodNativeEnum<typeof AccountingCreateTransferResponseStatus> = z.nativeEnum(
    AccountingCreateTransferResponseStatus,
  );

/** @internal */
export const AccountingCreateTransferResponseStatus$outboundSchema:
  z.ZodNativeEnum<typeof AccountingCreateTransferResponseStatus> =
    AccountingCreateTransferResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingCreateTransferResponseStatus$ {
  /** @deprecated use `AccountingCreateTransferResponseStatus$inboundSchema` instead. */
  export const inboundSchema =
    AccountingCreateTransferResponseStatus$inboundSchema;
  /** @deprecated use `AccountingCreateTransferResponseStatus$outboundSchema` instead. */
  export const outboundSchema =
    AccountingCreateTransferResponseStatus$outboundSchema;
}

/** @internal */
export const AccountingCreateTransferResponseAccountingTransfer$inboundSchema:
  z.ZodType<
    AccountingCreateTransferResponseAccountingTransfer,
    z.ZodTypeDef,
    unknown
  > = z.object({
    modifiedDate: z.string().optional(),
    sourceModifiedDate: z.string().optional(),
    id: z.string().optional(),
    description: z.nullable(z.string()).optional(),
    contactRef: ContactRef$inboundSchema.optional(),
    date: z.string().optional(),
    from: TransferAccount$inboundSchema.optional(),
    to: TransferAccount$inboundSchema.optional(),
    status: z.nullable(AccountingCreateTransferResponseStatus$inboundSchema)
      .optional(),
    trackingCategoryRefs: z.nullable(z.array(TrackingCategoryRef$inboundSchema))
      .optional(),
    depositedRecordRefs: z.nullable(z.array(AccountingRecordRef$inboundSchema))
      .optional(),
    metadata: Metadata$inboundSchema.optional(),
    supplementalData: SupplementalData$inboundSchema.optional(),
  });

/** @internal */
export type AccountingCreateTransferResponseAccountingTransfer$Outbound = {
  modifiedDate?: string | undefined;
  sourceModifiedDate?: string | undefined;
  id?: string | undefined;
  description?: string | null | undefined;
  contactRef?: ContactRef$Outbound | undefined;
  date?: string | undefined;
  from?: TransferAccount$Outbound | undefined;
  to?: TransferAccount$Outbound | undefined;
  status?: string | null | undefined;
  trackingCategoryRefs?: Array<TrackingCategoryRef$Outbound> | null | undefined;
  depositedRecordRefs?: Array<AccountingRecordRef$Outbound> | null | undefined;
  metadata?: Metadata$Outbound | undefined;
  supplementalData?: SupplementalData$Outbound | undefined;
};

/** @internal */
export const AccountingCreateTransferResponseAccountingTransfer$outboundSchema:
  z.ZodType<
    AccountingCreateTransferResponseAccountingTransfer$Outbound,
    z.ZodTypeDef,
    AccountingCreateTransferResponseAccountingTransfer
  > = z.object({
    modifiedDate: z.string().optional(),
    sourceModifiedDate: z.string().optional(),
    id: z.string().optional(),
    description: z.nullable(z.string()).optional(),
    contactRef: ContactRef$outboundSchema.optional(),
    date: z.string().optional(),
    from: TransferAccount$outboundSchema.optional(),
    to: TransferAccount$outboundSchema.optional(),
    status: z.nullable(AccountingCreateTransferResponseStatus$outboundSchema)
      .optional(),
    trackingCategoryRefs: z.nullable(
      z.array(TrackingCategoryRef$outboundSchema),
    ).optional(),
    depositedRecordRefs: z.nullable(z.array(AccountingRecordRef$outboundSchema))
      .optional(),
    metadata: Metadata$outboundSchema.optional(),
    supplementalData: SupplementalData$outboundSchema.optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingCreateTransferResponseAccountingTransfer$ {
  /** @deprecated use `AccountingCreateTransferResponseAccountingTransfer$inboundSchema` instead. */
  export const inboundSchema =
    AccountingCreateTransferResponseAccountingTransfer$inboundSchema;
  /** @deprecated use `AccountingCreateTransferResponseAccountingTransfer$outboundSchema` instead. */
  export const outboundSchema =
    AccountingCreateTransferResponseAccountingTransfer$outboundSchema;
  /** @deprecated use `AccountingCreateTransferResponseAccountingTransfer$Outbound` instead. */
  export type Outbound =
    AccountingCreateTransferResponseAccountingTransfer$Outbound;
}

export function accountingCreateTransferResponseAccountingTransferToJSON(
  accountingCreateTransferResponseAccountingTransfer:
    AccountingCreateTransferResponseAccountingTransfer,
): string {
  return JSON.stringify(
    AccountingCreateTransferResponseAccountingTransfer$outboundSchema.parse(
      accountingCreateTransferResponseAccountingTransfer,
    ),
  );
}

export function accountingCreateTransferResponseAccountingTransferFromJSON(
  jsonString: string,
): SafeParseResult<
  AccountingCreateTransferResponseAccountingTransfer,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AccountingCreateTransferResponseAccountingTransfer$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AccountingCreateTransferResponseAccountingTransfer' from JSON`,
  );
}

/** @internal */
export const AccountingCreateTransferResponse$inboundSchema: z.ZodType<
  AccountingCreateTransferResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.nullable(
    z.lazy(() =>
      AccountingCreateTransferResponseAccountingTransfer$inboundSchema
    ),
  ).optional(),
  changes: z.nullable(z.array(PushOperationChange$inboundSchema)).optional(),
  dataType: PropertieDataType$inboundSchema.optional(),
  companyId: z.string(),
  pushOperationKey: z.string(),
  dataConnectionKey: z.string(),
  requestedOnUtc: z.string(),
  completedOnUtc: z.string().optional(),
  timeoutInMinutes: z.nullable(z.number().int()).optional(),
  timeoutInSeconds: z.nullable(z.number().int()).optional(),
  status: PushOperationStatus$inboundSchema,
  errorMessage: z.nullable(z.string()).optional(),
  validation: Validation$inboundSchema.optional(),
  statusCode: z.number().int(),
});

/** @internal */
export type AccountingCreateTransferResponse$Outbound = {
  data?:
    | AccountingCreateTransferResponseAccountingTransfer$Outbound
    | null
    | undefined;
  changes?: Array<PushOperationChange$Outbound> | null | undefined;
  dataType?: string | undefined;
  companyId: string;
  pushOperationKey: string;
  dataConnectionKey: string;
  requestedOnUtc: string;
  completedOnUtc?: string | undefined;
  timeoutInMinutes?: number | null | undefined;
  timeoutInSeconds?: number | null | undefined;
  status: string;
  errorMessage?: string | null | undefined;
  validation?: Validation$Outbound | undefined;
  statusCode: number;
};

/** @internal */
export const AccountingCreateTransferResponse$outboundSchema: z.ZodType<
  AccountingCreateTransferResponse$Outbound,
  z.ZodTypeDef,
  AccountingCreateTransferResponse
> = z.object({
  data: z.nullable(
    z.lazy(() =>
      AccountingCreateTransferResponseAccountingTransfer$outboundSchema
    ),
  ).optional(),
  changes: z.nullable(z.array(PushOperationChange$outboundSchema)).optional(),
  dataType: PropertieDataType$outboundSchema.optional(),
  companyId: z.string(),
  pushOperationKey: z.string(),
  dataConnectionKey: z.string(),
  requestedOnUtc: z.string(),
  completedOnUtc: z.string().optional(),
  timeoutInMinutes: z.nullable(z.number().int()).optional(),
  timeoutInSeconds: z.nullable(z.number().int()).optional(),
  status: PushOperationStatus$outboundSchema,
  errorMessage: z.nullable(z.string()).optional(),
  validation: Validation$outboundSchema.optional(),
  statusCode: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingCreateTransferResponse$ {
  /** @deprecated use `AccountingCreateTransferResponse$inboundSchema` instead. */
  export const inboundSchema = AccountingCreateTransferResponse$inboundSchema;
  /** @deprecated use `AccountingCreateTransferResponse$outboundSchema` instead. */
  export const outboundSchema = AccountingCreateTransferResponse$outboundSchema;
  /** @deprecated use `AccountingCreateTransferResponse$Outbound` instead. */
  export type Outbound = AccountingCreateTransferResponse$Outbound;
}

export function accountingCreateTransferResponseToJSON(
  accountingCreateTransferResponse: AccountingCreateTransferResponse,
): string {
  return JSON.stringify(
    AccountingCreateTransferResponse$outboundSchema.parse(
      accountingCreateTransferResponse,
    ),
  );
}

export function accountingCreateTransferResponseFromJSON(
  jsonString: string,
): SafeParseResult<AccountingCreateTransferResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingCreateTransferResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingCreateTransferResponse' from JSON`,
  );
}
