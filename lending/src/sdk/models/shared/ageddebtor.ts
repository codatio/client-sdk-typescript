/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AgedCurrencyOutstanding,
  AgedCurrencyOutstanding$inboundSchema,
  AgedCurrencyOutstanding$Outbound,
  AgedCurrencyOutstanding$outboundSchema,
} from "./agedcurrencyoutstanding.js";

export type AgedDebtor = {
  /**
   * Customer ID of the aged debtor.
   */
  customerId?: string | undefined;
  /**
   * Customer name of the aged debtor.
   */
  customerName?: string | undefined;
  /**
   * Array of aged debtors by currency.
   */
  agedCurrencyOutstanding?: Array<AgedCurrencyOutstanding> | undefined;
};

/** @internal */
export const AgedDebtor$inboundSchema: z.ZodType<
  AgedDebtor,
  z.ZodTypeDef,
  unknown
> = z.object({
  customerId: z.string().optional(),
  customerName: z.string().optional(),
  agedCurrencyOutstanding: z.array(AgedCurrencyOutstanding$inboundSchema)
    .optional(),
});

/** @internal */
export type AgedDebtor$Outbound = {
  customerId?: string | undefined;
  customerName?: string | undefined;
  agedCurrencyOutstanding?: Array<AgedCurrencyOutstanding$Outbound> | undefined;
};

/** @internal */
export const AgedDebtor$outboundSchema: z.ZodType<
  AgedDebtor$Outbound,
  z.ZodTypeDef,
  AgedDebtor
> = z.object({
  customerId: z.string().optional(),
  customerName: z.string().optional(),
  agedCurrencyOutstanding: z.array(AgedCurrencyOutstanding$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgedDebtor$ {
  /** @deprecated use `AgedDebtor$inboundSchema` instead. */
  export const inboundSchema = AgedDebtor$inboundSchema;
  /** @deprecated use `AgedDebtor$outboundSchema` instead. */
  export const outboundSchema = AgedDebtor$outboundSchema;
  /** @deprecated use `AgedDebtor$Outbound` instead. */
  export type Outbound = AgedDebtor$Outbound;
}

export function agedDebtorToJSON(agedDebtor: AgedDebtor): string {
  return JSON.stringify(AgedDebtor$outboundSchema.parse(agedDebtor));
}

export function agedDebtorFromJSON(
  jsonString: string,
): SafeParseResult<AgedDebtor, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AgedDebtor$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgedDebtor' from JSON`,
  );
}
