/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export type DataIntegrityMatch = {
  /**
   * ID GUID of the transaction.
   */
  id?: string | undefined;
  /**
   * The data type which the data type in the URL has been matched against. For example, if you've matched accountTransactions and banking-transactions, and you call this endpoint with accountTransactions in the URL, this property would be banking-transactions.
   */
  type?: string | undefined;
  /**
   * ID GUID representing the connection of the accounting or banking platform.
   */
  connectionId?: string | undefined;
  /**
   * The date of the transaction.
   */
  date?: string | undefined;
  /**
   * The transaction description.
   */
  description?: string | undefined;
  /**
   * The transaction value.
   */
  amount?: string | undefined;
  /**
   * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
   *
   * @remarks
   *
   * ## Unknown currencies
   *
   * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction.
   *
   * There are only a very small number of edge cases where this currency code is returned by the Codat system.
   */
  currency?: string | undefined;
};

/** @internal */
export const DataIntegrityMatch$inboundSchema: z.ZodType<
  DataIntegrityMatch,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: z.string().optional(),
  connectionId: z.string().optional(),
  date: z.string().optional(),
  description: z.string().optional(),
  amount: z.string().optional(),
  currency: z.string().optional(),
});

/** @internal */
export type DataIntegrityMatch$Outbound = {
  id?: string | undefined;
  type?: string | undefined;
  connectionId?: string | undefined;
  date?: string | undefined;
  description?: string | undefined;
  amount?: string | undefined;
  currency?: string | undefined;
};

/** @internal */
export const DataIntegrityMatch$outboundSchema: z.ZodType<
  DataIntegrityMatch$Outbound,
  z.ZodTypeDef,
  DataIntegrityMatch
> = z.object({
  id: z.string().optional(),
  type: z.string().optional(),
  connectionId: z.string().optional(),
  date: z.string().optional(),
  description: z.string().optional(),
  amount: z.string().optional(),
  currency: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DataIntegrityMatch$ {
  /** @deprecated use `DataIntegrityMatch$inboundSchema` instead. */
  export const inboundSchema = DataIntegrityMatch$inboundSchema;
  /** @deprecated use `DataIntegrityMatch$outboundSchema` instead. */
  export const outboundSchema = DataIntegrityMatch$outboundSchema;
  /** @deprecated use `DataIntegrityMatch$Outbound` instead. */
  export type Outbound = DataIntegrityMatch$Outbound;
}
