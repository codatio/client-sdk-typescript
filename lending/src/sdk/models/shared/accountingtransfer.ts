/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AccountingRecordRef,
  AccountingRecordRef$inboundSchema,
  AccountingRecordRef$Outbound,
  AccountingRecordRef$outboundSchema,
} from "./accountingrecordref.js";
import {
  ContactRef,
  ContactRef$inboundSchema,
  ContactRef$Outbound,
  ContactRef$outboundSchema,
} from "./contactref.js";
import {
  Metadata,
  Metadata$inboundSchema,
  Metadata$Outbound,
  Metadata$outboundSchema,
} from "./metadata.js";
import {
  SupplementalData,
  SupplementalData$inboundSchema,
  SupplementalData$Outbound,
  SupplementalData$outboundSchema,
} from "./supplementaldata.js";
import {
  TrackingCategoryRef,
  TrackingCategoryRef$inboundSchema,
  TrackingCategoryRef$Outbound,
  TrackingCategoryRef$outboundSchema,
} from "./trackingcategoryref.js";
import {
  TransferAccount,
  TransferAccount$inboundSchema,
  TransferAccount$Outbound,
  TransferAccount$outboundSchema,
} from "./transferaccount.js";

/**
 * The status of the transfer in the account
 */
export const AccountingTransferStatus = {
  Unknown: "Unknown",
  Unreconciled: "Unreconciled",
  Reconciled: "Reconciled",
  Void: "Void",
} as const;
/**
 * The status of the transfer in the account
 */
export type AccountingTransferStatus = ClosedEnum<
  typeof AccountingTransferStatus
>;

/**
 * A transfer records the movement of money between two bank accounts, or between a bank account and a nominal account. It is a child data type of [account transactions](https://docs.codat.io/lending-api#/schemas/AccountTransaction).
 */
export type AccountingTransfer = {
  modifiedDate?: string | undefined;
  sourceModifiedDate?: string | undefined;
  /**
   * Unique identifier for the transfer.
   */
  id?: string | undefined;
  /**
   * Description of the transfer.
   */
  description?: string | null | undefined;
  contactRef?: ContactRef | undefined;
  /**
   * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
   *
   * @remarks
   *
   * ```
   * 2020-10-08T22:40:50Z
   * 2021-01-01T00:00:00
   * ```
   *
   * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
   *
   * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
   * - Unqualified local time: `2021-11-15T01:00:00`
   * - UTC time offsets: `2021-11-15T01:00:00-05:00`
   *
   * > Time zones
   * >
   * > Not all dates from Codat will contain information about time zones.
   * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
   */
  date?: string | undefined;
  /**
   * Account details of the account sending or receiving the transfer.
   */
  from?: TransferAccount | undefined;
  /**
   * Account details of the account sending or receiving the transfer.
   */
  to?: TransferAccount | undefined;
  /**
   * The status of the transfer in the account
   */
  status?: AccountingTransferStatus | null | undefined;
  /**
   * Reference to the tracking categories this transfer is being tracked against.
   */
  trackingCategoryRefs?: Array<TrackingCategoryRef> | null | undefined;
  /**
   * List of selected transactions to associate with the transfer. Use this field to include transactions which are posted to the _undeposited funds_ (or other holding) account within the transfer.
   */
  depositedRecordRefs?: Array<AccountingRecordRef> | null | undefined;
  metadata?: Metadata | undefined;
  /**
   * Supplemental data is additional data you can include in our standard data types.
   *
   * @remarks
   *
   * It is referenced as a configured dynamic key value pair that is unique to the accounting software. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
   */
  supplementalData?: SupplementalData | undefined;
};

/** @internal */
export const AccountingTransferStatus$inboundSchema: z.ZodNativeEnum<
  typeof AccountingTransferStatus
> = z.nativeEnum(AccountingTransferStatus);

/** @internal */
export const AccountingTransferStatus$outboundSchema: z.ZodNativeEnum<
  typeof AccountingTransferStatus
> = AccountingTransferStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingTransferStatus$ {
  /** @deprecated use `AccountingTransferStatus$inboundSchema` instead. */
  export const inboundSchema = AccountingTransferStatus$inboundSchema;
  /** @deprecated use `AccountingTransferStatus$outboundSchema` instead. */
  export const outboundSchema = AccountingTransferStatus$outboundSchema;
}

/** @internal */
export const AccountingTransfer$inboundSchema: z.ZodType<
  AccountingTransfer,
  z.ZodTypeDef,
  unknown
> = z.object({
  modifiedDate: z.string().optional(),
  sourceModifiedDate: z.string().optional(),
  id: z.string().optional(),
  description: z.nullable(z.string()).optional(),
  contactRef: ContactRef$inboundSchema.optional(),
  date: z.string().optional(),
  from: TransferAccount$inboundSchema.optional(),
  to: TransferAccount$inboundSchema.optional(),
  status: z.nullable(AccountingTransferStatus$inboundSchema).optional(),
  trackingCategoryRefs: z.nullable(z.array(TrackingCategoryRef$inboundSchema))
    .optional(),
  depositedRecordRefs: z.nullable(z.array(AccountingRecordRef$inboundSchema))
    .optional(),
  metadata: Metadata$inboundSchema.optional(),
  supplementalData: SupplementalData$inboundSchema.optional(),
});

/** @internal */
export type AccountingTransfer$Outbound = {
  modifiedDate?: string | undefined;
  sourceModifiedDate?: string | undefined;
  id?: string | undefined;
  description?: string | null | undefined;
  contactRef?: ContactRef$Outbound | undefined;
  date?: string | undefined;
  from?: TransferAccount$Outbound | undefined;
  to?: TransferAccount$Outbound | undefined;
  status?: string | null | undefined;
  trackingCategoryRefs?: Array<TrackingCategoryRef$Outbound> | null | undefined;
  depositedRecordRefs?: Array<AccountingRecordRef$Outbound> | null | undefined;
  metadata?: Metadata$Outbound | undefined;
  supplementalData?: SupplementalData$Outbound | undefined;
};

/** @internal */
export const AccountingTransfer$outboundSchema: z.ZodType<
  AccountingTransfer$Outbound,
  z.ZodTypeDef,
  AccountingTransfer
> = z.object({
  modifiedDate: z.string().optional(),
  sourceModifiedDate: z.string().optional(),
  id: z.string().optional(),
  description: z.nullable(z.string()).optional(),
  contactRef: ContactRef$outboundSchema.optional(),
  date: z.string().optional(),
  from: TransferAccount$outboundSchema.optional(),
  to: TransferAccount$outboundSchema.optional(),
  status: z.nullable(AccountingTransferStatus$outboundSchema).optional(),
  trackingCategoryRefs: z.nullable(z.array(TrackingCategoryRef$outboundSchema))
    .optional(),
  depositedRecordRefs: z.nullable(z.array(AccountingRecordRef$outboundSchema))
    .optional(),
  metadata: Metadata$outboundSchema.optional(),
  supplementalData: SupplementalData$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingTransfer$ {
  /** @deprecated use `AccountingTransfer$inboundSchema` instead. */
  export const inboundSchema = AccountingTransfer$inboundSchema;
  /** @deprecated use `AccountingTransfer$outboundSchema` instead. */
  export const outboundSchema = AccountingTransfer$outboundSchema;
  /** @deprecated use `AccountingTransfer$Outbound` instead. */
  export type Outbound = AccountingTransfer$Outbound;
}

export function accountingTransferToJSON(
  accountingTransfer: AccountingTransfer,
): string {
  return JSON.stringify(
    AccountingTransfer$outboundSchema.parse(accountingTransfer),
  );
}

export function accountingTransferFromJSON(
  jsonString: string,
): SafeParseResult<AccountingTransfer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingTransfer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingTransfer' from JSON`,
  );
}
