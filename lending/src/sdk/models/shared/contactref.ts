/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Allowed name of the 'dataType'.
 */
export const ContactRefDataType = {
  Customers: "customers",
  Suppliers: "suppliers",
} as const;
/**
 * Allowed name of the 'dataType'.
 */
export type ContactRefDataType = ClosedEnum<typeof ContactRefDataType>;

export type ContactRef = {
  /**
   * Unique identifier for a customer or supplier.
   */
  id: string;
  /**
   * Allowed name of the 'dataType'.
   */
  dataType?: ContactRefDataType | null | undefined;
};

/** @internal */
export const ContactRefDataType$inboundSchema: z.ZodNativeEnum<
  typeof ContactRefDataType
> = z.nativeEnum(ContactRefDataType);

/** @internal */
export const ContactRefDataType$outboundSchema: z.ZodNativeEnum<
  typeof ContactRefDataType
> = ContactRefDataType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactRefDataType$ {
  /** @deprecated use `ContactRefDataType$inboundSchema` instead. */
  export const inboundSchema = ContactRefDataType$inboundSchema;
  /** @deprecated use `ContactRefDataType$outboundSchema` instead. */
  export const outboundSchema = ContactRefDataType$outboundSchema;
}

/** @internal */
export const ContactRef$inboundSchema: z.ZodType<
  ContactRef,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  dataType: z.nullable(ContactRefDataType$inboundSchema).optional(),
});

/** @internal */
export type ContactRef$Outbound = {
  id: string;
  dataType?: string | null | undefined;
};

/** @internal */
export const ContactRef$outboundSchema: z.ZodType<
  ContactRef$Outbound,
  z.ZodTypeDef,
  ContactRef
> = z.object({
  id: z.string(),
  dataType: z.nullable(ContactRefDataType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactRef$ {
  /** @deprecated use `ContactRef$inboundSchema` instead. */
  export const inboundSchema = ContactRef$inboundSchema;
  /** @deprecated use `ContactRef$outboundSchema` instead. */
  export const outboundSchema = ContactRef$outboundSchema;
  /** @deprecated use `ContactRef$Outbound` instead. */
  export type Outbound = ContactRef$Outbound;
}

export function contactRefToJSON(contactRef: ContactRef): string {
  return JSON.stringify(ContactRef$outboundSchema.parse(contactRef));
}

export function contactRefFromJSON(
  jsonString: string,
): SafeParseResult<ContactRef, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactRef$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactRef' from JSON`,
  );
}
