/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { Decimal as Decimal$ } from "../../types/decimal.js";

export type AgedOutstandingAmountDetail = {
  /**
   * Name of data type with outstanding amount for given period.
   */
  name?: string | undefined;
  /**
   * The amount outstanding.
   */
  amount?: Decimal$ | number | undefined;
};

/** @internal */
export const AgedOutstandingAmountDetail$inboundSchema: z.ZodType<
  AgedOutstandingAmountDetail,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  amount: z.number().transform(v => new Decimal$(v)).optional(),
});

/** @internal */
export type AgedOutstandingAmountDetail$Outbound = {
  name?: string | undefined;
  amount?: number | undefined;
};

/** @internal */
export const AgedOutstandingAmountDetail$outboundSchema: z.ZodType<
  AgedOutstandingAmountDetail$Outbound,
  z.ZodTypeDef,
  AgedOutstandingAmountDetail
> = z.object({
  name: z.string().optional(),
  amount: z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
    typeof v === "number" ? v : v.toNumber()
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgedOutstandingAmountDetail$ {
  /** @deprecated use `AgedOutstandingAmountDetail$inboundSchema` instead. */
  export const inboundSchema = AgedOutstandingAmountDetail$inboundSchema;
  /** @deprecated use `AgedOutstandingAmountDetail$outboundSchema` instead. */
  export const outboundSchema = AgedOutstandingAmountDetail$outboundSchema;
  /** @deprecated use `AgedOutstandingAmountDetail$Outbound` instead. */
  export type Outbound = AgedOutstandingAmountDetail$Outbound;
}
