/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * An indicator to cancel the dataset processing or trigger ingestion and enrichment of data.
 */
export const EndUploadSessionRequestStatus = {
  Cancel: "Cancel",
  Process: "Process",
} as const;
/**
 * An indicator to cancel the dataset processing or trigger ingestion and enrichment of data.
 */
export type EndUploadSessionRequestStatus = ClosedEnum<
  typeof EndUploadSessionRequestStatus
>;

export type EndUploadSessionRequest = {
  /**
   * An indicator to cancel the dataset processing or trigger ingestion and enrichment of data.
   */
  status?: EndUploadSessionRequestStatus | undefined;
};

/** @internal */
export const EndUploadSessionRequestStatus$inboundSchema: z.ZodNativeEnum<
  typeof EndUploadSessionRequestStatus
> = z.nativeEnum(EndUploadSessionRequestStatus);

/** @internal */
export const EndUploadSessionRequestStatus$outboundSchema: z.ZodNativeEnum<
  typeof EndUploadSessionRequestStatus
> = EndUploadSessionRequestStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EndUploadSessionRequestStatus$ {
  /** @deprecated use `EndUploadSessionRequestStatus$inboundSchema` instead. */
  export const inboundSchema = EndUploadSessionRequestStatus$inboundSchema;
  /** @deprecated use `EndUploadSessionRequestStatus$outboundSchema` instead. */
  export const outboundSchema = EndUploadSessionRequestStatus$outboundSchema;
}

/** @internal */
export const EndUploadSessionRequest$inboundSchema: z.ZodType<
  EndUploadSessionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: EndUploadSessionRequestStatus$inboundSchema.optional(),
});

/** @internal */
export type EndUploadSessionRequest$Outbound = {
  status?: string | undefined;
};

/** @internal */
export const EndUploadSessionRequest$outboundSchema: z.ZodType<
  EndUploadSessionRequest$Outbound,
  z.ZodTypeDef,
  EndUploadSessionRequest
> = z.object({
  status: EndUploadSessionRequestStatus$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EndUploadSessionRequest$ {
  /** @deprecated use `EndUploadSessionRequest$inboundSchema` instead. */
  export const inboundSchema = EndUploadSessionRequest$inboundSchema;
  /** @deprecated use `EndUploadSessionRequest$outboundSchema` instead. */
  export const outboundSchema = EndUploadSessionRequest$outboundSchema;
  /** @deprecated use `EndUploadSessionRequest$Outbound` instead. */
  export type Outbound = EndUploadSessionRequest$Outbound;
}

export function endUploadSessionRequestToJSON(
  endUploadSessionRequest: EndUploadSessionRequest,
): string {
  return JSON.stringify(
    EndUploadSessionRequest$outboundSchema.parse(endUploadSessionRequest),
  );
}

export function endUploadSessionRequestFromJSON(
  jsonString: string,
): SafeParseResult<EndUploadSessionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EndUploadSessionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EndUploadSessionRequest' from JSON`,
  );
}
