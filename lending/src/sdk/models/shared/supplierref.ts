/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Reference to the supplier the record relates to.
 */
export type SupplierRef = {
  /**
   * The supplier's unique ID
   */
  id: string;
  /**
   * The supplier's name
   */
  supplierName?: string | null | undefined;
};

/** @internal */
export const SupplierRef$inboundSchema: z.ZodType<
  SupplierRef,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  supplierName: z.nullable(z.string()).optional(),
});

/** @internal */
export type SupplierRef$Outbound = {
  id: string;
  supplierName?: string | null | undefined;
};

/** @internal */
export const SupplierRef$outboundSchema: z.ZodType<
  SupplierRef$Outbound,
  z.ZodTypeDef,
  SupplierRef
> = z.object({
  id: z.string(),
  supplierName: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SupplierRef$ {
  /** @deprecated use `SupplierRef$inboundSchema` instead. */
  export const inboundSchema = SupplierRef$inboundSchema;
  /** @deprecated use `SupplierRef$outboundSchema` instead. */
  export const outboundSchema = SupplierRef$outboundSchema;
  /** @deprecated use `SupplierRef$Outbound` instead. */
  export type Outbound = SupplierRef$Outbound;
}

export function supplierRefToJSON(supplierRef: SupplierRef): string {
  return JSON.stringify(SupplierRef$outboundSchema.parse(supplierRef));
}

export function supplierRefFromJSON(
  jsonString: string,
): SafeParseResult<SupplierRef, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SupplierRef$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SupplierRef' from JSON`,
  );
}
