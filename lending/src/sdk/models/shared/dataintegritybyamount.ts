/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Decimal as Decimal$ } from "../../types/decimal.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DataIntegrityByAmount = {
  /**
   * The percentage of the absolute value of transactions of the type specified in the route which have a match.
   */
  matchPercentage?: Decimal$ | number | undefined;
  /**
   * The sum of the absolute value of transactions of the type specified in the route which don't have a match.
   */
  unmatched?: Decimal$ | number | undefined;
  /**
   * The sum of the absolute value of transactions of the type specified in the route which have a match.
   */
  matched?: Decimal$ | number | undefined;
  /**
   * The total of unmatched and matched.
   */
  total?: Decimal$ | number | undefined;
  /**
   * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
   *
   * @remarks
   *
   * ## Unknown currencies
   *
   * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction.
   *
   * There are only a very small number of edge cases where this currency code is returned by the Codat system.
   */
  currency?: string | undefined;
};

/** @internal */
export const DataIntegrityByAmount$inboundSchema: z.ZodType<
  DataIntegrityByAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  matchPercentage: z.number().transform(v => new Decimal$(v)).optional(),
  unmatched: z.number().transform(v => new Decimal$(v)).optional(),
  matched: z.number().transform(v => new Decimal$(v)).optional(),
  total: z.number().transform(v => new Decimal$(v)).optional(),
  currency: z.string().optional(),
});

/** @internal */
export type DataIntegrityByAmount$Outbound = {
  matchPercentage?: number | undefined;
  unmatched?: number | undefined;
  matched?: number | undefined;
  total?: number | undefined;
  currency?: string | undefined;
};

/** @internal */
export const DataIntegrityByAmount$outboundSchema: z.ZodType<
  DataIntegrityByAmount$Outbound,
  z.ZodTypeDef,
  DataIntegrityByAmount
> = z.object({
  matchPercentage: z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
    typeof v === "number" ? v : v.toNumber()
  ).optional(),
  unmatched: z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
    typeof v === "number" ? v : v.toNumber()
  ).optional(),
  matched: z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
    typeof v === "number" ? v : v.toNumber()
  ).optional(),
  total: z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
    typeof v === "number" ? v : v.toNumber()
  ).optional(),
  currency: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DataIntegrityByAmount$ {
  /** @deprecated use `DataIntegrityByAmount$inboundSchema` instead. */
  export const inboundSchema = DataIntegrityByAmount$inboundSchema;
  /** @deprecated use `DataIntegrityByAmount$outboundSchema` instead. */
  export const outboundSchema = DataIntegrityByAmount$outboundSchema;
  /** @deprecated use `DataIntegrityByAmount$Outbound` instead. */
  export type Outbound = DataIntegrityByAmount$Outbound;
}

export function dataIntegrityByAmountToJSON(
  dataIntegrityByAmount: DataIntegrityByAmount,
): string {
  return JSON.stringify(
    DataIntegrityByAmount$outboundSchema.parse(dataIntegrityByAmount),
  );
}

export function dataIntegrityByAmountFromJSON(
  jsonString: string,
): SafeParseResult<DataIntegrityByAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DataIntegrityByAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DataIntegrityByAmount' from JSON`,
  );
}
