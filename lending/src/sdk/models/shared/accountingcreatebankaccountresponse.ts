/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { Decimal as Decimal$ } from "../../types/decimal.js";
import {
  AccountingBankAccountType,
  AccountingBankAccountType$inboundSchema,
  AccountingBankAccountType$outboundSchema,
} from "./accountingbankaccounttype.js";
import {
  BankAccountStatus,
  BankAccountStatus$inboundSchema,
  BankAccountStatus$outboundSchema,
} from "./bankaccountstatus.js";
import {
  Metadata,
  Metadata$inboundSchema,
  Metadata$Outbound,
  Metadata$outboundSchema,
} from "./metadata.js";
import {
  PropertieDataType,
  PropertieDataType$inboundSchema,
  PropertieDataType$outboundSchema,
} from "./propertiedatatype.js";
import {
  PushOperationChange,
  PushOperationChange$inboundSchema,
  PushOperationChange$Outbound,
  PushOperationChange$outboundSchema,
} from "./pushoperationchange.js";
import {
  PushOperationStatus,
  PushOperationStatus$inboundSchema,
  PushOperationStatus$outboundSchema,
} from "./pushoperationstatus.js";
import {
  SupplementalData,
  SupplementalData$inboundSchema,
  SupplementalData$Outbound,
  SupplementalData$outboundSchema,
} from "./supplementaldata.js";
import {
  Validation,
  Validation$inboundSchema,
  Validation$Outbound,
  Validation$outboundSchema,
} from "./validation.js";

/**
 * > **Accessing Bank Accounts through Banking API**
 *
 * @remarks
 * >
 * > This datatype was originally used for accessing bank account data both in accounting integrations and open banking aggregators.
 * >
 * > To view bank account data through the Banking API, please refer to the new datatype [here](https://docs.codat.io/lending-api#/schemas/Account)
 *
 * > View the coverage for bank accounts in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=bankAccounts" target="_blank">Data coverage explorer</a>.
 *
 * ## Overview
 *
 * A list of bank accounts associated with a company and a specific data connection.
 *
 * Bank accounts data includes:
 * * The name and ID of the account in the accounting software.
 * * The currency and balance of the account.
 * * The sort code and account number.
 *
 * @deprecated class: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export type AccountingCreateBankAccountResponseAccountingBankAccount = {
  modifiedDate?: string | undefined;
  sourceModifiedDate?: string | undefined;
  /**
   * Identifier for the account, unique for the company in the accounting software.
   */
  id?: string | undefined;
  /**
   * Name of the bank account in the accounting software.
   */
  accountName?: string | null | undefined;
  /**
   * The type of transactions and balances on the account.
   *
   * @remarks
   * For Credit accounts, positive balances are liabilities, and positive transactions **reduce** liabilities.
   * For Debit accounts, positive balances are assets, and positive transactions **increase** assets.
   */
  accountType?: AccountingBankAccountType | undefined;
  /**
   * Code used to identify each nominal account for a business.
   */
  nominalCode?: string | null | undefined;
  /**
   * Sort code for the bank account.
   *
   * @remarks
   *
   * Xero integrations
   * The sort code is only displayed when the currency = GBP and the sort code and account number sum to 14 digits. For non-GBP accounts, this field is not populated.
   */
  sortCode?: string | null | undefined;
  /**
   * Account number for the bank account.
   *
   * @remarks
   *
   * Xero integrations
   * Only a UK account number shows for bank accounts with GBP currency and a combined total of sort code and account number that equals 14 digits, For non-GBP accounts, the full bank account number is populated.
   *
   * FreeAgent integrations
   * For Credit accounts, only the last four digits are required. For other types, the field is optional.
   */
  accountNumber?: string | null | undefined;
  /**
   * International bank account number of the account. Often used when making or receiving international payments.
   */
  iBan?: string | null | undefined;
  /**
   * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
   *
   * @remarks
   *
   * ## Unknown currencies
   *
   * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction.
   *
   * There are only a very small number of edge cases where this currency code is returned by the Codat system.
   */
  currency?: string | undefined;
  /**
   * Balance of the bank account.
   */
  balance?: Decimal$ | number | null | undefined;
  /**
   * The institution of the bank account.
   */
  institution?: string | null | undefined;
  /**
   * Total available balance of the bank account as reported by the underlying data source. This may take into account overdrafts or pending transactions for example.
   */
  availableBalance?: Decimal$ | number | null | undefined;
  /**
   * Pre-arranged overdraft limit of the account.
   *
   * @remarks
   *
   * The value is always positive. For example, an overdraftLimit of `1000` means that the balance of the account can go down to `-1000`.
   */
  overdraftLimit?: Decimal$ | number | null | undefined;
  /**
   * Status of the bank account.
   */
  status?: BankAccountStatus | undefined;
  metadata?: Metadata | undefined;
  /**
   * Supplemental data is additional data you can include in our standard data types.
   *
   * @remarks
   *
   * It is referenced as a configured dynamic key value pair that is unique to the accounting software. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
   */
  supplementalData?: SupplementalData | undefined;
};

export type AccountingCreateBankAccountResponse = {
  data?:
    | AccountingCreateBankAccountResponseAccountingBankAccount
    | null
    | undefined;
  /**
   * Contains a single entry that communicates which record has changed and the manner in which it changed.
   */
  changes?: Array<PushOperationChange> | null | undefined;
  /**
   * Available data types
   */
  dataType?: PropertieDataType | undefined;
  /**
   * Unique identifier for your SMB in Codat.
   */
  companyId: string;
  /**
   * A unique identifier generated by Codat to represent this single push operation. This identifier can be used to track the status of the push, and should be persisted.
   */
  pushOperationKey: string;
  /**
   * Unique identifier for a company's data connection.
   */
  dataConnectionKey: string;
  /**
   * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
   *
   * @remarks
   *
   * ```
   * 2020-10-08T22:40:50Z
   * 2021-01-01T00:00:00
   * ```
   *
   * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
   *
   * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
   * - Unqualified local time: `2021-11-15T01:00:00`
   * - UTC time offsets: `2021-11-15T01:00:00-05:00`
   *
   * > Time zones
   * >
   * > Not all dates from Codat will contain information about time zones.
   * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
   */
  requestedOnUtc: string;
  /**
   * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
   *
   * @remarks
   *
   * ```
   * 2020-10-08T22:40:50Z
   * 2021-01-01T00:00:00
   * ```
   *
   * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
   *
   * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
   * - Unqualified local time: `2021-11-15T01:00:00`
   * - UTC time offsets: `2021-11-15T01:00:00-05:00`
   *
   * > Time zones
   * >
   * > Not all dates from Codat will contain information about time zones.
   * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
   */
  completedOnUtc?: string | undefined;
  /**
   * Number of minutes the push operation must complete within before it times out.
   */
  timeoutInMinutes?: number | null | undefined;
  /**
   * Number of seconds the push operation must complete within before it times out.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  timeoutInSeconds?: number | null | undefined;
  /**
   * The current status of the push operation.
   */
  status: PushOperationStatus;
  /**
   * A message about the error.
   */
  errorMessage?: string | null | undefined;
  /**
   * A human-readable object describing validation decisions Codat has made when pushing data into the platform. If a push has failed because of validation errors, they will be detailed here.
   */
  validation?: Validation | undefined;
  /**
   * Push status code.
   */
  statusCode: number;
};

/** @internal */
export const AccountingCreateBankAccountResponseAccountingBankAccount$inboundSchema:
  z.ZodType<
    AccountingCreateBankAccountResponseAccountingBankAccount,
    z.ZodTypeDef,
    unknown
  > = z.object({
    modifiedDate: z.string().optional(),
    sourceModifiedDate: z.string().optional(),
    id: z.string().optional(),
    accountName: z.nullable(z.string()).optional(),
    accountType: AccountingBankAccountType$inboundSchema.optional(),
    nominalCode: z.nullable(z.string()).optional(),
    sortCode: z.nullable(z.string()).optional(),
    accountNumber: z.nullable(z.string()).optional(),
    iBan: z.nullable(z.string()).optional(),
    currency: z.string().optional(),
    balance: z.nullable(z.number().transform(v => new Decimal$(v))).optional(),
    institution: z.nullable(z.string()).optional(),
    availableBalance: z.nullable(z.number().transform(v => new Decimal$(v)))
      .optional(),
    overdraftLimit: z.nullable(z.number().transform(v => new Decimal$(v)))
      .optional(),
    status: BankAccountStatus$inboundSchema.optional(),
    metadata: Metadata$inboundSchema.optional(),
    supplementalData: SupplementalData$inboundSchema.optional(),
  });

/** @internal */
export type AccountingCreateBankAccountResponseAccountingBankAccount$Outbound =
  {
    modifiedDate?: string | undefined;
    sourceModifiedDate?: string | undefined;
    id?: string | undefined;
    accountName?: string | null | undefined;
    accountType?: string | undefined;
    nominalCode?: string | null | undefined;
    sortCode?: string | null | undefined;
    accountNumber?: string | null | undefined;
    iBan?: string | null | undefined;
    currency?: string | undefined;
    balance?: number | null | undefined;
    institution?: string | null | undefined;
    availableBalance?: number | null | undefined;
    overdraftLimit?: number | null | undefined;
    status?: string | undefined;
    metadata?: Metadata$Outbound | undefined;
    supplementalData?: SupplementalData$Outbound | undefined;
  };

/** @internal */
export const AccountingCreateBankAccountResponseAccountingBankAccount$outboundSchema:
  z.ZodType<
    AccountingCreateBankAccountResponseAccountingBankAccount$Outbound,
    z.ZodTypeDef,
    AccountingCreateBankAccountResponseAccountingBankAccount
  > = z.object({
    modifiedDate: z.string().optional(),
    sourceModifiedDate: z.string().optional(),
    id: z.string().optional(),
    accountName: z.nullable(z.string()).optional(),
    accountType: AccountingBankAccountType$outboundSchema.optional(),
    nominalCode: z.nullable(z.string()).optional(),
    sortCode: z.nullable(z.string()).optional(),
    accountNumber: z.nullable(z.string()).optional(),
    iBan: z.nullable(z.string()).optional(),
    currency: z.string().optional(),
    balance: z.nullable(
      z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
        typeof v === "number" ? v : v.toNumber()
      ),
    ).optional(),
    institution: z.nullable(z.string()).optional(),
    availableBalance: z.nullable(
      z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
        typeof v === "number" ? v : v.toNumber()
      ),
    ).optional(),
    overdraftLimit: z.nullable(
      z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
        typeof v === "number" ? v : v.toNumber()
      ),
    ).optional(),
    status: BankAccountStatus$outboundSchema.optional(),
    metadata: Metadata$outboundSchema.optional(),
    supplementalData: SupplementalData$outboundSchema.optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingCreateBankAccountResponseAccountingBankAccount$ {
  /** @deprecated use `AccountingCreateBankAccountResponseAccountingBankAccount$inboundSchema` instead. */
  export const inboundSchema =
    AccountingCreateBankAccountResponseAccountingBankAccount$inboundSchema;
  /** @deprecated use `AccountingCreateBankAccountResponseAccountingBankAccount$outboundSchema` instead. */
  export const outboundSchema =
    AccountingCreateBankAccountResponseAccountingBankAccount$outboundSchema;
  /** @deprecated use `AccountingCreateBankAccountResponseAccountingBankAccount$Outbound` instead. */
  export type Outbound =
    AccountingCreateBankAccountResponseAccountingBankAccount$Outbound;
}

/** @internal */
export const AccountingCreateBankAccountResponse$inboundSchema: z.ZodType<
  AccountingCreateBankAccountResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.nullable(
    z.lazy(() =>
      AccountingCreateBankAccountResponseAccountingBankAccount$inboundSchema
    ),
  ).optional(),
  changes: z.nullable(z.array(PushOperationChange$inboundSchema)).optional(),
  dataType: PropertieDataType$inboundSchema.optional(),
  companyId: z.string(),
  pushOperationKey: z.string(),
  dataConnectionKey: z.string(),
  requestedOnUtc: z.string(),
  completedOnUtc: z.string().optional(),
  timeoutInMinutes: z.nullable(z.number().int()).optional(),
  timeoutInSeconds: z.nullable(z.number().int()).optional(),
  status: PushOperationStatus$inboundSchema,
  errorMessage: z.nullable(z.string()).optional(),
  validation: Validation$inboundSchema.optional(),
  statusCode: z.number().int(),
});

/** @internal */
export type AccountingCreateBankAccountResponse$Outbound = {
  data?:
    | AccountingCreateBankAccountResponseAccountingBankAccount$Outbound
    | null
    | undefined;
  changes?: Array<PushOperationChange$Outbound> | null | undefined;
  dataType?: string | undefined;
  companyId: string;
  pushOperationKey: string;
  dataConnectionKey: string;
  requestedOnUtc: string;
  completedOnUtc?: string | undefined;
  timeoutInMinutes?: number | null | undefined;
  timeoutInSeconds?: number | null | undefined;
  status: string;
  errorMessage?: string | null | undefined;
  validation?: Validation$Outbound | undefined;
  statusCode: number;
};

/** @internal */
export const AccountingCreateBankAccountResponse$outboundSchema: z.ZodType<
  AccountingCreateBankAccountResponse$Outbound,
  z.ZodTypeDef,
  AccountingCreateBankAccountResponse
> = z.object({
  data: z.nullable(
    z.lazy(() =>
      AccountingCreateBankAccountResponseAccountingBankAccount$outboundSchema
    ),
  ).optional(),
  changes: z.nullable(z.array(PushOperationChange$outboundSchema)).optional(),
  dataType: PropertieDataType$outboundSchema.optional(),
  companyId: z.string(),
  pushOperationKey: z.string(),
  dataConnectionKey: z.string(),
  requestedOnUtc: z.string(),
  completedOnUtc: z.string().optional(),
  timeoutInMinutes: z.nullable(z.number().int()).optional(),
  timeoutInSeconds: z.nullable(z.number().int()).optional(),
  status: PushOperationStatus$outboundSchema,
  errorMessage: z.nullable(z.string()).optional(),
  validation: Validation$outboundSchema.optional(),
  statusCode: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingCreateBankAccountResponse$ {
  /** @deprecated use `AccountingCreateBankAccountResponse$inboundSchema` instead. */
  export const inboundSchema =
    AccountingCreateBankAccountResponse$inboundSchema;
  /** @deprecated use `AccountingCreateBankAccountResponse$outboundSchema` instead. */
  export const outboundSchema =
    AccountingCreateBankAccountResponse$outboundSchema;
  /** @deprecated use `AccountingCreateBankAccountResponse$Outbound` instead. */
  export type Outbound = AccountingCreateBankAccountResponse$Outbound;
}
