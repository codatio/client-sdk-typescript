/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AccountIdentifierType,
  AccountIdentifierType$inboundSchema,
  AccountIdentifierType$outboundSchema,
} from "./accountidentifiertype.js";

/**
 * An object containing bank account identification information.
 */
export type AccountIdentifiers = {
  /**
   * Type of account
   */
  type: AccountIdentifierType;
  /**
   * Detailed account category
   */
  subtype?: string | null | undefined;
  /**
   * The account number for the account. When combined with the`bankCode`, this is usually enough to uniquely identify an account within a jurisdiction.
   */
  number?: string | null | undefined;
  /**
   * The local (usually national) routing number for the account.
   *
   * @remarks
   *
   * This is known by different names in different countries:
   * * BSB code (Australia)
   * * routing number (Canada, USA)
   * * sort code (UK)
   */
  bankCode?: string | null | undefined;
  /**
   * The international bank account number (IBAN) for the account, if known.
   */
  iban?: string | null | undefined;
  /**
   * The ISO 9362 code (commonly called SWIFT code, SWIFT-BIC or BIC) for the account.
   */
  bic?: string | null | undefined;
  /**
   * A portion of the actual account `number` to help account identification where number is tokenised (Plaid only)
   */
  maskedAccountNumber?: string | null | undefined;
};

/** @internal */
export const AccountIdentifiers$inboundSchema: z.ZodType<
  AccountIdentifiers,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: AccountIdentifierType$inboundSchema,
  subtype: z.nullable(z.string()).optional(),
  number: z.nullable(z.string()).optional(),
  bankCode: z.nullable(z.string()).optional(),
  iban: z.nullable(z.string()).optional(),
  bic: z.nullable(z.string()).optional(),
  maskedAccountNumber: z.nullable(z.string()).optional(),
});

/** @internal */
export type AccountIdentifiers$Outbound = {
  type: string;
  subtype?: string | null | undefined;
  number?: string | null | undefined;
  bankCode?: string | null | undefined;
  iban?: string | null | undefined;
  bic?: string | null | undefined;
  maskedAccountNumber?: string | null | undefined;
};

/** @internal */
export const AccountIdentifiers$outboundSchema: z.ZodType<
  AccountIdentifiers$Outbound,
  z.ZodTypeDef,
  AccountIdentifiers
> = z.object({
  type: AccountIdentifierType$outboundSchema,
  subtype: z.nullable(z.string()).optional(),
  number: z.nullable(z.string()).optional(),
  bankCode: z.nullable(z.string()).optional(),
  iban: z.nullable(z.string()).optional(),
  bic: z.nullable(z.string()).optional(),
  maskedAccountNumber: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountIdentifiers$ {
  /** @deprecated use `AccountIdentifiers$inboundSchema` instead. */
  export const inboundSchema = AccountIdentifiers$inboundSchema;
  /** @deprecated use `AccountIdentifiers$outboundSchema` instead. */
  export const outboundSchema = AccountIdentifiers$outboundSchema;
  /** @deprecated use `AccountIdentifiers$Outbound` instead. */
  export type Outbound = AccountIdentifiers$Outbound;
}

export function accountIdentifiersToJSON(
  accountIdentifiers: AccountIdentifiers,
): string {
  return JSON.stringify(
    AccountIdentifiers$outboundSchema.parse(accountIdentifiers),
  );
}

export function accountIdentifiersFromJSON(
  jsonString: string,
): SafeParseResult<AccountIdentifiers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountIdentifiers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountIdentifiers' from JSON`,
  );
}
