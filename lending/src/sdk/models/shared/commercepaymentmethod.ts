/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Status of the Payment Method.
 */
export const CommercePaymentMethodStatus = {
  Unknown: "Unknown",
  Active: "Active",
  Archived: "Archived",
} as const;
/**
 * Status of the Payment Method.
 */
export type CommercePaymentMethodStatus = ClosedEnum<
  typeof CommercePaymentMethodStatus
>;

/**
 * A Payment Method represents the payment method(s) used to make payments.
 */
export type CommercePaymentMethod = {
  modifiedDate?: string | undefined;
  sourceModifiedDate?: string | undefined;
  /**
   * A unique, persistent identifier for this record
   */
  id: string;
  /**
   * The name of the PaymentMethod
   */
  name?: string | undefined;
  /**
   * Status of the Payment Method.
   */
  status?: CommercePaymentMethodStatus | undefined;
};

/** @internal */
export const CommercePaymentMethodStatus$inboundSchema: z.ZodNativeEnum<
  typeof CommercePaymentMethodStatus
> = z.nativeEnum(CommercePaymentMethodStatus);

/** @internal */
export const CommercePaymentMethodStatus$outboundSchema: z.ZodNativeEnum<
  typeof CommercePaymentMethodStatus
> = CommercePaymentMethodStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CommercePaymentMethodStatus$ {
  /** @deprecated use `CommercePaymentMethodStatus$inboundSchema` instead. */
  export const inboundSchema = CommercePaymentMethodStatus$inboundSchema;
  /** @deprecated use `CommercePaymentMethodStatus$outboundSchema` instead. */
  export const outboundSchema = CommercePaymentMethodStatus$outboundSchema;
}

/** @internal */
export const CommercePaymentMethod$inboundSchema: z.ZodType<
  CommercePaymentMethod,
  z.ZodTypeDef,
  unknown
> = z.object({
  modifiedDate: z.string().optional(),
  sourceModifiedDate: z.string().optional(),
  id: z.string(),
  name: z.string().optional(),
  status: CommercePaymentMethodStatus$inboundSchema.optional(),
});

/** @internal */
export type CommercePaymentMethod$Outbound = {
  modifiedDate?: string | undefined;
  sourceModifiedDate?: string | undefined;
  id: string;
  name?: string | undefined;
  status?: string | undefined;
};

/** @internal */
export const CommercePaymentMethod$outboundSchema: z.ZodType<
  CommercePaymentMethod$Outbound,
  z.ZodTypeDef,
  CommercePaymentMethod
> = z.object({
  modifiedDate: z.string().optional(),
  sourceModifiedDate: z.string().optional(),
  id: z.string(),
  name: z.string().optional(),
  status: CommercePaymentMethodStatus$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CommercePaymentMethod$ {
  /** @deprecated use `CommercePaymentMethod$inboundSchema` instead. */
  export const inboundSchema = CommercePaymentMethod$inboundSchema;
  /** @deprecated use `CommercePaymentMethod$outboundSchema` instead. */
  export const outboundSchema = CommercePaymentMethod$outboundSchema;
  /** @deprecated use `CommercePaymentMethod$Outbound` instead. */
  export type Outbound = CommercePaymentMethod$Outbound;
}

export function commercePaymentMethodToJSON(
  commercePaymentMethod: CommercePaymentMethod,
): string {
  return JSON.stringify(
    CommercePaymentMethod$outboundSchema.parse(commercePaymentMethod),
  );
}

export function commercePaymentMethodFromJSON(
  jsonString: string,
): SafeParseResult<CommercePaymentMethod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CommercePaymentMethod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CommercePaymentMethod' from JSON`,
  );
}
