/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Decimal as Decimal$ } from "../../types/decimal.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AccountingPaymentAllocation,
  AccountingPaymentAllocation$inboundSchema,
  AccountingPaymentAllocation$Outbound,
  AccountingPaymentAllocation$outboundSchema,
} from "./accountingpaymentallocation.js";
import {
  AccountingRecordRef,
  AccountingRecordRef$inboundSchema,
  AccountingRecordRef$Outbound,
  AccountingRecordRef$outboundSchema,
} from "./accountingrecordref.js";
import {
  BillCreditNoteLineItem,
  BillCreditNoteLineItem$inboundSchema,
  BillCreditNoteLineItem$Outbound,
  BillCreditNoteLineItem$outboundSchema,
} from "./billcreditnotelineitem.js";
import {
  BillCreditNoteStatus,
  BillCreditNoteStatus$inboundSchema,
  BillCreditNoteStatus$outboundSchema,
} from "./billcreditnotestatus.js";
import {
  Items,
  Items$inboundSchema,
  Items$Outbound,
  Items$outboundSchema,
} from "./items.js";
import {
  Metadata,
  Metadata$inboundSchema,
  Metadata$Outbound,
  Metadata$outboundSchema,
} from "./metadata.js";
import {
  SupplementalData,
  SupplementalData$inboundSchema,
  SupplementalData$Outbound,
  SupplementalData$outboundSchema,
} from "./supplementaldata.js";
import {
  SupplierRef,
  SupplierRef$inboundSchema,
  SupplierRef$Outbound,
  SupplierRef$outboundSchema,
} from "./supplierref.js";

/**
 * > **Bill credit notes or credit notes?**
 *
 * @remarks
 * >
 * > In Codat, bill credit notes represent accounts payable only. For accounts receivable, see [Credit notes](https://docs.codat.io/lending-api#/schemas/CreditNote).
 *
 * ## Overview
 *
 * A bill credit note is issued by a supplier for the purpose of recording credit. For example, if a supplier was unable to fulfil an order that was placed by a business, or delivered damaged goods, they would issue a bill credit note. A bill credit note reduces the amount a business owes to the supplier. It can be refunded to the business or used to pay off future bills.
 *
 * In the Codat API, a bill credit note is an accounts payable record issued by a [supplier](https://docs.codat.io/lending-api#/schemas/Supplier).
 *
 * A bill credit note includes details of:
 * * The original and remaining credit.
 * * Any allocations of the credit against other records, such as [bills](https://docs.codat.io/lending-api#/schemas/Bill).
 * * The supplier that issued the bill credit note.
 */
export type AccountingBillCreditNote = {
  modifiedDate?: string | undefined;
  sourceModifiedDate?: string | undefined;
  /**
   * Identifier for the bill credit note that is unique to a company in the accounting software.
   */
  id?: string | undefined;
  /**
   * Friendly reference for the bill credit note.
   */
  billCreditNoteNumber?: string | null | undefined;
  /**
   * Reference to the supplier the record relates to.
   */
  supplierRef?: SupplierRef | undefined;
  withholdingTax?: Array<Items> | null | undefined;
  /**
   * Total amount of credit that has been applied to the business' account with the supplier, including discounts and tax.
   */
  totalAmount: Decimal$ | number;
  /**
   * Total value of any discounts applied.
   */
  totalDiscount: Decimal$ | number;
  /**
   * Total amount of the bill credit note, including discounts but excluding tax.
   */
  subTotal: Decimal$ | number;
  /**
   * Amount of tax included in the bill credit note.
   */
  totalTaxAmount: Decimal$ | number;
  /**
   * Percentage rate of any discount applied to the bill credit note.
   */
  discountPercentage: Decimal$ | number;
  /**
   * Amount of the bill credit note that is still outstanding.
   */
  remainingCredit?: Decimal$ | number | undefined;
  /**
   * Current state of the bill credit note
   */
  status: BillCreditNoteStatus;
  /**
   * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
   *
   * @remarks
   *
   * ```
   * 2020-10-08T22:40:50Z
   * 2021-01-01T00:00:00
   * ```
   *
   * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
   *
   * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
   * - Unqualified local time: `2021-11-15T01:00:00`
   * - UTC time offsets: `2021-11-15T01:00:00-05:00`
   *
   * > Time zones
   * >
   * > Not all dates from Codat will contain information about time zones.
   * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
   */
  issueDate?: string | undefined;
  /**
   * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
   *
   * @remarks
   *
   * ```
   * 2020-10-08T22:40:50Z
   * 2021-01-01T00:00:00
   * ```
   *
   * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
   *
   * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
   * - Unqualified local time: `2021-11-15T01:00:00`
   * - UTC time offsets: `2021-11-15T01:00:00-05:00`
   *
   * > Time zones
   * >
   * > Not all dates from Codat will contain information about time zones.
   * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
   */
  allocatedOnDate?: string | undefined;
  /**
   * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
   *
   * @remarks
   *
   * ## Unknown currencies
   *
   * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction.
   *
   * There are only a very small number of edge cases where this currency code is returned by the Codat system.
   */
  currency?: string | undefined;
  /**
   * Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
   *
   * @remarks
   *
   * Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.
   *
   * It is not possible to perform the currency conversion with two or more non-base currencies participating in the transaction. For example, if a company's base currency is USD, and it has a bill issued in EUR, then the bill payment must happen in USD or EUR.
   *
   * Where the currency rate is provided by the underlying accounting software, it will be available from Codat with the same precision (up to a maximum of 9 decimal places).
   *
   * For accounting software which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
   *
   * ## Examples with base currency of GBP
   *
   * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
   * | :--------------- | :------------- | :------------ | :------------------------- |
   * | **USD**          | $20            | 0.781         | £15.62                     |
   * | **EUR**          | €20            | 0.885         | £17.70                     |
   * | **RUB**          | ₽20            | 0.011         | £0.22                      |
   *
   * ## Examples with base currency of USD
   *
   * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
   * | :--------------- | :------------- | :------------ | :------------------------- |
   * | **GBP**          | £20            | 1.277         | $25.54                     |
   * | **EUR**          | €20            | 1.134         | $22.68                     |
   * | **RUB**          | ₽20            | 0.015         | $0.30                      |
   *
   * ### Integration-specific details
   *
   * | Integration       | Scenario                                        | System behavior                                                                                                                                                      |
   * |-------------------|-------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|
   * | QuickBooks Online | Transaction currency differs from base currency | If currency rate value is left `null`, a rate of 1 will be used by QBO by default. To override this, specify a currencyRate in the request body.  |
   */
  currencyRate?: Decimal$ | number | null | undefined;
  /**
   * An array of line
   */
  lineItems?: Array<BillCreditNoteLineItem> | null | undefined;
  /**
   * An array of payment allocations.
   */
  paymentAllocations?: Array<AccountingPaymentAllocation> | null | undefined;
  /**
   * An array of records the credit note was created from.
   */
  createdFromRefs?: Array<AccountingRecordRef> | null | undefined;
  /**
   * Any additional information about the bill credit note.
   */
  note?: string | null | undefined;
  /**
   * Supplemental data is additional data you can include in our standard data types.
   *
   * @remarks
   *
   * It is referenced as a configured dynamic key value pair that is unique to the accounting software. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
   */
  supplementalData?: SupplementalData | undefined;
  metadata?: Metadata | undefined;
};

/** @internal */
export const AccountingBillCreditNote$inboundSchema: z.ZodType<
  AccountingBillCreditNote,
  z.ZodTypeDef,
  unknown
> = z.object({
  modifiedDate: z.string().optional(),
  sourceModifiedDate: z.string().optional(),
  id: z.string().optional(),
  billCreditNoteNumber: z.nullable(z.string()).optional(),
  supplierRef: SupplierRef$inboundSchema.optional(),
  withholdingTax: z.nullable(z.array(Items$inboundSchema)).optional(),
  totalAmount: z.number().transform(v => new Decimal$(v)),
  totalDiscount: z.number().transform(v => new Decimal$(v)),
  subTotal: z.number().transform(v => new Decimal$(v)),
  totalTaxAmount: z.number().transform(v => new Decimal$(v)),
  discountPercentage: z.number().transform(v => new Decimal$(v)),
  remainingCredit: z.number().transform(v => new Decimal$(v)).optional(),
  status: BillCreditNoteStatus$inboundSchema,
  issueDate: z.string().optional(),
  allocatedOnDate: z.string().optional(),
  currency: z.string().optional(),
  currencyRate: z.nullable(z.number().transform(v => new Decimal$(v)))
    .optional(),
  lineItems: z.nullable(z.array(BillCreditNoteLineItem$inboundSchema))
    .optional(),
  paymentAllocations: z.nullable(
    z.array(AccountingPaymentAllocation$inboundSchema),
  ).optional(),
  createdFromRefs: z.nullable(z.array(AccountingRecordRef$inboundSchema))
    .optional(),
  note: z.nullable(z.string()).optional(),
  supplementalData: SupplementalData$inboundSchema.optional(),
  metadata: Metadata$inboundSchema.optional(),
});

/** @internal */
export type AccountingBillCreditNote$Outbound = {
  modifiedDate?: string | undefined;
  sourceModifiedDate?: string | undefined;
  id?: string | undefined;
  billCreditNoteNumber?: string | null | undefined;
  supplierRef?: SupplierRef$Outbound | undefined;
  withholdingTax?: Array<Items$Outbound> | null | undefined;
  totalAmount: number;
  totalDiscount: number;
  subTotal: number;
  totalTaxAmount: number;
  discountPercentage: number;
  remainingCredit?: number | undefined;
  status: string;
  issueDate?: string | undefined;
  allocatedOnDate?: string | undefined;
  currency?: string | undefined;
  currencyRate?: number | null | undefined;
  lineItems?: Array<BillCreditNoteLineItem$Outbound> | null | undefined;
  paymentAllocations?:
    | Array<AccountingPaymentAllocation$Outbound>
    | null
    | undefined;
  createdFromRefs?: Array<AccountingRecordRef$Outbound> | null | undefined;
  note?: string | null | undefined;
  supplementalData?: SupplementalData$Outbound | undefined;
  metadata?: Metadata$Outbound | undefined;
};

/** @internal */
export const AccountingBillCreditNote$outboundSchema: z.ZodType<
  AccountingBillCreditNote$Outbound,
  z.ZodTypeDef,
  AccountingBillCreditNote
> = z.object({
  modifiedDate: z.string().optional(),
  sourceModifiedDate: z.string().optional(),
  id: z.string().optional(),
  billCreditNoteNumber: z.nullable(z.string()).optional(),
  supplierRef: SupplierRef$outboundSchema.optional(),
  withholdingTax: z.nullable(z.array(Items$outboundSchema)).optional(),
  totalAmount: z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
    typeof v === "number" ? v : v.toNumber()
  ),
  totalDiscount: z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
    typeof v === "number" ? v : v.toNumber()
  ),
  subTotal: z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
    typeof v === "number" ? v : v.toNumber()
  ),
  totalTaxAmount: z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
    typeof v === "number" ? v : v.toNumber()
  ),
  discountPercentage: z.union([z.instanceof(Decimal$), z.number()]).transform(
    v => typeof v === "number" ? v : v.toNumber()
  ),
  remainingCredit: z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
    typeof v === "number" ? v : v.toNumber()
  ).optional(),
  status: BillCreditNoteStatus$outboundSchema,
  issueDate: z.string().optional(),
  allocatedOnDate: z.string().optional(),
  currency: z.string().optional(),
  currencyRate: z.nullable(
    z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
      typeof v === "number" ? v : v.toNumber()
    ),
  ).optional(),
  lineItems: z.nullable(z.array(BillCreditNoteLineItem$outboundSchema))
    .optional(),
  paymentAllocations: z.nullable(
    z.array(AccountingPaymentAllocation$outboundSchema),
  ).optional(),
  createdFromRefs: z.nullable(z.array(AccountingRecordRef$outboundSchema))
    .optional(),
  note: z.nullable(z.string()).optional(),
  supplementalData: SupplementalData$outboundSchema.optional(),
  metadata: Metadata$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingBillCreditNote$ {
  /** @deprecated use `AccountingBillCreditNote$inboundSchema` instead. */
  export const inboundSchema = AccountingBillCreditNote$inboundSchema;
  /** @deprecated use `AccountingBillCreditNote$outboundSchema` instead. */
  export const outboundSchema = AccountingBillCreditNote$outboundSchema;
  /** @deprecated use `AccountingBillCreditNote$Outbound` instead. */
  export type Outbound = AccountingBillCreditNote$Outbound;
}

export function accountingBillCreditNoteToJSON(
  accountingBillCreditNote: AccountingBillCreditNote,
): string {
  return JSON.stringify(
    AccountingBillCreditNote$outboundSchema.parse(accountingBillCreditNote),
  );
}

export function accountingBillCreditNoteFromJSON(
  jsonString: string,
): SafeParseResult<AccountingBillCreditNote, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingBillCreditNote$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingBillCreditNote' from JSON`,
  );
}
