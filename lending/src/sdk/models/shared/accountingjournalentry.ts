/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  JournalEntryRecordRef,
  JournalEntryRecordRef$inboundSchema,
  JournalEntryRecordRef$Outbound,
  JournalEntryRecordRef$outboundSchema,
} from "./journalentryrecordref.js";
import {
  JournalLine,
  JournalLine$inboundSchema,
  JournalLine$Outbound,
  JournalLine$outboundSchema,
} from "./journalline.js";
import {
  JournalRef,
  JournalRef$inboundSchema,
  JournalRef$Outbound,
  JournalRef$outboundSchema,
} from "./journalref.js";
import {
  Metadata,
  Metadata$inboundSchema,
  Metadata$Outbound,
  Metadata$outboundSchema,
} from "./metadata.js";
import {
  SupplementalData,
  SupplementalData$inboundSchema,
  SupplementalData$Outbound,
  SupplementalData$outboundSchema,
} from "./supplementaldata.js";

/**
 * > **Language tip:** For the top-level record of a company's financial transactions, refer to the [Journals](https://docs.codat.io/lending-api#/schemas/Journal) data type
 *
 * @remarks
 *
 * ## Overview
 *
 * A journal entry report shows the entries made in a company's general ledger, or [accounts](https://docs.codat.io/lending-api#/schemas/Account), when transactions are approved. The journal line items for each journal entry should balance.
 *
 * A journal entry line item is a single transaction line on the journal entry. For example:
 *
 * - When a journal entry is recording a receipt of cash, the credit to accounts receivable and the debit to cash are separate line items.
 * - When a company needs to recognise revenue from an annual contract on a monthly basis, on receipt of cash for month one, they make a debit to deferred income and a credit to revenue.
 *
 * In Codat a journal entry contains details of:
 *
 * - The date on which the entry was created and posted.
 * - Itemised lines, including amounts and currency.
 * - A reference to the associated accounts.
 * - A reference to the underlying record. For example, the invoice, bill, or other data type that triggered the posting of the journal entry to the general ledger.
 *
 * > **Pushing journal entries**
 * > Codat only supports journal entries in the base currency of the company that are pushed into accounts denominated in the same base currency.
 */
export type AccountingJournalEntry = {
  modifiedDate?: string | undefined;
  sourceModifiedDate?: string | undefined;
  /**
   * Unique identifier of the journal entry for the company in the accounting software.
   */
  id?: string | undefined;
  /**
   * Optional description of the journal entry.
   */
  description?: string | null | undefined;
  /**
   * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
   *
   * @remarks
   *
   * ```
   * 2020-10-08T22:40:50Z
   * 2021-01-01T00:00:00
   * ```
   *
   * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
   *
   * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
   * - Unqualified local time: `2021-11-15T01:00:00`
   * - UTC time offsets: `2021-11-15T01:00:00-05:00`
   *
   * > Time zones
   * >
   * > Not all dates from Codat will contain information about time zones.
   * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
   */
  postedOn?: string | undefined;
  /**
   * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
   *
   * @remarks
   *
   * ```
   * 2020-10-08T22:40:50Z
   * 2021-01-01T00:00:00
   * ```
   *
   * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
   *
   * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
   * - Unqualified local time: `2021-11-15T01:00:00`
   * - UTC time offsets: `2021-11-15T01:00:00-05:00`
   *
   * > Time zones
   * >
   * > Not all dates from Codat will contain information about time zones.
   * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
   */
  createdOn?: string | undefined;
  /**
   * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
   *
   * @remarks
   *
   * ```
   * 2020-10-08T22:40:50Z
   * 2021-01-01T00:00:00
   * ```
   *
   * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
   *
   * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
   * - Unqualified local time: `2021-11-15T01:00:00`
   * - UTC time offsets: `2021-11-15T01:00:00-05:00`
   *
   * > Time zones
   * >
   * > Not all dates from Codat will contain information about time zones.
   * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
   */
  updatedOn?: string | undefined;
  /**
   * Links journal entries to the relevant journal in accounting integrations that use multi-book accounting (multiple journals).
   */
  journalRef?: JournalRef | undefined;
  /**
   * An array of journal lines.
   */
  journalLines?: Array<JournalLine> | null | undefined;
  /**
   * Links a journal entry to the underlying record that created it.
   */
  recordRef?: JournalEntryRecordRef | undefined;
  metadata?: Metadata | undefined;
  /**
   * Supplemental data is additional data you can include in our standard data types.
   *
   * @remarks
   *
   * It is referenced as a configured dynamic key value pair that is unique to the accounting software. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
   */
  supplementalData?: SupplementalData | undefined;
};

/** @internal */
export const AccountingJournalEntry$inboundSchema: z.ZodType<
  AccountingJournalEntry,
  z.ZodTypeDef,
  unknown
> = z.object({
  modifiedDate: z.string().optional(),
  sourceModifiedDate: z.string().optional(),
  id: z.string().optional(),
  description: z.nullable(z.string()).optional(),
  postedOn: z.string().optional(),
  createdOn: z.string().optional(),
  updatedOn: z.string().optional(),
  journalRef: JournalRef$inboundSchema.optional(),
  journalLines: z.nullable(z.array(JournalLine$inboundSchema)).optional(),
  recordRef: JournalEntryRecordRef$inboundSchema.optional(),
  metadata: Metadata$inboundSchema.optional(),
  supplementalData: SupplementalData$inboundSchema.optional(),
});

/** @internal */
export type AccountingJournalEntry$Outbound = {
  modifiedDate?: string | undefined;
  sourceModifiedDate?: string | undefined;
  id?: string | undefined;
  description?: string | null | undefined;
  postedOn?: string | undefined;
  createdOn?: string | undefined;
  updatedOn?: string | undefined;
  journalRef?: JournalRef$Outbound | undefined;
  journalLines?: Array<JournalLine$Outbound> | null | undefined;
  recordRef?: JournalEntryRecordRef$Outbound | undefined;
  metadata?: Metadata$Outbound | undefined;
  supplementalData?: SupplementalData$Outbound | undefined;
};

/** @internal */
export const AccountingJournalEntry$outboundSchema: z.ZodType<
  AccountingJournalEntry$Outbound,
  z.ZodTypeDef,
  AccountingJournalEntry
> = z.object({
  modifiedDate: z.string().optional(),
  sourceModifiedDate: z.string().optional(),
  id: z.string().optional(),
  description: z.nullable(z.string()).optional(),
  postedOn: z.string().optional(),
  createdOn: z.string().optional(),
  updatedOn: z.string().optional(),
  journalRef: JournalRef$outboundSchema.optional(),
  journalLines: z.nullable(z.array(JournalLine$outboundSchema)).optional(),
  recordRef: JournalEntryRecordRef$outboundSchema.optional(),
  metadata: Metadata$outboundSchema.optional(),
  supplementalData: SupplementalData$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingJournalEntry$ {
  /** @deprecated use `AccountingJournalEntry$inboundSchema` instead. */
  export const inboundSchema = AccountingJournalEntry$inboundSchema;
  /** @deprecated use `AccountingJournalEntry$outboundSchema` instead. */
  export const outboundSchema = AccountingJournalEntry$outboundSchema;
  /** @deprecated use `AccountingJournalEntry$Outbound` instead. */
  export type Outbound = AccountingJournalEntry$Outbound;
}
