/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Decimal as Decimal$ } from "../../types/decimal.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ReportComponentMeasure = {
  /**
   * The measure's index.
   */
  index?: number | undefined;
  /**
   * The measure's display name.
   */
  measureDisplayName?: string | undefined;
  /**
   * The measure's value.
   */
  value?: Decimal$ | number | undefined;
};

/** @internal */
export const ReportComponentMeasure$inboundSchema: z.ZodType<
  ReportComponentMeasure,
  z.ZodTypeDef,
  unknown
> = z.object({
  index: z.number().int().optional(),
  measureDisplayName: z.string().optional(),
  value: z.number().transform(v => new Decimal$(v)).optional(),
});

/** @internal */
export type ReportComponentMeasure$Outbound = {
  index?: number | undefined;
  measureDisplayName?: string | undefined;
  value?: number | undefined;
};

/** @internal */
export const ReportComponentMeasure$outboundSchema: z.ZodType<
  ReportComponentMeasure$Outbound,
  z.ZodTypeDef,
  ReportComponentMeasure
> = z.object({
  index: z.number().int().optional(),
  measureDisplayName: z.string().optional(),
  value: z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
    typeof v === "number" ? v : v.toNumber()
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReportComponentMeasure$ {
  /** @deprecated use `ReportComponentMeasure$inboundSchema` instead. */
  export const inboundSchema = ReportComponentMeasure$inboundSchema;
  /** @deprecated use `ReportComponentMeasure$outboundSchema` instead. */
  export const outboundSchema = ReportComponentMeasure$outboundSchema;
  /** @deprecated use `ReportComponentMeasure$Outbound` instead. */
  export type Outbound = ReportComponentMeasure$Outbound;
}

export function reportComponentMeasureToJSON(
  reportComponentMeasure: ReportComponentMeasure,
): string {
  return JSON.stringify(
    ReportComponentMeasure$outboundSchema.parse(reportComponentMeasure),
  );
}

export function reportComponentMeasureFromJSON(
  jsonString: string,
): SafeParseResult<ReportComponentMeasure, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReportComponentMeasure$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReportComponentMeasure' from JSON`,
  );
}
