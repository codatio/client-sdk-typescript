/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * References a category against which the item is tracked.
 *
 * @deprecated class: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export type TrackingCategoryRef = {
  /**
   * Unique identifier to the tracking category.
   */
  id: string;
  /**
   * Name of tracking category.
   */
  name?: string | null | undefined;
};

/** @internal */
export const TrackingCategoryRef$inboundSchema: z.ZodType<
  TrackingCategoryRef,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.nullable(z.string()).optional(),
});

/** @internal */
export type TrackingCategoryRef$Outbound = {
  id: string;
  name?: string | null | undefined;
};

/** @internal */
export const TrackingCategoryRef$outboundSchema: z.ZodType<
  TrackingCategoryRef$Outbound,
  z.ZodTypeDef,
  TrackingCategoryRef
> = z.object({
  id: z.string(),
  name: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TrackingCategoryRef$ {
  /** @deprecated use `TrackingCategoryRef$inboundSchema` instead. */
  export const inboundSchema = TrackingCategoryRef$inboundSchema;
  /** @deprecated use `TrackingCategoryRef$outboundSchema` instead. */
  export const outboundSchema = TrackingCategoryRef$outboundSchema;
  /** @deprecated use `TrackingCategoryRef$Outbound` instead. */
  export type Outbound = TrackingCategoryRef$Outbound;
}

export function trackingCategoryRefToJSON(
  trackingCategoryRef: TrackingCategoryRef,
): string {
  return JSON.stringify(
    TrackingCategoryRef$outboundSchema.parse(trackingCategoryRef),
  );
}

export function trackingCategoryRefFromJSON(
  jsonString: string,
): SafeParseResult<TrackingCategoryRef, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TrackingCategoryRef$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TrackingCategoryRef' from JSON`,
  );
}
