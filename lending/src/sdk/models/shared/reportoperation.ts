/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The status of the report generation.
 */
export const ReportOperationStatus = {
  InProgress: "InProgress",
  Complete: "Complete",
  Error: "Error",
} as const;
/**
 * The status of the report generation.
 */
export type ReportOperationStatus = ClosedEnum<typeof ReportOperationStatus>;

/**
 * The name of the generated report.
 */
export const ReportOperationType = {
  CategorizedBankStatement: "categorizedBankStatement",
  CreditModel: "creditModel",
  SpendAnalysis: "spendAnalysis",
} as const;
/**
 * The name of the generated report.
 */
export type ReportOperationType = ClosedEnum<typeof ReportOperationType>;

/**
 * Information about report generation.
 */
export type ReportOperation = {
  /**
   * Unique identifier of the report
   */
  id?: string | undefined;
  /**
   * The status of the report generation.
   */
  status?: ReportOperationStatus | undefined;
  /**
   * The name of the generated report.
   */
  type?: ReportOperationType | undefined;
  /**
   * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
   *
   * @remarks
   *
   * ```
   * 2020-10-08T22:40:50Z
   * 2021-01-01T00:00:00
   * ```
   *
   * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
   *
   * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
   * - Unqualified local time: `2021-11-15T01:00:00`
   * - UTC time offsets: `2021-11-15T01:00:00-05:00`
   *
   * > Time zones
   * >
   * > Not all dates from Codat will contain information about time zones.
   * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
   */
  requestedDate?: string | undefined;
  /**
   * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
   *
   * @remarks
   *
   * ```
   * 2020-10-08T22:40:50Z
   * 2021-01-01T00:00:00
   * ```
   *
   * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
   *
   * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
   * - Unqualified local time: `2021-11-15T01:00:00`
   * - UTC time offsets: `2021-11-15T01:00:00-05:00`
   *
   * > Time zones
   * >
   * > Not all dates from Codat will contain information about time zones.
   * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
   */
  updatedDate?: string | undefined;
  /**
   * A short message describing any errors that occurred while generating the report.
   */
  errorMessage?: string | null | undefined;
};

/** @internal */
export const ReportOperationStatus$inboundSchema: z.ZodNativeEnum<
  typeof ReportOperationStatus
> = z.nativeEnum(ReportOperationStatus);

/** @internal */
export const ReportOperationStatus$outboundSchema: z.ZodNativeEnum<
  typeof ReportOperationStatus
> = ReportOperationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReportOperationStatus$ {
  /** @deprecated use `ReportOperationStatus$inboundSchema` instead. */
  export const inboundSchema = ReportOperationStatus$inboundSchema;
  /** @deprecated use `ReportOperationStatus$outboundSchema` instead. */
  export const outboundSchema = ReportOperationStatus$outboundSchema;
}

/** @internal */
export const ReportOperationType$inboundSchema: z.ZodNativeEnum<
  typeof ReportOperationType
> = z.nativeEnum(ReportOperationType);

/** @internal */
export const ReportOperationType$outboundSchema: z.ZodNativeEnum<
  typeof ReportOperationType
> = ReportOperationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReportOperationType$ {
  /** @deprecated use `ReportOperationType$inboundSchema` instead. */
  export const inboundSchema = ReportOperationType$inboundSchema;
  /** @deprecated use `ReportOperationType$outboundSchema` instead. */
  export const outboundSchema = ReportOperationType$outboundSchema;
}

/** @internal */
export const ReportOperation$inboundSchema: z.ZodType<
  ReportOperation,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  status: ReportOperationStatus$inboundSchema.optional(),
  type: ReportOperationType$inboundSchema.optional(),
  requestedDate: z.string().optional(),
  updatedDate: z.string().optional(),
  errorMessage: z.nullable(z.string()).optional(),
});

/** @internal */
export type ReportOperation$Outbound = {
  id?: string | undefined;
  status?: string | undefined;
  type?: string | undefined;
  requestedDate?: string | undefined;
  updatedDate?: string | undefined;
  errorMessage?: string | null | undefined;
};

/** @internal */
export const ReportOperation$outboundSchema: z.ZodType<
  ReportOperation$Outbound,
  z.ZodTypeDef,
  ReportOperation
> = z.object({
  id: z.string().optional(),
  status: ReportOperationStatus$outboundSchema.optional(),
  type: ReportOperationType$outboundSchema.optional(),
  requestedDate: z.string().optional(),
  updatedDate: z.string().optional(),
  errorMessage: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReportOperation$ {
  /** @deprecated use `ReportOperation$inboundSchema` instead. */
  export const inboundSchema = ReportOperation$inboundSchema;
  /** @deprecated use `ReportOperation$outboundSchema` instead. */
  export const outboundSchema = ReportOperation$outboundSchema;
  /** @deprecated use `ReportOperation$Outbound` instead. */
  export type Outbound = ReportOperation$Outbound;
}

export function reportOperationToJSON(
  reportOperation: ReportOperation,
): string {
  return JSON.stringify(ReportOperation$outboundSchema.parse(reportOperation));
}

export function reportOperationFromJSON(
  jsonString: string,
): SafeParseResult<ReportOperation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReportOperation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReportOperation' from JSON`,
  );
}
