/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { Decimal as Decimal$ } from "../../types/decimal.js";

export type DataIntegrityByCount = {
  /**
   * The percentage of records of the type specified in the route which have a match.
   */
  matchPercentage?: Decimal$ | number | undefined;
  /**
   * The number of records of the type specified in the route which don't have a match.
   */
  unmatched?: Decimal$ | number | undefined;
  /**
   * The number of records of the type specified in the route which do have a match.
   */
  matched?: Decimal$ | number | undefined;
  /**
   * The total of unmatched and matched.
   */
  total?: Decimal$ | number | undefined;
};

/** @internal */
export const DataIntegrityByCount$inboundSchema: z.ZodType<
  DataIntegrityByCount,
  z.ZodTypeDef,
  unknown
> = z.object({
  matchPercentage: z.number().transform(v => new Decimal$(v)).optional(),
  unmatched: z.number().transform(v => new Decimal$(v)).optional(),
  matched: z.number().transform(v => new Decimal$(v)).optional(),
  total: z.number().transform(v => new Decimal$(v)).optional(),
});

/** @internal */
export type DataIntegrityByCount$Outbound = {
  matchPercentage?: number | undefined;
  unmatched?: number | undefined;
  matched?: number | undefined;
  total?: number | undefined;
};

/** @internal */
export const DataIntegrityByCount$outboundSchema: z.ZodType<
  DataIntegrityByCount$Outbound,
  z.ZodTypeDef,
  DataIntegrityByCount
> = z.object({
  matchPercentage: z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
    typeof v === "number" ? v : v.toNumber()
  ).optional(),
  unmatched: z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
    typeof v === "number" ? v : v.toNumber()
  ).optional(),
  matched: z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
    typeof v === "number" ? v : v.toNumber()
  ).optional(),
  total: z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
    typeof v === "number" ? v : v.toNumber()
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DataIntegrityByCount$ {
  /** @deprecated use `DataIntegrityByCount$inboundSchema` instead. */
  export const inboundSchema = DataIntegrityByCount$inboundSchema;
  /** @deprecated use `DataIntegrityByCount$outboundSchema` instead. */
  export const outboundSchema = DataIntegrityByCount$outboundSchema;
  /** @deprecated use `DataIntegrityByCount$Outbound` instead. */
  export type Outbound = DataIntegrityByCount$Outbound;
}
