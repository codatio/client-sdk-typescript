/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AccountingCustomerRef,
  AccountingCustomerRef$inboundSchema,
  AccountingCustomerRef$Outbound,
  AccountingCustomerRef$outboundSchema,
} from "./accountingcustomerref.js";
import {
  AccountingRecordRef,
  AccountingRecordRef$inboundSchema,
  AccountingRecordRef$Outbound,
  AccountingRecordRef$outboundSchema,
} from "./accountingrecordref.js";
import {
  BilledToType1,
  BilledToType1$inboundSchema,
  BilledToType1$outboundSchema,
} from "./billedtotype1.js";
import {
  ProjectRef,
  ProjectRef$inboundSchema,
  ProjectRef$Outbound,
  ProjectRef$outboundSchema,
} from "./projectref.js";
import {
  TrackingCategoryRef,
  TrackingCategoryRef$inboundSchema,
  TrackingCategoryRef$Outbound,
  TrackingCategoryRef$outboundSchema,
} from "./trackingcategoryref.js";

/**
 * Categories, and a project and customer, against which the item is tracked.
 */
export type AccountsReceivableTracking = {
  categoryRefs: Array<TrackingCategoryRef>;
  customerRef?: AccountingCustomerRef | undefined;
  projectRef?: ProjectRef | undefined;
  /**
   * Defines if the bill or bill credit note is billed/rebilled to a project.
   */
  isBilledTo: BilledToType1;
  /**
   * Defines if the bill or bill credit note is billed/rebilled to a project.
   */
  isRebilledTo: BilledToType1;
  /**
   * Links the current record to the underlying record or data type that created it.
   *
   * @remarks
   *
   * For example, if a journal entry is generated based on an invoice, this property allows you to connect the journal entry to the underlying invoice in our data model.
   */
  recordRef?: AccountingRecordRef | undefined;
};

/** @internal */
export const AccountsReceivableTracking$inboundSchema: z.ZodType<
  AccountsReceivableTracking,
  z.ZodTypeDef,
  unknown
> = z.object({
  categoryRefs: z.array(TrackingCategoryRef$inboundSchema),
  customerRef: AccountingCustomerRef$inboundSchema.optional(),
  projectRef: ProjectRef$inboundSchema.optional(),
  isBilledTo: BilledToType1$inboundSchema,
  isRebilledTo: BilledToType1$inboundSchema,
  recordRef: AccountingRecordRef$inboundSchema.optional(),
});

/** @internal */
export type AccountsReceivableTracking$Outbound = {
  categoryRefs: Array<TrackingCategoryRef$Outbound>;
  customerRef?: AccountingCustomerRef$Outbound | undefined;
  projectRef?: ProjectRef$Outbound | undefined;
  isBilledTo: string;
  isRebilledTo: string;
  recordRef?: AccountingRecordRef$Outbound | undefined;
};

/** @internal */
export const AccountsReceivableTracking$outboundSchema: z.ZodType<
  AccountsReceivableTracking$Outbound,
  z.ZodTypeDef,
  AccountsReceivableTracking
> = z.object({
  categoryRefs: z.array(TrackingCategoryRef$outboundSchema),
  customerRef: AccountingCustomerRef$outboundSchema.optional(),
  projectRef: ProjectRef$outboundSchema.optional(),
  isBilledTo: BilledToType1$outboundSchema,
  isRebilledTo: BilledToType1$outboundSchema,
  recordRef: AccountingRecordRef$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountsReceivableTracking$ {
  /** @deprecated use `AccountsReceivableTracking$inboundSchema` instead. */
  export const inboundSchema = AccountsReceivableTracking$inboundSchema;
  /** @deprecated use `AccountsReceivableTracking$outboundSchema` instead. */
  export const outboundSchema = AccountsReceivableTracking$outboundSchema;
  /** @deprecated use `AccountsReceivableTracking$Outbound` instead. */
  export type Outbound = AccountsReceivableTracking$Outbound;
}

export function accountsReceivableTrackingToJSON(
  accountsReceivableTracking: AccountsReceivableTracking,
): string {
  return JSON.stringify(
    AccountsReceivableTracking$outboundSchema.parse(accountsReceivableTracking),
  );
}

export function accountsReceivableTrackingFromJSON(
  jsonString: string,
): SafeParseResult<AccountsReceivableTracking, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountsReceivableTracking$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountsReceivableTracking' from JSON`,
  );
}
