/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  AccountingCustomerRef,
  AccountingCustomerRef$inboundSchema,
  AccountingCustomerRef$Outbound,
  AccountingCustomerRef$outboundSchema,
} from "./accountingcustomerref.js";
import {
  BilledToType1,
  BilledToType1$inboundSchema,
  BilledToType1$outboundSchema,
} from "./billedtotype1.js";
import {
  ProjectRef,
  ProjectRef$inboundSchema,
  ProjectRef$Outbound,
  ProjectRef$outboundSchema,
} from "./projectref.js";
import {
  TrackingCategoryRef,
  TrackingCategoryRef$inboundSchema,
  TrackingCategoryRef$Outbound,
  TrackingCategoryRef$outboundSchema,
} from "./trackingcategoryref.js";

/**
 * Links the current record to the underlying record or data type that created it.
 *
 * @remarks
 *
 * For example, if a journal entry is generated based on an invoice, this property allows you to connect the journal entry to the underlying invoice in our data model.
 */
export type RecordReference = {
  /**
   * 'id' of the underlying record or data type.
   */
  id?: string | undefined;
  /**
   * Allowed name of the 'dataType'.
   */
  dataType?: string | undefined;
};

/**
 * Categories, and a project and customer, against which the item is tracked.
 */
export type AccountsReceivableTracking = {
  categoryRefs: Array<TrackingCategoryRef>;
  customerRef?: AccountingCustomerRef | undefined;
  projectRef?: ProjectRef | undefined;
  /**
   * Defines if the bill or bill credit note is billed/rebilled to a project.
   */
  isBilledTo: BilledToType1;
  /**
   * Defines if the bill or bill credit note is billed/rebilled to a project.
   */
  isRebilledTo: BilledToType1;
  /**
   * Links the current record to the underlying record or data type that created it.
   *
   * @remarks
   *
   * For example, if a journal entry is generated based on an invoice, this property allows you to connect the journal entry to the underlying invoice in our data model.
   */
  recordRef?: RecordReference | undefined;
};

/** @internal */
export const RecordReference$inboundSchema: z.ZodType<
  RecordReference,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  dataType: z.string().optional(),
});

/** @internal */
export type RecordReference$Outbound = {
  id?: string | undefined;
  dataType?: string | undefined;
};

/** @internal */
export const RecordReference$outboundSchema: z.ZodType<
  RecordReference$Outbound,
  z.ZodTypeDef,
  RecordReference
> = z.object({
  id: z.string().optional(),
  dataType: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecordReference$ {
  /** @deprecated use `RecordReference$inboundSchema` instead. */
  export const inboundSchema = RecordReference$inboundSchema;
  /** @deprecated use `RecordReference$outboundSchema` instead. */
  export const outboundSchema = RecordReference$outboundSchema;
  /** @deprecated use `RecordReference$Outbound` instead. */
  export type Outbound = RecordReference$Outbound;
}

/** @internal */
export const AccountsReceivableTracking$inboundSchema: z.ZodType<
  AccountsReceivableTracking,
  z.ZodTypeDef,
  unknown
> = z.object({
  categoryRefs: z.array(TrackingCategoryRef$inboundSchema),
  customerRef: AccountingCustomerRef$inboundSchema.optional(),
  projectRef: ProjectRef$inboundSchema.optional(),
  isBilledTo: BilledToType1$inboundSchema,
  isRebilledTo: BilledToType1$inboundSchema,
  recordRef: z.lazy(() => RecordReference$inboundSchema).optional(),
});

/** @internal */
export type AccountsReceivableTracking$Outbound = {
  categoryRefs: Array<TrackingCategoryRef$Outbound>;
  customerRef?: AccountingCustomerRef$Outbound | undefined;
  projectRef?: ProjectRef$Outbound | undefined;
  isBilledTo: string;
  isRebilledTo: string;
  recordRef?: RecordReference$Outbound | undefined;
};

/** @internal */
export const AccountsReceivableTracking$outboundSchema: z.ZodType<
  AccountsReceivableTracking$Outbound,
  z.ZodTypeDef,
  AccountsReceivableTracking
> = z.object({
  categoryRefs: z.array(TrackingCategoryRef$outboundSchema),
  customerRef: AccountingCustomerRef$outboundSchema.optional(),
  projectRef: ProjectRef$outboundSchema.optional(),
  isBilledTo: BilledToType1$outboundSchema,
  isRebilledTo: BilledToType1$outboundSchema,
  recordRef: z.lazy(() => RecordReference$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountsReceivableTracking$ {
  /** @deprecated use `AccountsReceivableTracking$inboundSchema` instead. */
  export const inboundSchema = AccountsReceivableTracking$inboundSchema;
  /** @deprecated use `AccountsReceivableTracking$outboundSchema` instead. */
  export const outboundSchema = AccountsReceivableTracking$outboundSchema;
  /** @deprecated use `AccountsReceivableTracking$Outbound` instead. */
  export type Outbound = AccountsReceivableTracking$Outbound;
}
