/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { Decimal as Decimal$ } from "../../types/decimal.js";
import {
  ReportLine,
  ReportLine$inboundSchema,
  ReportLine$Outbound,
  ReportLine$outboundSchema,
} from "./reportline.js";

export type ProfitAndLossReport = {
  /**
   * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
   *
   * @remarks
   *
   * ```
   * 2020-10-08T22:40:50Z
   * 2021-01-01T00:00:00
   * ```
   *
   * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
   *
   * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
   * - Unqualified local time: `2021-11-15T01:00:00`
   * - UTC time offsets: `2021-11-15T01:00:00-05:00`
   *
   * > Time zones
   * >
   * > Not all dates from Codat will contain information about time zones.
   * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
   */
  fromDate?: string | undefined;
  /**
   * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
   *
   * @remarks
   *
   * ```
   * 2020-10-08T22:40:50Z
   * 2021-01-01T00:00:00
   * ```
   *
   * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
   *
   * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
   * - Unqualified local time: `2021-11-15T01:00:00`
   * - UTC time offsets: `2021-11-15T01:00:00-05:00`
   *
   * > Time zones
   * >
   * > Not all dates from Codat will contain information about time zones.
   * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
   */
  toDate?: string | undefined;
  income?: ReportLine | undefined;
  costOfSales?: ReportLine | undefined;
  /**
   * Gross profit of the company in the given date range.
   */
  grossProfit: Decimal$ | number;
  expenses?: ReportLine | undefined;
  /**
   * Net operating profit of the company in the given date range.
   */
  netOperatingProfit: Decimal$ | number;
  otherExpenses?: ReportLine | undefined;
  otherIncome?: ReportLine | undefined;
  /**
   * Net other income of the company in the given date range.
   */
  netOtherIncome: Decimal$ | number;
  /**
   * Net profit of the company in the given date range.
   */
  netProfit: Decimal$ | number;
};

/** @internal */
export const ProfitAndLossReport$inboundSchema: z.ZodType<
  ProfitAndLossReport,
  z.ZodTypeDef,
  unknown
> = z.object({
  fromDate: z.string().optional(),
  toDate: z.string().optional(),
  income: ReportLine$inboundSchema.optional(),
  costOfSales: ReportLine$inboundSchema.optional(),
  grossProfit: z.number().transform(v => new Decimal$(v)),
  expenses: ReportLine$inboundSchema.optional(),
  netOperatingProfit: z.number().transform(v => new Decimal$(v)),
  otherExpenses: ReportLine$inboundSchema.optional(),
  otherIncome: ReportLine$inboundSchema.optional(),
  netOtherIncome: z.number().transform(v => new Decimal$(v)),
  netProfit: z.number().transform(v => new Decimal$(v)),
});

/** @internal */
export type ProfitAndLossReport$Outbound = {
  fromDate?: string | undefined;
  toDate?: string | undefined;
  income?: ReportLine$Outbound | undefined;
  costOfSales?: ReportLine$Outbound | undefined;
  grossProfit: number;
  expenses?: ReportLine$Outbound | undefined;
  netOperatingProfit: number;
  otherExpenses?: ReportLine$Outbound | undefined;
  otherIncome?: ReportLine$Outbound | undefined;
  netOtherIncome: number;
  netProfit: number;
};

/** @internal */
export const ProfitAndLossReport$outboundSchema: z.ZodType<
  ProfitAndLossReport$Outbound,
  z.ZodTypeDef,
  ProfitAndLossReport
> = z.object({
  fromDate: z.string().optional(),
  toDate: z.string().optional(),
  income: ReportLine$outboundSchema.optional(),
  costOfSales: ReportLine$outboundSchema.optional(),
  grossProfit: z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
    typeof v === "number" ? v : v.toNumber()
  ),
  expenses: ReportLine$outboundSchema.optional(),
  netOperatingProfit: z.union([z.instanceof(Decimal$), z.number()]).transform(
    v => typeof v === "number" ? v : v.toNumber()
  ),
  otherExpenses: ReportLine$outboundSchema.optional(),
  otherIncome: ReportLine$outboundSchema.optional(),
  netOtherIncome: z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
    typeof v === "number" ? v : v.toNumber()
  ),
  netProfit: z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
    typeof v === "number" ? v : v.toNumber()
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProfitAndLossReport$ {
  /** @deprecated use `ProfitAndLossReport$inboundSchema` instead. */
  export const inboundSchema = ProfitAndLossReport$inboundSchema;
  /** @deprecated use `ProfitAndLossReport$outboundSchema` instead. */
  export const outboundSchema = ProfitAndLossReport$outboundSchema;
  /** @deprecated use `ProfitAndLossReport$Outbound` instead. */
  export type Outbound = ProfitAndLossReport$Outbound;
}
