/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Reference to the geographic location where the order was placed.
 */
export type LocationRef = {
  /**
   * The unique identitifer of the location being referenced.
   */
  id: string;
  /**
   * Name of the location being referenced.
   */
  name?: string | undefined;
};

/** @internal */
export const LocationRef$inboundSchema: z.ZodType<
  LocationRef,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string().optional(),
});

/** @internal */
export type LocationRef$Outbound = {
  id: string;
  name?: string | undefined;
};

/** @internal */
export const LocationRef$outboundSchema: z.ZodType<
  LocationRef$Outbound,
  z.ZodTypeDef,
  LocationRef
> = z.object({
  id: z.string(),
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LocationRef$ {
  /** @deprecated use `LocationRef$inboundSchema` instead. */
  export const inboundSchema = LocationRef$inboundSchema;
  /** @deprecated use `LocationRef$outboundSchema` instead. */
  export const outboundSchema = LocationRef$outboundSchema;
  /** @deprecated use `LocationRef$Outbound` instead. */
  export type Outbound = LocationRef$Outbound;
}

export function locationRefToJSON(locationRef: LocationRef): string {
  return JSON.stringify(LocationRef$outboundSchema.parse(locationRef));
}

export function locationRefFromJSON(
  jsonString: string,
): SafeParseResult<LocationRef, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LocationRef$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LocationRef' from JSON`,
  );
}
