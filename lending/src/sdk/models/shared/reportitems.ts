/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Decimal as Decimal$ } from "../../types/decimal.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ItemRef,
  ItemRef$inboundSchema,
  ItemRef$Outbound,
  ItemRef$outboundSchema,
} from "./itemref.js";
import {
  LoanRef,
  LoanRef$inboundSchema,
  LoanRef$Outbound,
  LoanRef$outboundSchema,
} from "./loanref.js";

/**
 * The type of loan transaction.
 */
export const LoanTransactionType = {
  Investment: "Investment",
  Repayment: "Repayment",
  Interest: "Interest",
  AccuredInterest: "AccuredInterest",
} as const;
/**
 * The type of loan transaction.
 */
export type LoanTransactionType = ClosedEnum<typeof LoanTransactionType>;

export type ReportItems = {
  loanRef?: LoanRef | undefined;
  itemRef?: ItemRef | undefined;
  /**
   * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
   *
   * @remarks
   *
   * ```
   * 2020-10-08T22:40:50Z
   * 2021-01-01T00:00:00
   * ```
   *
   * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
   *
   * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
   * - Unqualified local time: `2021-11-15T01:00:00`
   * - UTC time offsets: `2021-11-15T01:00:00-05:00`
   *
   * > Time zones
   * >
   * > Not all dates from Codat will contain information about time zones.
   * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
   */
  date?: string | undefined;
  /**
   * The loan transaction amount.
   */
  amount?: Decimal$ | number | undefined;
  /**
   * The type of loan transaction.
   */
  loanTransactionType?: LoanTransactionType | undefined;
  /**
   * The name of lender providing the loan.
   */
  lender?: string | undefined;
};

/** @internal */
export const LoanTransactionType$inboundSchema: z.ZodNativeEnum<
  typeof LoanTransactionType
> = z.nativeEnum(LoanTransactionType);

/** @internal */
export const LoanTransactionType$outboundSchema: z.ZodNativeEnum<
  typeof LoanTransactionType
> = LoanTransactionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LoanTransactionType$ {
  /** @deprecated use `LoanTransactionType$inboundSchema` instead. */
  export const inboundSchema = LoanTransactionType$inboundSchema;
  /** @deprecated use `LoanTransactionType$outboundSchema` instead. */
  export const outboundSchema = LoanTransactionType$outboundSchema;
}

/** @internal */
export const ReportItems$inboundSchema: z.ZodType<
  ReportItems,
  z.ZodTypeDef,
  unknown
> = z.object({
  loanRef: LoanRef$inboundSchema.optional(),
  itemRef: ItemRef$inboundSchema.optional(),
  date: z.string().optional(),
  amount: z.number().transform(v => new Decimal$(v)).optional(),
  loanTransactionType: LoanTransactionType$inboundSchema.optional(),
  lender: z.string().optional(),
});

/** @internal */
export type ReportItems$Outbound = {
  loanRef?: LoanRef$Outbound | undefined;
  itemRef?: ItemRef$Outbound | undefined;
  date?: string | undefined;
  amount?: number | undefined;
  loanTransactionType?: string | undefined;
  lender?: string | undefined;
};

/** @internal */
export const ReportItems$outboundSchema: z.ZodType<
  ReportItems$Outbound,
  z.ZodTypeDef,
  ReportItems
> = z.object({
  loanRef: LoanRef$outboundSchema.optional(),
  itemRef: ItemRef$outboundSchema.optional(),
  date: z.string().optional(),
  amount: z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
    typeof v === "number" ? v : v.toNumber()
  ).optional(),
  loanTransactionType: LoanTransactionType$outboundSchema.optional(),
  lender: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReportItems$ {
  /** @deprecated use `ReportItems$inboundSchema` instead. */
  export const inboundSchema = ReportItems$inboundSchema;
  /** @deprecated use `ReportItems$outboundSchema` instead. */
  export const outboundSchema = ReportItems$outboundSchema;
  /** @deprecated use `ReportItems$Outbound` instead. */
  export type Outbound = ReportItems$Outbound;
}

export function reportItemsToJSON(reportItems: ReportItems): string {
  return JSON.stringify(ReportItems$outboundSchema.parse(reportItems));
}

export function reportItemsFromJSON(
  jsonString: string,
): SafeParseResult<ReportItems, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReportItems$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReportItems' from JSON`,
  );
}
