/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AccountingAddress,
  AccountingAddress$inboundSchema,
  AccountingAddress$Outbound,
  AccountingAddress$outboundSchema,
} from "./accountingaddress.js";
import {
  Metadata,
  Metadata$inboundSchema,
  Metadata$Outbound,
  Metadata$outboundSchema,
} from "./metadata.js";
import {
  PropertieDataType,
  PropertieDataType$inboundSchema,
  PropertieDataType$outboundSchema,
} from "./propertiedatatype.js";
import {
  PushOperationChange,
  PushOperationChange$inboundSchema,
  PushOperationChange$Outbound,
  PushOperationChange$outboundSchema,
} from "./pushoperationchange.js";
import {
  PushOperationStatus,
  PushOperationStatus$inboundSchema,
  PushOperationStatus$outboundSchema,
} from "./pushoperationstatus.js";
import {
  SupplementalData,
  SupplementalData$inboundSchema,
  SupplementalData$Outbound,
  SupplementalData$outboundSchema,
} from "./supplementaldata.js";
import {
  SupplierStatus,
  SupplierStatus$inboundSchema,
  SupplierStatus$outboundSchema,
} from "./supplierstatus.js";
import {
  Validation,
  Validation$inboundSchema,
  Validation$Outbound,
  Validation$outboundSchema,
} from "./validation.js";

/**
 * ## Overview
 *
 * @remarks
 *
 * From the **Suppliers** endpoints, you can retrieve a list of [all the suppliers for a company](https://docs.codat.io/lending-api#/operations/list-suppliers). Suppliers' data links to accounts payable [bills](https://docs.codat.io/lending-api#/schemas/Bill).
 *
 * @deprecated class: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export type AccountingCreateSupplierResponseAccountingSupplier = {
  modifiedDate?: string | undefined;
  sourceModifiedDate?: string | undefined;
  /**
   * Identifier for the supplier, unique to the company in the accounting software.
   */
  id?: string | undefined;
  /**
   * Name of the supplier as recorded in the accounting system, typically the company name.
   */
  supplierName?: string | null | undefined;
  /**
   * Name of the main contact for the supplier.
   */
  contactName?: string | null | undefined;
  /**
   * Email address that the supplier may be contacted on.
   */
  emailAddress?: string | null | undefined;
  /**
   * Phone number that the supplier may be contacted on.
   */
  phone?: string | null | undefined;
  /**
   * An array of Addresses.
   */
  addresses?: Array<AccountingAddress> | null | undefined;
  /**
   * Company number of the supplier. In the UK, this is typically the company registration number issued by Companies House.
   */
  registrationNumber?: string | null | undefined;
  /**
   * Supplier's company tax number.
   */
  taxNumber?: string | null | undefined;
  /**
   * Status of the supplier.
   */
  status: SupplierStatus;
  /**
   * Default currency the supplier's transactional data is recorded in.
   */
  defaultCurrency?: string | null | undefined;
  metadata?: Metadata | undefined;
  /**
   * Supplemental data is additional data you can include in our standard data types.
   *
   * @remarks
   *
   * It is referenced as a configured dynamic key value pair that is unique to the accounting software. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
   */
  supplementalData?: SupplementalData | undefined;
};

export type AccountingCreateSupplierResponse = {
  data?: AccountingCreateSupplierResponseAccountingSupplier | null | undefined;
  /**
   * Contains a single entry that communicates which record has changed and the manner in which it changed.
   */
  changes?: Array<PushOperationChange> | null | undefined;
  /**
   * Available data types
   */
  dataType?: PropertieDataType | undefined;
  /**
   * Unique identifier for your SMB in Codat.
   */
  companyId: string;
  /**
   * A unique identifier generated by Codat to represent this single push operation. This identifier can be used to track the status of the push, and should be persisted.
   */
  pushOperationKey: string;
  /**
   * Unique identifier for a company's data connection.
   */
  dataConnectionKey: string;
  /**
   * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
   *
   * @remarks
   *
   * ```
   * 2020-10-08T22:40:50Z
   * 2021-01-01T00:00:00
   * ```
   *
   * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
   *
   * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
   * - Unqualified local time: `2021-11-15T01:00:00`
   * - UTC time offsets: `2021-11-15T01:00:00-05:00`
   *
   * > Time zones
   * >
   * > Not all dates from Codat will contain information about time zones.
   * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
   */
  requestedOnUtc: string;
  /**
   * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
   *
   * @remarks
   *
   * ```
   * 2020-10-08T22:40:50Z
   * 2021-01-01T00:00:00
   * ```
   *
   * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
   *
   * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
   * - Unqualified local time: `2021-11-15T01:00:00`
   * - UTC time offsets: `2021-11-15T01:00:00-05:00`
   *
   * > Time zones
   * >
   * > Not all dates from Codat will contain information about time zones.
   * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
   */
  completedOnUtc?: string | undefined;
  /**
   * Number of minutes the push operation must complete within before it times out.
   */
  timeoutInMinutes?: number | null | undefined;
  /**
   * Number of seconds the push operation must complete within before it times out.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  timeoutInSeconds?: number | null | undefined;
  /**
   * The current status of the push operation.
   */
  status: PushOperationStatus;
  /**
   * A message about the error.
   */
  errorMessage?: string | null | undefined;
  /**
   * A human-readable object describing validation decisions Codat has made when pushing data into the platform. If a push has failed because of validation errors, they will be detailed here.
   */
  validation?: Validation | undefined;
  /**
   * Push status code.
   */
  statusCode: number;
};

/** @internal */
export const AccountingCreateSupplierResponseAccountingSupplier$inboundSchema:
  z.ZodType<
    AccountingCreateSupplierResponseAccountingSupplier,
    z.ZodTypeDef,
    unknown
  > = z.object({
    modifiedDate: z.string().optional(),
    sourceModifiedDate: z.string().optional(),
    id: z.string().optional(),
    supplierName: z.nullable(z.string()).optional(),
    contactName: z.nullable(z.string()).optional(),
    emailAddress: z.nullable(z.string()).optional(),
    phone: z.nullable(z.string()).optional(),
    addresses: z.nullable(z.array(AccountingAddress$inboundSchema)).optional(),
    registrationNumber: z.nullable(z.string()).optional(),
    taxNumber: z.nullable(z.string()).optional(),
    status: SupplierStatus$inboundSchema,
    defaultCurrency: z.nullable(z.string()).optional(),
    metadata: Metadata$inboundSchema.optional(),
    supplementalData: SupplementalData$inboundSchema.optional(),
  });

/** @internal */
export type AccountingCreateSupplierResponseAccountingSupplier$Outbound = {
  modifiedDate?: string | undefined;
  sourceModifiedDate?: string | undefined;
  id?: string | undefined;
  supplierName?: string | null | undefined;
  contactName?: string | null | undefined;
  emailAddress?: string | null | undefined;
  phone?: string | null | undefined;
  addresses?: Array<AccountingAddress$Outbound> | null | undefined;
  registrationNumber?: string | null | undefined;
  taxNumber?: string | null | undefined;
  status: string;
  defaultCurrency?: string | null | undefined;
  metadata?: Metadata$Outbound | undefined;
  supplementalData?: SupplementalData$Outbound | undefined;
};

/** @internal */
export const AccountingCreateSupplierResponseAccountingSupplier$outboundSchema:
  z.ZodType<
    AccountingCreateSupplierResponseAccountingSupplier$Outbound,
    z.ZodTypeDef,
    AccountingCreateSupplierResponseAccountingSupplier
  > = z.object({
    modifiedDate: z.string().optional(),
    sourceModifiedDate: z.string().optional(),
    id: z.string().optional(),
    supplierName: z.nullable(z.string()).optional(),
    contactName: z.nullable(z.string()).optional(),
    emailAddress: z.nullable(z.string()).optional(),
    phone: z.nullable(z.string()).optional(),
    addresses: z.nullable(z.array(AccountingAddress$outboundSchema)).optional(),
    registrationNumber: z.nullable(z.string()).optional(),
    taxNumber: z.nullable(z.string()).optional(),
    status: SupplierStatus$outboundSchema,
    defaultCurrency: z.nullable(z.string()).optional(),
    metadata: Metadata$outboundSchema.optional(),
    supplementalData: SupplementalData$outboundSchema.optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingCreateSupplierResponseAccountingSupplier$ {
  /** @deprecated use `AccountingCreateSupplierResponseAccountingSupplier$inboundSchema` instead. */
  export const inboundSchema =
    AccountingCreateSupplierResponseAccountingSupplier$inboundSchema;
  /** @deprecated use `AccountingCreateSupplierResponseAccountingSupplier$outboundSchema` instead. */
  export const outboundSchema =
    AccountingCreateSupplierResponseAccountingSupplier$outboundSchema;
  /** @deprecated use `AccountingCreateSupplierResponseAccountingSupplier$Outbound` instead. */
  export type Outbound =
    AccountingCreateSupplierResponseAccountingSupplier$Outbound;
}

export function accountingCreateSupplierResponseAccountingSupplierToJSON(
  accountingCreateSupplierResponseAccountingSupplier:
    AccountingCreateSupplierResponseAccountingSupplier,
): string {
  return JSON.stringify(
    AccountingCreateSupplierResponseAccountingSupplier$outboundSchema.parse(
      accountingCreateSupplierResponseAccountingSupplier,
    ),
  );
}

export function accountingCreateSupplierResponseAccountingSupplierFromJSON(
  jsonString: string,
): SafeParseResult<
  AccountingCreateSupplierResponseAccountingSupplier,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AccountingCreateSupplierResponseAccountingSupplier$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AccountingCreateSupplierResponseAccountingSupplier' from JSON`,
  );
}

/** @internal */
export const AccountingCreateSupplierResponse$inboundSchema: z.ZodType<
  AccountingCreateSupplierResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.nullable(
    z.lazy(() =>
      AccountingCreateSupplierResponseAccountingSupplier$inboundSchema
    ),
  ).optional(),
  changes: z.nullable(z.array(PushOperationChange$inboundSchema)).optional(),
  dataType: PropertieDataType$inboundSchema.optional(),
  companyId: z.string(),
  pushOperationKey: z.string(),
  dataConnectionKey: z.string(),
  requestedOnUtc: z.string(),
  completedOnUtc: z.string().optional(),
  timeoutInMinutes: z.nullable(z.number().int()).optional(),
  timeoutInSeconds: z.nullable(z.number().int()).optional(),
  status: PushOperationStatus$inboundSchema,
  errorMessage: z.nullable(z.string()).optional(),
  validation: Validation$inboundSchema.optional(),
  statusCode: z.number().int(),
});

/** @internal */
export type AccountingCreateSupplierResponse$Outbound = {
  data?:
    | AccountingCreateSupplierResponseAccountingSupplier$Outbound
    | null
    | undefined;
  changes?: Array<PushOperationChange$Outbound> | null | undefined;
  dataType?: string | undefined;
  companyId: string;
  pushOperationKey: string;
  dataConnectionKey: string;
  requestedOnUtc: string;
  completedOnUtc?: string | undefined;
  timeoutInMinutes?: number | null | undefined;
  timeoutInSeconds?: number | null | undefined;
  status: string;
  errorMessage?: string | null | undefined;
  validation?: Validation$Outbound | undefined;
  statusCode: number;
};

/** @internal */
export const AccountingCreateSupplierResponse$outboundSchema: z.ZodType<
  AccountingCreateSupplierResponse$Outbound,
  z.ZodTypeDef,
  AccountingCreateSupplierResponse
> = z.object({
  data: z.nullable(
    z.lazy(() =>
      AccountingCreateSupplierResponseAccountingSupplier$outboundSchema
    ),
  ).optional(),
  changes: z.nullable(z.array(PushOperationChange$outboundSchema)).optional(),
  dataType: PropertieDataType$outboundSchema.optional(),
  companyId: z.string(),
  pushOperationKey: z.string(),
  dataConnectionKey: z.string(),
  requestedOnUtc: z.string(),
  completedOnUtc: z.string().optional(),
  timeoutInMinutes: z.nullable(z.number().int()).optional(),
  timeoutInSeconds: z.nullable(z.number().int()).optional(),
  status: PushOperationStatus$outboundSchema,
  errorMessage: z.nullable(z.string()).optional(),
  validation: Validation$outboundSchema.optional(),
  statusCode: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingCreateSupplierResponse$ {
  /** @deprecated use `AccountingCreateSupplierResponse$inboundSchema` instead. */
  export const inboundSchema = AccountingCreateSupplierResponse$inboundSchema;
  /** @deprecated use `AccountingCreateSupplierResponse$outboundSchema` instead. */
  export const outboundSchema = AccountingCreateSupplierResponse$outboundSchema;
  /** @deprecated use `AccountingCreateSupplierResponse$Outbound` instead. */
  export type Outbound = AccountingCreateSupplierResponse$Outbound;
}

export function accountingCreateSupplierResponseToJSON(
  accountingCreateSupplierResponse: AccountingCreateSupplierResponse,
): string {
  return JSON.stringify(
    AccountingCreateSupplierResponse$outboundSchema.parse(
      accountingCreateSupplierResponse,
    ),
  );
}

export function accountingCreateSupplierResponseFromJSON(
  jsonString: string,
): SafeParseResult<AccountingCreateSupplierResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingCreateSupplierResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingCreateSupplierResponse' from JSON`,
  );
}
