/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Links the current record to the underlying record or data type that created it.
 *
 * @remarks
 *
 * For example, if a journal entry is generated based on an invoice, this property allows you to connect the journal entry to the underlying invoice in our data model.
 */
export type AccountingRecordRef = {
  /**
   * 'id' of the underlying record or data type.
   */
  id?: string | undefined;
  /**
   * Allowed name of the 'dataType'.
   */
  dataType?: string | undefined;
};

/** @internal */
export const AccountingRecordRef$inboundSchema: z.ZodType<
  AccountingRecordRef,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  dataType: z.string().optional(),
});

/** @internal */
export type AccountingRecordRef$Outbound = {
  id?: string | undefined;
  dataType?: string | undefined;
};

/** @internal */
export const AccountingRecordRef$outboundSchema: z.ZodType<
  AccountingRecordRef$Outbound,
  z.ZodTypeDef,
  AccountingRecordRef
> = z.object({
  id: z.string().optional(),
  dataType: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingRecordRef$ {
  /** @deprecated use `AccountingRecordRef$inboundSchema` instead. */
  export const inboundSchema = AccountingRecordRef$inboundSchema;
  /** @deprecated use `AccountingRecordRef$outboundSchema` instead. */
  export const outboundSchema = AccountingRecordRef$outboundSchema;
  /** @deprecated use `AccountingRecordRef$Outbound` instead. */
  export type Outbound = AccountingRecordRef$Outbound;
}

export function accountingRecordRefToJSON(
  accountingRecordRef: AccountingRecordRef,
): string {
  return JSON.stringify(
    AccountingRecordRef$outboundSchema.parse(accountingRecordRef),
  );
}

export function accountingRecordRefFromJSON(
  jsonString: string,
): SafeParseResult<AccountingRecordRef, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingRecordRef$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingRecordRef' from JSON`,
  );
}
