/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Reference to the customer that placed the order.
 */
export type CommerceCustomerRef = {
  /**
   * The unique identitifer of the customer being referenced
   */
  id: string;
  /**
   * Name of the customer being referenced.
   */
  name?: string | undefined;
};

/** @internal */
export const CommerceCustomerRef$inboundSchema: z.ZodType<
  CommerceCustomerRef,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string().optional(),
});

/** @internal */
export type CommerceCustomerRef$Outbound = {
  id: string;
  name?: string | undefined;
};

/** @internal */
export const CommerceCustomerRef$outboundSchema: z.ZodType<
  CommerceCustomerRef$Outbound,
  z.ZodTypeDef,
  CommerceCustomerRef
> = z.object({
  id: z.string(),
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CommerceCustomerRef$ {
  /** @deprecated use `CommerceCustomerRef$inboundSchema` instead. */
  export const inboundSchema = CommerceCustomerRef$inboundSchema;
  /** @deprecated use `CommerceCustomerRef$outboundSchema` instead. */
  export const outboundSchema = CommerceCustomerRef$outboundSchema;
  /** @deprecated use `CommerceCustomerRef$Outbound` instead. */
  export type Outbound = CommerceCustomerRef$Outbound;
}

export function commerceCustomerRefToJSON(
  commerceCustomerRef: CommerceCustomerRef,
): string {
  return JSON.stringify(
    CommerceCustomerRef$outboundSchema.parse(commerceCustomerRef),
  );
}

export function commerceCustomerRefFromJSON(
  jsonString: string,
): SafeParseResult<CommerceCustomerRef, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CommerceCustomerRef$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CommerceCustomerRef' from JSON`,
  );
}
