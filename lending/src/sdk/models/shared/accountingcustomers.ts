/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AccountingCustomer,
  AccountingCustomer$inboundSchema,
  AccountingCustomer$Outbound,
  AccountingCustomer$outboundSchema,
} from "./accountingcustomer.js";
import {
  Links,
  Links$inboundSchema,
  Links$Outbound,
  Links$outboundSchema,
} from "./links.js";

export type AccountingCustomers = {
  results?: Array<AccountingCustomer | null> | undefined;
  /**
   * Current page number.
   */
  pageNumber: number;
  /**
   * Number of items to return in results array.
   */
  pageSize: number;
  /**
   * Total number of items.
   */
  totalResults: number;
  links: Links;
};

/** @internal */
export const AccountingCustomers$inboundSchema: z.ZodType<
  AccountingCustomers,
  z.ZodTypeDef,
  unknown
> = z.object({
  results: z.array(z.nullable(AccountingCustomer$inboundSchema)).optional(),
  pageNumber: z.number().int(),
  pageSize: z.number().int(),
  totalResults: z.number().int(),
  _links: Links$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type AccountingCustomers$Outbound = {
  results?: Array<AccountingCustomer$Outbound | null> | undefined;
  pageNumber: number;
  pageSize: number;
  totalResults: number;
  _links: Links$Outbound;
};

/** @internal */
export const AccountingCustomers$outboundSchema: z.ZodType<
  AccountingCustomers$Outbound,
  z.ZodTypeDef,
  AccountingCustomers
> = z.object({
  results: z.array(z.nullable(AccountingCustomer$outboundSchema)).optional(),
  pageNumber: z.number().int(),
  pageSize: z.number().int(),
  totalResults: z.number().int(),
  links: Links$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingCustomers$ {
  /** @deprecated use `AccountingCustomers$inboundSchema` instead. */
  export const inboundSchema = AccountingCustomers$inboundSchema;
  /** @deprecated use `AccountingCustomers$outboundSchema` instead. */
  export const outboundSchema = AccountingCustomers$outboundSchema;
  /** @deprecated use `AccountingCustomers$Outbound` instead. */
  export type Outbound = AccountingCustomers$Outbound;
}

export function accountingCustomersToJSON(
  accountingCustomers: AccountingCustomers,
): string {
  return JSON.stringify(
    AccountingCustomers$outboundSchema.parse(accountingCustomers),
  );
}

export function accountingCustomersFromJSON(
  jsonString: string,
): SafeParseResult<AccountingCustomers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingCustomers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingCustomers' from JSON`,
  );
}
