/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Decimal as Decimal$ } from "../../types/decimal.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateBankAccountTransaction = {
  /**
   * Identifier for the bank account transaction, unique for the company in the accounting software.
   */
  id?: string | undefined;
  /**
   * The amount transacted in the bank transaction.
   */
  amount?: Decimal$ | number | undefined;
  /**
   * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
   *
   * @remarks
   *
   * ```
   * 2020-10-08T22:40:50Z
   * 2021-01-01T00:00:00
   * ```
   *
   * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
   *
   * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
   * - Unqualified local time: `2021-11-15T01:00:00`
   * - UTC time offsets: `2021-11-15T01:00:00-05:00`
   *
   * > Time zones
   * >
   * > Not all dates from Codat will contain information about time zones.
   * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
   */
  date?: string | undefined;
  /**
   * Description of the bank transaction.
   */
  description?: string | undefined;
  /**
   * The remaining balance in the account with ID `accountId`.
   */
  balance?: Decimal$ | number | undefined;
};

/** @internal */
export const CreateBankAccountTransaction$inboundSchema: z.ZodType<
  CreateBankAccountTransaction,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  amount: z.number().transform(v => new Decimal$(v)).optional(),
  date: z.string().optional(),
  description: z.string().optional(),
  balance: z.number().transform(v => new Decimal$(v)).optional(),
});

/** @internal */
export type CreateBankAccountTransaction$Outbound = {
  id?: string | undefined;
  amount?: number | undefined;
  date?: string | undefined;
  description?: string | undefined;
  balance?: number | undefined;
};

/** @internal */
export const CreateBankAccountTransaction$outboundSchema: z.ZodType<
  CreateBankAccountTransaction$Outbound,
  z.ZodTypeDef,
  CreateBankAccountTransaction
> = z.object({
  id: z.string().optional(),
  amount: z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
    typeof v === "number" ? v : v.toNumber()
  ).optional(),
  date: z.string().optional(),
  description: z.string().optional(),
  balance: z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
    typeof v === "number" ? v : v.toNumber()
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateBankAccountTransaction$ {
  /** @deprecated use `CreateBankAccountTransaction$inboundSchema` instead. */
  export const inboundSchema = CreateBankAccountTransaction$inboundSchema;
  /** @deprecated use `CreateBankAccountTransaction$outboundSchema` instead. */
  export const outboundSchema = CreateBankAccountTransaction$outboundSchema;
  /** @deprecated use `CreateBankAccountTransaction$Outbound` instead. */
  export type Outbound = CreateBankAccountTransaction$Outbound;
}

export function createBankAccountTransactionToJSON(
  createBankAccountTransaction: CreateBankAccountTransaction,
): string {
  return JSON.stringify(
    CreateBankAccountTransaction$outboundSchema.parse(
      createBankAccountTransaction,
    ),
  );
}

export function createBankAccountTransactionFromJSON(
  jsonString: string,
): SafeParseResult<CreateBankAccountTransaction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateBankAccountTransaction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateBankAccountTransaction' from JSON`,
  );
}
