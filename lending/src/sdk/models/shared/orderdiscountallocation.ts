/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Decimal as Decimal$ } from "../../types/decimal.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type OrderDiscountAllocation = {
  /**
   * Name of the discount in the commerce or point of sale platform.
   */
  name?: string | undefined;
  /**
   * Total amount of discount applied, excluding tax. This is typically positive (for discounts which decrease the amount of the order line), but can also be negative (for discounts which increase the amount of the order line).
   */
  totalAmount?: Decimal$ | number | undefined;
};

/** @internal */
export const OrderDiscountAllocation$inboundSchema: z.ZodType<
  OrderDiscountAllocation,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  totalAmount: z.number().transform(v => new Decimal$(v)).optional(),
});

/** @internal */
export type OrderDiscountAllocation$Outbound = {
  name?: string | undefined;
  totalAmount?: number | undefined;
};

/** @internal */
export const OrderDiscountAllocation$outboundSchema: z.ZodType<
  OrderDiscountAllocation$Outbound,
  z.ZodTypeDef,
  OrderDiscountAllocation
> = z.object({
  name: z.string().optional(),
  totalAmount: z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
    typeof v === "number" ? v : v.toNumber()
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderDiscountAllocation$ {
  /** @deprecated use `OrderDiscountAllocation$inboundSchema` instead. */
  export const inboundSchema = OrderDiscountAllocation$inboundSchema;
  /** @deprecated use `OrderDiscountAllocation$outboundSchema` instead. */
  export const outboundSchema = OrderDiscountAllocation$outboundSchema;
  /** @deprecated use `OrderDiscountAllocation$Outbound` instead. */
  export type Outbound = OrderDiscountAllocation$Outbound;
}

export function orderDiscountAllocationToJSON(
  orderDiscountAllocation: OrderDiscountAllocation,
): string {
  return JSON.stringify(
    OrderDiscountAllocation$outboundSchema.parse(orderDiscountAllocation),
  );
}

export function orderDiscountAllocationFromJSON(
  jsonString: string,
): SafeParseResult<OrderDiscountAllocation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrderDiscountAllocation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrderDiscountAllocation' from JSON`,
  );
}
