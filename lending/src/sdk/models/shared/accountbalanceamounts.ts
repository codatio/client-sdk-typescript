/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Decimal as Decimal$ } from "../../types/decimal.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Depending on the data provided by the underlying bank, not all balances are always available.
 */
export type AccountBalanceAmounts = {
  /**
   * The balance available in the account, including any pending transactions. This doesn't include additional funds available from any overdrafts.
   */
  available?: Decimal$ | number | null | undefined;
  /**
   * The balance of the account only including cleared transactions.
   */
  current?: Decimal$ | number | undefined;
  /**
   * The minimum allowed balance for the account. For example, a $100.00 overdraft would show as a limit of `-100.00`.
   */
  limit?: Decimal$ | number | null | undefined;
};

/** @internal */
export const AccountBalanceAmounts$inboundSchema: z.ZodType<
  AccountBalanceAmounts,
  z.ZodTypeDef,
  unknown
> = z.object({
  available: z.nullable(z.number().transform(v => new Decimal$(v))).optional(),
  current: z.number().transform(v => new Decimal$(v)).optional(),
  limit: z.nullable(z.number().transform(v => new Decimal$(v))).optional(),
});

/** @internal */
export type AccountBalanceAmounts$Outbound = {
  available?: number | null | undefined;
  current?: number | undefined;
  limit?: number | null | undefined;
};

/** @internal */
export const AccountBalanceAmounts$outboundSchema: z.ZodType<
  AccountBalanceAmounts$Outbound,
  z.ZodTypeDef,
  AccountBalanceAmounts
> = z.object({
  available: z.nullable(
    z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
      typeof v === "number" ? v : v.toNumber()
    ),
  ).optional(),
  current: z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
    typeof v === "number" ? v : v.toNumber()
  ).optional(),
  limit: z.nullable(
    z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
      typeof v === "number" ? v : v.toNumber()
    ),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountBalanceAmounts$ {
  /** @deprecated use `AccountBalanceAmounts$inboundSchema` instead. */
  export const inboundSchema = AccountBalanceAmounts$inboundSchema;
  /** @deprecated use `AccountBalanceAmounts$outboundSchema` instead. */
  export const outboundSchema = AccountBalanceAmounts$outboundSchema;
  /** @deprecated use `AccountBalanceAmounts$Outbound` instead. */
  export type Outbound = AccountBalanceAmounts$Outbound;
}

export function accountBalanceAmountsToJSON(
  accountBalanceAmounts: AccountBalanceAmounts,
): string {
  return JSON.stringify(
    AccountBalanceAmounts$outboundSchema.parse(accountBalanceAmounts),
  );
}

export function accountBalanceAmountsFromJSON(
  jsonString: string,
): SafeParseResult<AccountBalanceAmounts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountBalanceAmounts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountBalanceAmounts' from JSON`,
  );
}
