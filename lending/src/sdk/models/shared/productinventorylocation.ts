/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { Decimal as Decimal$ } from "../../types/decimal.js";
import {
  LocationRef,
  LocationRef$inboundSchema,
  LocationRef$Outbound,
  LocationRef$outboundSchema,
} from "./locationref.js";

export type ProductInventoryLocation = {
  /**
   * The quantity of stock remaining at location.
   */
  quantity?: Decimal$ | number | undefined;
  /**
   * Reference to the geographic location where the order was placed.
   */
  locationRef?: LocationRef | undefined;
};

/** @internal */
export const ProductInventoryLocation$inboundSchema: z.ZodType<
  ProductInventoryLocation,
  z.ZodTypeDef,
  unknown
> = z.object({
  quantity: z.number().transform(v => new Decimal$(v)).optional(),
  locationRef: LocationRef$inboundSchema.optional(),
});

/** @internal */
export type ProductInventoryLocation$Outbound = {
  quantity?: number | undefined;
  locationRef?: LocationRef$Outbound | undefined;
};

/** @internal */
export const ProductInventoryLocation$outboundSchema: z.ZodType<
  ProductInventoryLocation$Outbound,
  z.ZodTypeDef,
  ProductInventoryLocation
> = z.object({
  quantity: z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
    typeof v === "number" ? v : v.toNumber()
  ).optional(),
  locationRef: LocationRef$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductInventoryLocation$ {
  /** @deprecated use `ProductInventoryLocation$inboundSchema` instead. */
  export const inboundSchema = ProductInventoryLocation$inboundSchema;
  /** @deprecated use `ProductInventoryLocation$outboundSchema` instead. */
  export const outboundSchema = ProductInventoryLocation$outboundSchema;
  /** @deprecated use `ProductInventoryLocation$Outbound` instead. */
  export type Outbound = ProductInventoryLocation$Outbound;
}
