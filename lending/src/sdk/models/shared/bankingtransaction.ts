/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { Decimal as Decimal$ } from "../../types/decimal.js";
import {
  TransactionCategoryRef,
  TransactionCategoryRef$inboundSchema,
  TransactionCategoryRef$Outbound,
  TransactionCategoryRef$outboundSchema,
} from "./transactioncategoryref.js";
import {
  TransactionCode,
  TransactionCode$inboundSchema,
  TransactionCode$outboundSchema,
} from "./transactioncode.js";

/**
 * The Banking Transactions data type provides an immutable source of up-to-date information on income and expenditure.
 *
 * @remarks
 *
 * Responses are paged, so you should provide `page` and `pageSize` query parameters in your request.
 *
 * View the coverage for banking transactions in the [Data Coverage Explorer](https://knowledge.codat.io/supported-features/banking?view=tab-by-data-type&dataType=banking-transactions).
 */
export type BankingTransaction = {
  modifiedDate?: string | undefined;
  sourceModifiedDate?: string | undefined;
  /**
   * The unique identifier of the bank transaction.
   */
  id: string;
  /**
   * The unique identifier of the bank account.
   */
  accountId: string;
  /**
   * The description of the bank transaction.
   */
  description?: string | null | undefined;
  /**
   * The amount of the bank transaction.
   */
  amount?: Decimal$ | number | undefined;
  /**
   * The currency of the bank transaction.
   */
  currency: string;
  /**
   * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
   *
   * @remarks
   *
   * ```
   * 2020-10-08T22:40:50Z
   * 2021-01-01T00:00:00
   * ```
   *
   * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
   *
   * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
   * - Unqualified local time: `2021-11-15T01:00:00`
   * - UTC time offsets: `2021-11-15T01:00:00-05:00`
   *
   * > Time zones
   * >
   * > Not all dates from Codat will contain information about time zones.
   * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
   */
  postedDate?: string | undefined;
  /**
   * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
   *
   * @remarks
   *
   * ```
   * 2020-10-08T22:40:50Z
   * 2021-01-01T00:00:00
   * ```
   *
   * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
   *
   * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
   * - Unqualified local time: `2021-11-15T01:00:00`
   * - UTC time offsets: `2021-11-15T01:00:00-05:00`
   *
   * > Time zones
   * >
   * > Not all dates from Codat will contain information about time zones.
   * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
   */
  authorizedDate?: string | undefined;
  /**
   * Code to identify the underlying transaction.
   */
  code?: TransactionCode | undefined;
  /**
   * The name of the merchant.
   */
  merchantName?: string | null | undefined;
  /**
   * An object of bank transaction category reference data.
   */
  transactionCategoryRef?: TransactionCategoryRef | undefined;
};

/** @internal */
export const BankingTransaction$inboundSchema: z.ZodType<
  BankingTransaction,
  z.ZodTypeDef,
  unknown
> = z.object({
  modifiedDate: z.string().optional(),
  sourceModifiedDate: z.string().optional(),
  id: z.string(),
  accountId: z.string(),
  description: z.nullable(z.string()).optional(),
  amount: z.number().transform(v => new Decimal$(v)).optional(),
  currency: z.string(),
  postedDate: z.string().optional(),
  authorizedDate: z.string().optional(),
  code: TransactionCode$inboundSchema.optional(),
  merchantName: z.nullable(z.string()).optional(),
  transactionCategoryRef: TransactionCategoryRef$inboundSchema.optional(),
});

/** @internal */
export type BankingTransaction$Outbound = {
  modifiedDate?: string | undefined;
  sourceModifiedDate?: string | undefined;
  id: string;
  accountId: string;
  description?: string | null | undefined;
  amount?: number | undefined;
  currency: string;
  postedDate?: string | undefined;
  authorizedDate?: string | undefined;
  code?: string | undefined;
  merchantName?: string | null | undefined;
  transactionCategoryRef?: TransactionCategoryRef$Outbound | undefined;
};

/** @internal */
export const BankingTransaction$outboundSchema: z.ZodType<
  BankingTransaction$Outbound,
  z.ZodTypeDef,
  BankingTransaction
> = z.object({
  modifiedDate: z.string().optional(),
  sourceModifiedDate: z.string().optional(),
  id: z.string(),
  accountId: z.string(),
  description: z.nullable(z.string()).optional(),
  amount: z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
    typeof v === "number" ? v : v.toNumber()
  ).optional(),
  currency: z.string(),
  postedDate: z.string().optional(),
  authorizedDate: z.string().optional(),
  code: TransactionCode$outboundSchema.optional(),
  merchantName: z.nullable(z.string()).optional(),
  transactionCategoryRef: TransactionCategoryRef$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BankingTransaction$ {
  /** @deprecated use `BankingTransaction$inboundSchema` instead. */
  export const inboundSchema = BankingTransaction$inboundSchema;
  /** @deprecated use `BankingTransaction$outboundSchema` instead. */
  export const outboundSchema = BankingTransaction$outboundSchema;
  /** @deprecated use `BankingTransaction$Outbound` instead. */
  export type Outbound = BankingTransaction$Outbound;
}
