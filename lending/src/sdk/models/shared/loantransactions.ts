/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  LoanTransactionsReportInfo,
  LoanTransactionsReportInfo$inboundSchema,
  LoanTransactionsReportInfo$Outbound,
  LoanTransactionsReportInfo$outboundSchema,
} from "./loantransactionsreportinfo.js";
import {
  ReportItems,
  ReportItems$inboundSchema,
  ReportItems$Outbound,
  ReportItems$outboundSchema,
} from "./reportitems.js";

export type LoanTransactions = {
  reportInfo?: LoanTransactionsReportInfo | undefined;
  /**
   * Contains object of reporting properties. The loan ref will reference a different object depending on the integration type.
   */
  reportItems?: Array<ReportItems> | undefined;
};

/** @internal */
export const LoanTransactions$inboundSchema: z.ZodType<
  LoanTransactions,
  z.ZodTypeDef,
  unknown
> = z.object({
  reportInfo: LoanTransactionsReportInfo$inboundSchema.optional(),
  reportItems: z.array(ReportItems$inboundSchema).optional(),
});

/** @internal */
export type LoanTransactions$Outbound = {
  reportInfo?: LoanTransactionsReportInfo$Outbound | undefined;
  reportItems?: Array<ReportItems$Outbound> | undefined;
};

/** @internal */
export const LoanTransactions$outboundSchema: z.ZodType<
  LoanTransactions$Outbound,
  z.ZodTypeDef,
  LoanTransactions
> = z.object({
  reportInfo: LoanTransactionsReportInfo$outboundSchema.optional(),
  reportItems: z.array(ReportItems$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LoanTransactions$ {
  /** @deprecated use `LoanTransactions$inboundSchema` instead. */
  export const inboundSchema = LoanTransactions$inboundSchema;
  /** @deprecated use `LoanTransactions$outboundSchema` instead. */
  export const outboundSchema = LoanTransactions$outboundSchema;
  /** @deprecated use `LoanTransactions$Outbound` instead. */
  export type Outbound = LoanTransactions$Outbound;
}

export function loanTransactionsToJSON(
  loanTransactions: LoanTransactions,
): string {
  return JSON.stringify(
    LoanTransactions$outboundSchema.parse(loanTransactions),
  );
}

export function loanTransactionsFromJSON(
  jsonString: string,
): SafeParseResult<LoanTransactions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LoanTransactions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LoanTransactions' from JSON`,
  );
}
