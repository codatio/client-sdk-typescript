/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { Decimal as Decimal$ } from "../../types/decimal.js";
import {
  ProductInventory,
  ProductInventory$inboundSchema,
  ProductInventory$Outbound,
  ProductInventory$outboundSchema,
} from "./productinventory.js";
import {
  ProductPrice,
  ProductPrice$inboundSchema,
  ProductPrice$Outbound,
  ProductPrice$outboundSchema,
} from "./productprice.js";
import {
  ProductVariantStatus,
  ProductVariantStatus$inboundSchema,
  ProductVariantStatus$outboundSchema,
} from "./productvariantstatus.js";

/**
 * Represents a variation of a product available for sale, for example an item of clothing that may be available for sale in multiple sizes and colors.
 *
 * @remarks
 */
export type ProductVariant = {
  modifiedDate?: string | undefined;
  sourceModifiedDate?: string | undefined;
  /**
   * A unique, persistent identifier for this record
   */
  id: string;
  /**
   * Name of the product recorded in the commerce or point of sale platform.
   */
  name?: string | undefined;
  /**
   * Whether sales taxes are enabled for this product variant.
   */
  isTaxEnabled?: boolean | undefined;
  /**
   * SKU (stock keeping unit) of the variant, as defined by the merchant.
   */
  sku?: string | undefined;
  /**
   * Unique product number of the variant. This might be a barcode, UPC, ISBN, etc.
   */
  barcode?: string | undefined;
  /**
   * Unit of measure for the variant, such as `kg` or `meters`.
   */
  unitOfMeasure?: string | undefined;
  /**
   * VAT rate for the product variant if sales taxes are enabled.
   */
  vatPercentage?: Decimal$ | number | undefined;
  /**
   * Prices for the product variants in different currencies.
   */
  prices?: Array<ProductPrice> | undefined;
  /**
   * Information about the total inventory as well as the locations inventory is in.
   */
  inventory?: ProductInventory | undefined;
  /**
   * Indicates whether or not the product requires physical delivery.
   */
  shippingRequired?: boolean | undefined;
  /**
   * The status of the product variant.
   */
  status?: ProductVariantStatus | undefined;
  /**
   * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
   *
   * @remarks
   *
   * ```
   * 2020-10-08T22:40:50Z
   * 2021-01-01T00:00:00
   * ```
   *
   * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
   *
   * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
   * - Unqualified local time: `2021-11-15T01:00:00`
   * - UTC time offsets: `2021-11-15T01:00:00-05:00`
   *
   * > Time zones
   * >
   * > Not all dates from Codat will contain information about time zones.
   * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
   */
  createdDate?: string | undefined;
};

/** @internal */
export const ProductVariant$inboundSchema: z.ZodType<
  ProductVariant,
  z.ZodTypeDef,
  unknown
> = z.object({
  modifiedDate: z.string().optional(),
  sourceModifiedDate: z.string().optional(),
  id: z.string(),
  name: z.string().optional(),
  isTaxEnabled: z.boolean().optional(),
  sku: z.string().optional(),
  barcode: z.string().optional(),
  unitOfMeasure: z.string().optional(),
  vatPercentage: z.number().transform(v => new Decimal$(v)).optional(),
  prices: z.array(ProductPrice$inboundSchema).optional(),
  inventory: ProductInventory$inboundSchema.optional(),
  shippingRequired: z.boolean().optional(),
  status: ProductVariantStatus$inboundSchema.optional(),
  createdDate: z.string().optional(),
});

/** @internal */
export type ProductVariant$Outbound = {
  modifiedDate?: string | undefined;
  sourceModifiedDate?: string | undefined;
  id: string;
  name?: string | undefined;
  isTaxEnabled?: boolean | undefined;
  sku?: string | undefined;
  barcode?: string | undefined;
  unitOfMeasure?: string | undefined;
  vatPercentage?: number | undefined;
  prices?: Array<ProductPrice$Outbound> | undefined;
  inventory?: ProductInventory$Outbound | undefined;
  shippingRequired?: boolean | undefined;
  status?: string | undefined;
  createdDate?: string | undefined;
};

/** @internal */
export const ProductVariant$outboundSchema: z.ZodType<
  ProductVariant$Outbound,
  z.ZodTypeDef,
  ProductVariant
> = z.object({
  modifiedDate: z.string().optional(),
  sourceModifiedDate: z.string().optional(),
  id: z.string(),
  name: z.string().optional(),
  isTaxEnabled: z.boolean().optional(),
  sku: z.string().optional(),
  barcode: z.string().optional(),
  unitOfMeasure: z.string().optional(),
  vatPercentage: z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
    typeof v === "number" ? v : v.toNumber()
  ).optional(),
  prices: z.array(ProductPrice$outboundSchema).optional(),
  inventory: ProductInventory$outboundSchema.optional(),
  shippingRequired: z.boolean().optional(),
  status: ProductVariantStatus$outboundSchema.optional(),
  createdDate: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductVariant$ {
  /** @deprecated use `ProductVariant$inboundSchema` instead. */
  export const inboundSchema = ProductVariant$inboundSchema;
  /** @deprecated use `ProductVariant$outboundSchema` instead. */
  export const outboundSchema = ProductVariant$outboundSchema;
  /** @deprecated use `ProductVariant$Outbound` instead. */
  export type Outbound = ProductVariant$Outbound;
}
