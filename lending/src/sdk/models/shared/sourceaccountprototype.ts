/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Decimal as Decimal$ } from "../../types/decimal.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SourceAccountPrototype = {
  /**
   * Unique ID for the bank account.
   */
  id?: string | undefined;
  /**
   * The bank account name.
   */
  accountName?: string | null | undefined;
  /**
   * The type of bank account e.g. Credit.
   */
  accountType?: string | null | undefined;
  /**
   * The account number.
   */
  accountNumber?: string | null | undefined;
  /**
   * The sort code.
   */
  sortCode?: string | null | undefined;
  /**
   * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
   *
   * @remarks
   *
   * ## Unknown currencies
   *
   * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction.
   *
   * There are only a very small number of edge cases where this currency code is returned by the Codat system.
   */
  currency?: string | undefined;
  /**
   * The latest balance for the bank account.
   */
  balance?: Decimal$ | number | null | undefined;
  /**
   * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
   *
   * @remarks
   *
   * ```
   * 2020-10-08T22:40:50Z
   * 2021-01-01T00:00:00
   * ```
   *
   * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
   *
   * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
   * - Unqualified local time: `2021-11-15T01:00:00`
   * - UTC time offsets: `2021-11-15T01:00:00-05:00`
   *
   * > Time zones
   * >
   * > Not all dates from Codat will contain information about time zones.
   * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
   */
  modifiedDate?: string | undefined;
};

/** @internal */
export const SourceAccountPrototype$inboundSchema: z.ZodType<
  SourceAccountPrototype,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  accountName: z.nullable(z.string()).optional(),
  accountType: z.nullable(z.string()).optional(),
  accountNumber: z.nullable(z.string()).optional(),
  sortCode: z.nullable(z.string()).optional(),
  currency: z.string().optional(),
  balance: z.nullable(z.number().transform(v => new Decimal$(v))).optional(),
  modifiedDate: z.string().optional(),
});

/** @internal */
export type SourceAccountPrototype$Outbound = {
  id?: string | undefined;
  accountName?: string | null | undefined;
  accountType?: string | null | undefined;
  accountNumber?: string | null | undefined;
  sortCode?: string | null | undefined;
  currency?: string | undefined;
  balance?: number | null | undefined;
  modifiedDate?: string | undefined;
};

/** @internal */
export const SourceAccountPrototype$outboundSchema: z.ZodType<
  SourceAccountPrototype$Outbound,
  z.ZodTypeDef,
  SourceAccountPrototype
> = z.object({
  id: z.string().optional(),
  accountName: z.nullable(z.string()).optional(),
  accountType: z.nullable(z.string()).optional(),
  accountNumber: z.nullable(z.string()).optional(),
  sortCode: z.nullable(z.string()).optional(),
  currency: z.string().optional(),
  balance: z.nullable(
    z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
      typeof v === "number" ? v : v.toNumber()
    ),
  ).optional(),
  modifiedDate: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SourceAccountPrototype$ {
  /** @deprecated use `SourceAccountPrototype$inboundSchema` instead. */
  export const inboundSchema = SourceAccountPrototype$inboundSchema;
  /** @deprecated use `SourceAccountPrototype$outboundSchema` instead. */
  export const outboundSchema = SourceAccountPrototype$outboundSchema;
  /** @deprecated use `SourceAccountPrototype$Outbound` instead. */
  export type Outbound = SourceAccountPrototype$Outbound;
}

export function sourceAccountPrototypeToJSON(
  sourceAccountPrototype: SourceAccountPrototype,
): string {
  return JSON.stringify(
    SourceAccountPrototype$outboundSchema.parse(sourceAccountPrototype),
  );
}

export function sourceAccountPrototypeFromJSON(
  jsonString: string,
): SafeParseResult<SourceAccountPrototype, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SourceAccountPrototype$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SourceAccountPrototype' from JSON`,
  );
}
