/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Report additional information, which is specific to Lending API reports.
 */
export type ReportInfo = {
  /**
   * The number of the page queried.
   */
  pageNumber?: number | undefined;
  /**
   * The number of transactions returned per page.
   */
  pageSize?: number | undefined;
  /**
   * The total number of transactions available for a company for the period specified in the query string.
   */
  totalResults?: number | undefined;
  /**
   * Name of the report.
   */
  reportName?: string | undefined;
  /**
   * The name of the company being queried.
   */
  companyName?: string | undefined;
  /**
   * Date the report was generated.
   */
  generatedDate?: string | undefined;
};

/** @internal */
export const ReportInfo$inboundSchema: z.ZodType<
  ReportInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  pageNumber: z.number().int().optional(),
  pageSize: z.number().int().optional(),
  totalResults: z.number().int().optional(),
  reportName: z.string().optional(),
  companyName: z.string().optional(),
  generatedDate: z.string().optional(),
});

/** @internal */
export type ReportInfo$Outbound = {
  pageNumber?: number | undefined;
  pageSize?: number | undefined;
  totalResults?: number | undefined;
  reportName?: string | undefined;
  companyName?: string | undefined;
  generatedDate?: string | undefined;
};

/** @internal */
export const ReportInfo$outboundSchema: z.ZodType<
  ReportInfo$Outbound,
  z.ZodTypeDef,
  ReportInfo
> = z.object({
  pageNumber: z.number().int().optional(),
  pageSize: z.number().int().optional(),
  totalResults: z.number().int().optional(),
  reportName: z.string().optional(),
  companyName: z.string().optional(),
  generatedDate: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReportInfo$ {
  /** @deprecated use `ReportInfo$inboundSchema` instead. */
  export const inboundSchema = ReportInfo$inboundSchema;
  /** @deprecated use `ReportInfo$outboundSchema` instead. */
  export const outboundSchema = ReportInfo$outboundSchema;
  /** @deprecated use `ReportInfo$Outbound` instead. */
  export type Outbound = ReportInfo$Outbound;
}

export function reportInfoToJSON(reportInfo: ReportInfo): string {
  return JSON.stringify(ReportInfo$outboundSchema.parse(reportInfo));
}

export function reportInfoFromJSON(
  jsonString: string,
): SafeParseResult<ReportInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReportInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReportInfo' from JSON`,
  );
}
