/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { Decimal as Decimal$ } from "../../types/decimal.js";
import {
  SourceRef,
  SourceRef$inboundSchema,
  SourceRef$Outbound,
  SourceRef$outboundSchema,
} from "./sourceref.js";

export type Accounts = {
  /**
   * A source reference containing the `sourceType` object "Banking".
   */
  sourceRef?: SourceRef | undefined;
  /**
   * Name of the banking data source, e.g. "Plaid".
   */
  platformName?: string | undefined;
  /**
   * The bank or other financial institution providing the account.
   */
  accountProvider?: string | undefined;
  /**
   * The name of the account according to the provider.
   */
  accountName?: string | undefined;
  /**
   * The type of banking account, e.g. credit or debit.
   */
  accountType?: string | undefined;
  /**
   * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
   *
   * @remarks
   *
   * ## Unknown currencies
   *
   * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction.
   *
   * There are only a very small number of edge cases where this currency code is returned by the Codat system.
   */
  currency?: string | undefined;
  /**
   * The balance of the bank account.
   */
  currentBalance?: Decimal$ | number | undefined;
};

/** @internal */
export const Accounts$inboundSchema: z.ZodType<
  Accounts,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourceRef: SourceRef$inboundSchema.optional(),
  platformName: z.string().optional(),
  accountProvider: z.string().optional(),
  accountName: z.string().optional(),
  accountType: z.string().optional(),
  currency: z.string().optional(),
  currentBalance: z.number().transform(v => new Decimal$(v)).optional(),
});

/** @internal */
export type Accounts$Outbound = {
  sourceRef?: SourceRef$Outbound | undefined;
  platformName?: string | undefined;
  accountProvider?: string | undefined;
  accountName?: string | undefined;
  accountType?: string | undefined;
  currency?: string | undefined;
  currentBalance?: number | undefined;
};

/** @internal */
export const Accounts$outboundSchema: z.ZodType<
  Accounts$Outbound,
  z.ZodTypeDef,
  Accounts
> = z.object({
  sourceRef: SourceRef$outboundSchema.optional(),
  platformName: z.string().optional(),
  accountProvider: z.string().optional(),
  accountName: z.string().optional(),
  accountType: z.string().optional(),
  currency: z.string().optional(),
  currentBalance: z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
    typeof v === "number" ? v : v.toNumber()
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Accounts$ {
  /** @deprecated use `Accounts$inboundSchema` instead. */
  export const inboundSchema = Accounts$inboundSchema;
  /** @deprecated use `Accounts$outboundSchema` instead. */
  export const outboundSchema = Accounts$outboundSchema;
  /** @deprecated use `Accounts$Outbound` instead. */
  export type Outbound = Accounts$Outbound;
}
