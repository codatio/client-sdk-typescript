/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * An object of bank transaction category reference data.
 */
export type TransactionCategoryRef = {
  /**
   * The unique category reference id for the bank transaction.
   */
  id: string;
  /**
   * The category name reference for the bank transaction.
   */
  name?: string | null | undefined;
};

/** @internal */
export const TransactionCategoryRef$inboundSchema: z.ZodType<
  TransactionCategoryRef,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.nullable(z.string()).optional(),
});

/** @internal */
export type TransactionCategoryRef$Outbound = {
  id: string;
  name?: string | null | undefined;
};

/** @internal */
export const TransactionCategoryRef$outboundSchema: z.ZodType<
  TransactionCategoryRef$Outbound,
  z.ZodTypeDef,
  TransactionCategoryRef
> = z.object({
  id: z.string(),
  name: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionCategoryRef$ {
  /** @deprecated use `TransactionCategoryRef$inboundSchema` instead. */
  export const inboundSchema = TransactionCategoryRef$inboundSchema;
  /** @deprecated use `TransactionCategoryRef$outboundSchema` instead. */
  export const outboundSchema = TransactionCategoryRef$outboundSchema;
  /** @deprecated use `TransactionCategoryRef$Outbound` instead. */
  export type Outbound = TransactionCategoryRef$Outbound;
}

export function transactionCategoryRefToJSON(
  transactionCategoryRef: TransactionCategoryRef,
): string {
  return JSON.stringify(
    TransactionCategoryRef$outboundSchema.parse(transactionCategoryRef),
  );
}

export function transactionCategoryRefFromJSON(
  jsonString: string,
): SafeParseResult<TransactionCategoryRef, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionCategoryRef$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionCategoryRef' from JSON`,
  );
}
