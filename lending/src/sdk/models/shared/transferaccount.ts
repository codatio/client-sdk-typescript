/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Decimal as Decimal$ } from "../../types/decimal.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AccountingRecordRef,
  AccountingRecordRef$inboundSchema,
  AccountingRecordRef$Outbound,
  AccountingRecordRef$outboundSchema,
} from "./accountingrecordref.js";

/**
 * Account details of the account sending or receiving the transfer.
 */
export type TransferAccount = {
  /**
   * Links the current record to the underlying record or data type that created it.
   *
   * @remarks
   *
   * For example, if a journal entry is generated based on an invoice, this property allows you to connect the journal entry to the underlying invoice in our data model.
   */
  accountRef?: AccountingRecordRef | undefined;
  /**
   * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
   *
   * @remarks
   *
   * ## Unknown currencies
   *
   * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction.
   *
   * There are only a very small number of edge cases where this currency code is returned by the Codat system.
   */
  currency?: string | undefined;
  /**
   * The amount transferred between accounts.
   */
  amount?: Decimal$ | number | undefined;
};

/** @internal */
export const TransferAccount$inboundSchema: z.ZodType<
  TransferAccount,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountRef: AccountingRecordRef$inboundSchema.optional(),
  currency: z.string().optional(),
  amount: z.number().transform(v => new Decimal$(v)).optional(),
});

/** @internal */
export type TransferAccount$Outbound = {
  accountRef?: AccountingRecordRef$Outbound | undefined;
  currency?: string | undefined;
  amount?: number | undefined;
};

/** @internal */
export const TransferAccount$outboundSchema: z.ZodType<
  TransferAccount$Outbound,
  z.ZodTypeDef,
  TransferAccount
> = z.object({
  accountRef: AccountingRecordRef$outboundSchema.optional(),
  currency: z.string().optional(),
  amount: z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
    typeof v === "number" ? v : v.toNumber()
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransferAccount$ {
  /** @deprecated use `TransferAccount$inboundSchema` instead. */
  export const inboundSchema = TransferAccount$inboundSchema;
  /** @deprecated use `TransferAccount$outboundSchema` instead. */
  export const outboundSchema = TransferAccount$outboundSchema;
  /** @deprecated use `TransferAccount$Outbound` instead. */
  export type Outbound = TransferAccount$Outbound;
}

export function transferAccountToJSON(
  transferAccount: TransferAccount,
): string {
  return JSON.stringify(TransferAccount$outboundSchema.parse(transferAccount));
}

export function transferAccountFromJSON(
  jsonString: string,
): SafeParseResult<TransferAccount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransferAccount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransferAccount' from JSON`,
  );
}
