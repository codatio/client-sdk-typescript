/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The source of the banking data that determines its format
 */
export const Source = {
  Codat: "codat",
} as const;
/**
 * The source of the banking data that determines its format
 */
export type Source = ClosedEnum<typeof Source>;

/**
 * Configuration settings for uploading banking data to Codat
 */
export type BankStatementUploadConfiguration = {
  /**
   * The source of the banking data that determines its format
   */
  source?: Source | undefined;
  /**
   * The ID of the account in the third-party platform
   */
  accountId?: string | undefined;
  /**
   * TrueLayer provider ID (only required if source is TrueLayer)
   */
  providerId?: string | undefined;
};

/** @internal */
export const Source$inboundSchema: z.ZodNativeEnum<typeof Source> = z
  .nativeEnum(Source);

/** @internal */
export const Source$outboundSchema: z.ZodNativeEnum<typeof Source> =
  Source$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Source$ {
  /** @deprecated use `Source$inboundSchema` instead. */
  export const inboundSchema = Source$inboundSchema;
  /** @deprecated use `Source$outboundSchema` instead. */
  export const outboundSchema = Source$outboundSchema;
}

/** @internal */
export const BankStatementUploadConfiguration$inboundSchema: z.ZodType<
  BankStatementUploadConfiguration,
  z.ZodTypeDef,
  unknown
> = z.object({
  source: Source$inboundSchema.optional(),
  accountId: z.string().optional(),
  providerId: z.string().optional(),
});

/** @internal */
export type BankStatementUploadConfiguration$Outbound = {
  source?: string | undefined;
  accountId?: string | undefined;
  providerId?: string | undefined;
};

/** @internal */
export const BankStatementUploadConfiguration$outboundSchema: z.ZodType<
  BankStatementUploadConfiguration$Outbound,
  z.ZodTypeDef,
  BankStatementUploadConfiguration
> = z.object({
  source: Source$outboundSchema.optional(),
  accountId: z.string().optional(),
  providerId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BankStatementUploadConfiguration$ {
  /** @deprecated use `BankStatementUploadConfiguration$inboundSchema` instead. */
  export const inboundSchema = BankStatementUploadConfiguration$inboundSchema;
  /** @deprecated use `BankStatementUploadConfiguration$outboundSchema` instead. */
  export const outboundSchema = BankStatementUploadConfiguration$outboundSchema;
  /** @deprecated use `BankStatementUploadConfiguration$Outbound` instead. */
  export type Outbound = BankStatementUploadConfiguration$Outbound;
}

export function bankStatementUploadConfigurationToJSON(
  bankStatementUploadConfiguration: BankStatementUploadConfiguration,
): string {
  return JSON.stringify(
    BankStatementUploadConfiguration$outboundSchema.parse(
      bankStatementUploadConfiguration,
    ),
  );
}

export function bankStatementUploadConfigurationFromJSON(
  jsonString: string,
): SafeParseResult<BankStatementUploadConfiguration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BankStatementUploadConfiguration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BankStatementUploadConfiguration' from JSON`,
  );
}
