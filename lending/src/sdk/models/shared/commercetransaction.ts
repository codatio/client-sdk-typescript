/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Decimal as Decimal$ } from "../../types/decimal.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SupplementalData,
  SupplementalData$inboundSchema,
  SupplementalData$Outbound,
  SupplementalData$outboundSchema,
} from "./supplementaldata.js";
import {
  TransactionSourceRef,
  TransactionSourceRef$inboundSchema,
  TransactionSourceRef$Outbound,
  TransactionSourceRef$outboundSchema,
} from "./transactionsourceref.js";
import {
  TransactionType,
  TransactionType$inboundSchema,
  TransactionType$outboundSchema,
} from "./transactiontype.js";

/**
 * Details of all financial transactions recorded in the commerce or point of sale system are added to the Transactions data type. For example, payments, service charges, and fees.
 *
 * @remarks
 *
 * You can use data from the Transactions endpoints to calculate key metrics, such as:
 * - Transaction volumes
 * - Average transaction volume
 * - Average transaction value
 * - Returns
 * - Payouts
 */
export type CommerceTransaction = {
  /**
   * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
   *
   * @remarks
   *
   * ```
   * 2020-10-08T22:40:50Z
   * 2021-01-01T00:00:00
   * ```
   *
   * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
   *
   * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
   * - Unqualified local time: `2021-11-15T01:00:00`
   * - UTC time offsets: `2021-11-15T01:00:00-05:00`
   *
   * > Time zones
   * >
   * > Not all dates from Codat will contain information about time zones.
   * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
   */
  createdDate?: string | undefined;
  /**
   * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
   *
   * @remarks
   *
   * ```
   * 2020-10-08T22:40:50Z
   * 2021-01-01T00:00:00
   * ```
   *
   * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
   *
   * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
   * - Unqualified local time: `2021-11-15T01:00:00`
   * - UTC time offsets: `2021-11-15T01:00:00-05:00`
   *
   * > Time zones
   * >
   * > Not all dates from Codat will contain information about time zones.
   * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
   */
  sourceCreatedDate?: string | undefined;
  modifiedDate?: string | undefined;
  sourceModifiedDate?: string | undefined;
  /**
   * A unique, persistent identifier for this record
   */
  id: string;
  /**
   * The total transaction amount
   */
  totalAmount?: Decimal$ | number | undefined;
  /**
   * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
   *
   * @remarks
   *
   * ## Unknown currencies
   *
   * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction.
   *
   * There are only a very small number of edge cases where this currency code is returned by the Codat system.
   */
  currency?: string | undefined;
  /**
   * The type of the platform transaction:
   *
   * @remarks
   * - `Unknown`
   * - `FailedPayout` — Failed transfer of funds from the seller's merchant account to their bank account.
   * - `Payment` — Credit and debit card payments.
   * - `PaymentFee` — Payment provider's fee on each card payment.
   * - `PaymentFeeRefund` — Payment provider's fee that has been refunded to the seller.
   * - `Payout` — Transfer of funds from the seller's merchant account to their bank account.
   * - `Refund` — Refunds to a customer's credit or debit card.
   * - `Transfer` — Secure transfer of funds to the seller's bank account.
   */
  type?: TransactionType | undefined;
  /**
   * Non-standardised transaction type data from the commerce software
   */
  subType?: string | undefined;
  /**
   * Link to the source event which triggered this transaction
   */
  transactionSourceRef?: TransactionSourceRef | undefined;
  /**
   * Supplemental data is additional data you can include in our standard data types.
   *
   * @remarks
   *
   * It is referenced as a configured dynamic key value pair that is unique to the accounting software. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
   */
  supplementalData?: SupplementalData | undefined;
};

/** @internal */
export const CommerceTransaction$inboundSchema: z.ZodType<
  CommerceTransaction,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdDate: z.string().optional(),
  sourceCreatedDate: z.string().optional(),
  modifiedDate: z.string().optional(),
  sourceModifiedDate: z.string().optional(),
  id: z.string(),
  totalAmount: z.number().transform(v => new Decimal$(v)).optional(),
  currency: z.string().optional(),
  type: TransactionType$inboundSchema.optional(),
  subType: z.string().optional(),
  transactionSourceRef: TransactionSourceRef$inboundSchema.optional(),
  supplementalData: SupplementalData$inboundSchema.optional(),
});

/** @internal */
export type CommerceTransaction$Outbound = {
  createdDate?: string | undefined;
  sourceCreatedDate?: string | undefined;
  modifiedDate?: string | undefined;
  sourceModifiedDate?: string | undefined;
  id: string;
  totalAmount?: number | undefined;
  currency?: string | undefined;
  type?: string | undefined;
  subType?: string | undefined;
  transactionSourceRef?: TransactionSourceRef$Outbound | undefined;
  supplementalData?: SupplementalData$Outbound | undefined;
};

/** @internal */
export const CommerceTransaction$outboundSchema: z.ZodType<
  CommerceTransaction$Outbound,
  z.ZodTypeDef,
  CommerceTransaction
> = z.object({
  createdDate: z.string().optional(),
  sourceCreatedDate: z.string().optional(),
  modifiedDate: z.string().optional(),
  sourceModifiedDate: z.string().optional(),
  id: z.string(),
  totalAmount: z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
    typeof v === "number" ? v : v.toNumber()
  ).optional(),
  currency: z.string().optional(),
  type: TransactionType$outboundSchema.optional(),
  subType: z.string().optional(),
  transactionSourceRef: TransactionSourceRef$outboundSchema.optional(),
  supplementalData: SupplementalData$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CommerceTransaction$ {
  /** @deprecated use `CommerceTransaction$inboundSchema` instead. */
  export const inboundSchema = CommerceTransaction$inboundSchema;
  /** @deprecated use `CommerceTransaction$outboundSchema` instead. */
  export const outboundSchema = CommerceTransaction$outboundSchema;
  /** @deprecated use `CommerceTransaction$Outbound` instead. */
  export type Outbound = CommerceTransaction$Outbound;
}

export function commerceTransactionToJSON(
  commerceTransaction: CommerceTransaction,
): string {
  return JSON.stringify(
    CommerceTransaction$outboundSchema.parse(commerceTransaction),
  );
}

export function commerceTransactionFromJSON(
  jsonString: string,
): SafeParseResult<CommerceTransaction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CommerceTransaction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CommerceTransaction' from JSON`,
  );
}
