/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AccountingAddress,
  AccountingAddress$inboundSchema,
  AccountingAddress$Outbound,
  AccountingAddress$outboundSchema,
} from "./accountingaddress.js";
import {
  CustomerStatus,
  CustomerStatus$inboundSchema,
  CustomerStatus$outboundSchema,
} from "./customerstatus.js";
import {
  PhoneNumber,
  PhoneNumber$inboundSchema,
  PhoneNumber$Outbound,
  PhoneNumber$outboundSchema,
} from "./phonenumber.js";

export type Contact = {
  /**
   * Name of a contact for a customer.
   */
  name?: string | null | undefined;
  /**
   * Email of a contact for a customer.
   */
  email?: string | null | undefined;
  /**
   * An array of Phone numbers.
   */
  phone?: Array<PhoneNumber> | null | undefined;
  address?: AccountingAddress | undefined;
  /**
   * Status of customer.
   */
  status: CustomerStatus;
  /**
   * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
   *
   * @remarks
   *
   * ```
   * 2020-10-08T22:40:50Z
   * 2021-01-01T00:00:00
   * ```
   *
   * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
   *
   * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
   * - Unqualified local time: `2021-11-15T01:00:00`
   * - UTC time offsets: `2021-11-15T01:00:00-05:00`
   *
   * > Time zones
   * >
   * > Not all dates from Codat will contain information about time zones.
   * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
   */
  modifiedDate?: string | undefined;
};

/** @internal */
export const Contact$inboundSchema: z.ZodType<Contact, z.ZodTypeDef, unknown> =
  z.object({
    name: z.nullable(z.string()).optional(),
    email: z.nullable(z.string()).optional(),
    phone: z.nullable(z.array(PhoneNumber$inboundSchema)).optional(),
    address: AccountingAddress$inboundSchema.optional(),
    status: CustomerStatus$inboundSchema,
    modifiedDate: z.string().optional(),
  });

/** @internal */
export type Contact$Outbound = {
  name?: string | null | undefined;
  email?: string | null | undefined;
  phone?: Array<PhoneNumber$Outbound> | null | undefined;
  address?: AccountingAddress$Outbound | undefined;
  status: string;
  modifiedDate?: string | undefined;
};

/** @internal */
export const Contact$outboundSchema: z.ZodType<
  Contact$Outbound,
  z.ZodTypeDef,
  Contact
> = z.object({
  name: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  phone: z.nullable(z.array(PhoneNumber$outboundSchema)).optional(),
  address: AccountingAddress$outboundSchema.optional(),
  status: CustomerStatus$outboundSchema,
  modifiedDate: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Contact$ {
  /** @deprecated use `Contact$inboundSchema` instead. */
  export const inboundSchema = Contact$inboundSchema;
  /** @deprecated use `Contact$outboundSchema` instead. */
  export const outboundSchema = Contact$outboundSchema;
  /** @deprecated use `Contact$Outbound` instead. */
  export type Outbound = Contact$Outbound;
}

export function contactToJSON(contact: Contact): string {
  return JSON.stringify(Contact$outboundSchema.parse(contact));
}

export function contactFromJSON(
  jsonString: string,
): SafeParseResult<Contact, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Contact$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Contact' from JSON`,
  );
}
