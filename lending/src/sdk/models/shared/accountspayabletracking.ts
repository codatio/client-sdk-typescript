/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AccountingCustomerRef,
  AccountingCustomerRef$inboundSchema,
  AccountingCustomerRef$Outbound,
  AccountingCustomerRef$outboundSchema,
} from "./accountingcustomerref.js";
import {
  BilledToType,
  BilledToType$inboundSchema,
  BilledToType$outboundSchema,
} from "./billedtotype.js";
import {
  ProjectRef,
  ProjectRef$inboundSchema,
  ProjectRef$Outbound,
  ProjectRef$outboundSchema,
} from "./projectref.js";
import {
  TrackingCategoryRef,
  TrackingCategoryRef$inboundSchema,
  TrackingCategoryRef$Outbound,
  TrackingCategoryRef$outboundSchema,
} from "./trackingcategoryref.js";

/**
 * Categories, and a project and customer, against which the item is tracked.
 */
export type AccountsPayableTracking = {
  categoryRefs: Array<TrackingCategoryRef>;
  customerRef?: AccountingCustomerRef | undefined;
  projectRef?: ProjectRef | undefined;
  /**
   * Defines if the invoice or credit note is billed/rebilled to a project or customer.
   */
  isBilledTo: BilledToType;
  /**
   * Defines if the invoice or credit note is billed/rebilled to a project or customer.
   */
  isRebilledTo: BilledToType;
};

/** @internal */
export const AccountsPayableTracking$inboundSchema: z.ZodType<
  AccountsPayableTracking,
  z.ZodTypeDef,
  unknown
> = z.object({
  categoryRefs: z.array(TrackingCategoryRef$inboundSchema),
  customerRef: AccountingCustomerRef$inboundSchema.optional(),
  projectRef: ProjectRef$inboundSchema.optional(),
  isBilledTo: BilledToType$inboundSchema,
  isRebilledTo: BilledToType$inboundSchema,
});

/** @internal */
export type AccountsPayableTracking$Outbound = {
  categoryRefs: Array<TrackingCategoryRef$Outbound>;
  customerRef?: AccountingCustomerRef$Outbound | undefined;
  projectRef?: ProjectRef$Outbound | undefined;
  isBilledTo: string;
  isRebilledTo: string;
};

/** @internal */
export const AccountsPayableTracking$outboundSchema: z.ZodType<
  AccountsPayableTracking$Outbound,
  z.ZodTypeDef,
  AccountsPayableTracking
> = z.object({
  categoryRefs: z.array(TrackingCategoryRef$outboundSchema),
  customerRef: AccountingCustomerRef$outboundSchema.optional(),
  projectRef: ProjectRef$outboundSchema.optional(),
  isBilledTo: BilledToType$outboundSchema,
  isRebilledTo: BilledToType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountsPayableTracking$ {
  /** @deprecated use `AccountsPayableTracking$inboundSchema` instead. */
  export const inboundSchema = AccountsPayableTracking$inboundSchema;
  /** @deprecated use `AccountsPayableTracking$outboundSchema` instead. */
  export const outboundSchema = AccountsPayableTracking$outboundSchema;
  /** @deprecated use `AccountsPayableTracking$Outbound` instead. */
  export type Outbound = AccountsPayableTracking$Outbound;
}

export function accountsPayableTrackingToJSON(
  accountsPayableTracking: AccountsPayableTracking,
): string {
  return JSON.stringify(
    AccountsPayableTracking$outboundSchema.parse(accountsPayableTracking),
  );
}

export function accountsPayableTrackingFromJSON(
  jsonString: string,
): SafeParseResult<AccountsPayableTracking, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountsPayableTracking$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountsPayableTracking' from JSON`,
  );
}
