/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  DisputeStatus,
  DisputeStatus$inboundSchema,
  DisputeStatus$outboundSchema,
} from "./disputestatus.js";
import {
  TransactionSourceRef,
  TransactionSourceRef$inboundSchema,
  TransactionSourceRef$Outbound,
  TransactionSourceRef$outboundSchema,
} from "./transactionsourceref.js";

/**
 * A customer may file a payment dispute with their bank or other card issuer when they're unsatisfied with their purchase or believe they have been charged incorrectly. For example:
 *
 * @remarks
 * - They didn't receive an order.
 * - The product they received was different to the commerce store's description.
 * - They've been the victim of online fraud.
 *
 * You can use data from the Disputes endpoints to calculate key metrics, such as the number of chargebacks.
 *
 * Explore our [data coverage](https://knowledge.codat.io/supported-features/commerce?view=tab-by-data-type&dataType=commerce-disputes) for this data type.
 */
export type CommerceDispute = {
  modifiedDate?: string | undefined;
  sourceModifiedDate?: string | undefined;
  /**
   * A unique, persistent identifier for this record
   */
  id: string;
  /**
   * Link to the source event(s) which triggered this transaction.
   */
  disputedTransactions?: Array<TransactionSourceRef> | undefined;
  /**
   * Total transaction amount that is under dispute.
   */
  totalAmount?: any | undefined;
  /**
   * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
   *
   * @remarks
   *
   * ## Unknown currencies
   *
   * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction.
   *
   * There are only a very small number of edge cases where this currency code is returned by the Codat system.
   */
  currency: string;
  /**
   * Current status of the dispute
   */
  status?: DisputeStatus | undefined;
  /**
   * Reason for the dispute
   */
  reason?: string | undefined;
  /**
   * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
   *
   * @remarks
   *
   * ```
   * 2020-10-08T22:40:50Z
   * 2021-01-01T00:00:00
   * ```
   *
   * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
   *
   * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
   * - Unqualified local time: `2021-11-15T01:00:00`
   * - UTC time offsets: `2021-11-15T01:00:00-05:00`
   *
   * > Time zones
   * >
   * > Not all dates from Codat will contain information about time zones.
   * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
   */
  dueDate?: string | undefined;
  /**
   * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
   *
   * @remarks
   *
   * ```
   * 2020-10-08T22:40:50Z
   * 2021-01-01T00:00:00
   * ```
   *
   * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
   *
   * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
   * - Unqualified local time: `2021-11-15T01:00:00`
   * - UTC time offsets: `2021-11-15T01:00:00-05:00`
   *
   * > Time zones
   * >
   * > Not all dates from Codat will contain information about time zones.
   * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
   */
  createdDate?: string | undefined;
};

/** @internal */
export const CommerceDispute$inboundSchema: z.ZodType<
  CommerceDispute,
  z.ZodTypeDef,
  unknown
> = z.object({
  modifiedDate: z.string().optional(),
  sourceModifiedDate: z.string().optional(),
  id: z.string(),
  disputedTransactions: z.array(TransactionSourceRef$inboundSchema).optional(),
  totalAmount: z.any().optional(),
  currency: z.string(),
  status: DisputeStatus$inboundSchema.optional(),
  reason: z.string().optional(),
  dueDate: z.string().optional(),
  createdDate: z.string().optional(),
});

/** @internal */
export type CommerceDispute$Outbound = {
  modifiedDate?: string | undefined;
  sourceModifiedDate?: string | undefined;
  id: string;
  disputedTransactions?: Array<TransactionSourceRef$Outbound> | undefined;
  totalAmount?: any | undefined;
  currency: string;
  status?: string | undefined;
  reason?: string | undefined;
  dueDate?: string | undefined;
  createdDate?: string | undefined;
};

/** @internal */
export const CommerceDispute$outboundSchema: z.ZodType<
  CommerceDispute$Outbound,
  z.ZodTypeDef,
  CommerceDispute
> = z.object({
  modifiedDate: z.string().optional(),
  sourceModifiedDate: z.string().optional(),
  id: z.string(),
  disputedTransactions: z.array(TransactionSourceRef$outboundSchema).optional(),
  totalAmount: z.any().optional(),
  currency: z.string(),
  status: DisputeStatus$outboundSchema.optional(),
  reason: z.string().optional(),
  dueDate: z.string().optional(),
  createdDate: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CommerceDispute$ {
  /** @deprecated use `CommerceDispute$inboundSchema` instead. */
  export const inboundSchema = CommerceDispute$inboundSchema;
  /** @deprecated use `CommerceDispute$outboundSchema` instead. */
  export const outboundSchema = CommerceDispute$outboundSchema;
  /** @deprecated use `CommerceDispute$Outbound` instead. */
  export type Outbound = CommerceDispute$Outbound;
}
