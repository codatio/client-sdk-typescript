/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type GetDataIntegrityStatusRequest = {
  /**
   * Unique identifier for a company.
   */
  companyId: string;
  /**
   * A key for a Codat data type.
   */
  dataType: shared.DataIntegrityDataType;
};

/** @internal */
export const GetDataIntegrityStatusRequest$inboundSchema: z.ZodType<
  GetDataIntegrityStatusRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  companyId: z.string(),
  dataType: shared.DataIntegrityDataType$inboundSchema,
});

/** @internal */
export type GetDataIntegrityStatusRequest$Outbound = {
  companyId: string;
  dataType: string;
};

/** @internal */
export const GetDataIntegrityStatusRequest$outboundSchema: z.ZodType<
  GetDataIntegrityStatusRequest$Outbound,
  z.ZodTypeDef,
  GetDataIntegrityStatusRequest
> = z.object({
  companyId: z.string(),
  dataType: shared.DataIntegrityDataType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDataIntegrityStatusRequest$ {
  /** @deprecated use `GetDataIntegrityStatusRequest$inboundSchema` instead. */
  export const inboundSchema = GetDataIntegrityStatusRequest$inboundSchema;
  /** @deprecated use `GetDataIntegrityStatusRequest$outboundSchema` instead. */
  export const outboundSchema = GetDataIntegrityStatusRequest$outboundSchema;
  /** @deprecated use `GetDataIntegrityStatusRequest$Outbound` instead. */
  export type Outbound = GetDataIntegrityStatusRequest$Outbound;
}

export function getDataIntegrityStatusRequestToJSON(
  getDataIntegrityStatusRequest: GetDataIntegrityStatusRequest,
): string {
  return JSON.stringify(
    GetDataIntegrityStatusRequest$outboundSchema.parse(
      getDataIntegrityStatusRequest,
    ),
  );
}

export function getDataIntegrityStatusRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetDataIntegrityStatusRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDataIntegrityStatusRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDataIntegrityStatusRequest' from JSON`,
  );
}
