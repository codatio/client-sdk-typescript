/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type EndBankStatementUploadSessionRequest = {
  /**
   * Unique identifier for a company.
   */
  companyId: string;
  /**
   * Unique identifier for a connection.
   */
  connectionId: string;
  /**
   * Unique identifier for the dataset that completed its sync.
   */
  datasetId: string;
  endUploadSessionRequest?: shared.EndUploadSessionRequest | undefined;
};

/** @internal */
export const EndBankStatementUploadSessionRequest$inboundSchema: z.ZodType<
  EndBankStatementUploadSessionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  companyId: z.string(),
  connectionId: z.string(),
  datasetId: z.string(),
  EndUploadSessionRequest: shared.EndUploadSessionRequest$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "EndUploadSessionRequest": "endUploadSessionRequest",
  });
});

/** @internal */
export type EndBankStatementUploadSessionRequest$Outbound = {
  companyId: string;
  connectionId: string;
  datasetId: string;
  EndUploadSessionRequest?: shared.EndUploadSessionRequest$Outbound | undefined;
};

/** @internal */
export const EndBankStatementUploadSessionRequest$outboundSchema: z.ZodType<
  EndBankStatementUploadSessionRequest$Outbound,
  z.ZodTypeDef,
  EndBankStatementUploadSessionRequest
> = z.object({
  companyId: z.string(),
  connectionId: z.string(),
  datasetId: z.string(),
  endUploadSessionRequest: shared.EndUploadSessionRequest$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    endUploadSessionRequest: "EndUploadSessionRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EndBankStatementUploadSessionRequest$ {
  /** @deprecated use `EndBankStatementUploadSessionRequest$inboundSchema` instead. */
  export const inboundSchema =
    EndBankStatementUploadSessionRequest$inboundSchema;
  /** @deprecated use `EndBankStatementUploadSessionRequest$outboundSchema` instead. */
  export const outboundSchema =
    EndBankStatementUploadSessionRequest$outboundSchema;
  /** @deprecated use `EndBankStatementUploadSessionRequest$Outbound` instead. */
  export type Outbound = EndBankStatementUploadSessionRequest$Outbound;
}

export function endBankStatementUploadSessionRequestToJSON(
  endBankStatementUploadSessionRequest: EndBankStatementUploadSessionRequest,
): string {
  return JSON.stringify(
    EndBankStatementUploadSessionRequest$outboundSchema.parse(
      endBankStatementUploadSessionRequest,
    ),
  );
}

export function endBankStatementUploadSessionRequestFromJSON(
  jsonString: string,
): SafeParseResult<EndBankStatementUploadSessionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EndBankStatementUploadSessionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EndBankStatementUploadSessionRequest' from JSON`,
  );
}
