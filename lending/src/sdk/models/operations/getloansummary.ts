/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Data source type.
 */
export const GetLoanSummaryQueryParamSourceType = {
  Banking: "banking",
  Commerce: "commerce",
  Accounting: "accounting",
} as const;
/**
 * Data source type.
 */
export type GetLoanSummaryQueryParamSourceType = ClosedEnum<
  typeof GetLoanSummaryQueryParamSourceType
>;

export type GetLoanSummaryRequest = {
  /**
   * Unique identifier for a company.
   */
  companyId: string;
  /**
   * Data source type.
   */
  sourceType: GetLoanSummaryQueryParamSourceType;
};

/** @internal */
export const GetLoanSummaryQueryParamSourceType$inboundSchema: z.ZodNativeEnum<
  typeof GetLoanSummaryQueryParamSourceType
> = z.nativeEnum(GetLoanSummaryQueryParamSourceType);

/** @internal */
export const GetLoanSummaryQueryParamSourceType$outboundSchema: z.ZodNativeEnum<
  typeof GetLoanSummaryQueryParamSourceType
> = GetLoanSummaryQueryParamSourceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLoanSummaryQueryParamSourceType$ {
  /** @deprecated use `GetLoanSummaryQueryParamSourceType$inboundSchema` instead. */
  export const inboundSchema = GetLoanSummaryQueryParamSourceType$inboundSchema;
  /** @deprecated use `GetLoanSummaryQueryParamSourceType$outboundSchema` instead. */
  export const outboundSchema =
    GetLoanSummaryQueryParamSourceType$outboundSchema;
}

/** @internal */
export const GetLoanSummaryRequest$inboundSchema: z.ZodType<
  GetLoanSummaryRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  companyId: z.string(),
  sourceType: GetLoanSummaryQueryParamSourceType$inboundSchema,
});

/** @internal */
export type GetLoanSummaryRequest$Outbound = {
  companyId: string;
  sourceType: string;
};

/** @internal */
export const GetLoanSummaryRequest$outboundSchema: z.ZodType<
  GetLoanSummaryRequest$Outbound,
  z.ZodTypeDef,
  GetLoanSummaryRequest
> = z.object({
  companyId: z.string(),
  sourceType: GetLoanSummaryQueryParamSourceType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLoanSummaryRequest$ {
  /** @deprecated use `GetLoanSummaryRequest$inboundSchema` instead. */
  export const inboundSchema = GetLoanSummaryRequest$inboundSchema;
  /** @deprecated use `GetLoanSummaryRequest$outboundSchema` instead. */
  export const outboundSchema = GetLoanSummaryRequest$outboundSchema;
  /** @deprecated use `GetLoanSummaryRequest$Outbound` instead. */
  export type Outbound = GetLoanSummaryRequest$Outbound;
}

export function getLoanSummaryRequestToJSON(
  getLoanSummaryRequest: GetLoanSummaryRequest,
): string {
  return JSON.stringify(
    GetLoanSummaryRequest$outboundSchema.parse(getLoanSummaryRequest),
  );
}

export function getLoanSummaryRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetLoanSummaryRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetLoanSummaryRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetLoanSummaryRequest' from JSON`,
  );
}
