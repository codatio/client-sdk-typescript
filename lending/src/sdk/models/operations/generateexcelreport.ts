/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type GenerateExcelReportRequest = {
  /**
   * Unique identifier for a company.
   */
  companyId: string;
  /**
   * The type of report you want to generate and download.
   */
  reportType: shared.ExcelReportTypes;
};

/** @internal */
export const GenerateExcelReportRequest$inboundSchema: z.ZodType<
  GenerateExcelReportRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  companyId: z.string(),
  reportType: shared.ExcelReportTypes$inboundSchema,
});

/** @internal */
export type GenerateExcelReportRequest$Outbound = {
  companyId: string;
  reportType: string;
};

/** @internal */
export const GenerateExcelReportRequest$outboundSchema: z.ZodType<
  GenerateExcelReportRequest$Outbound,
  z.ZodTypeDef,
  GenerateExcelReportRequest
> = z.object({
  companyId: z.string(),
  reportType: shared.ExcelReportTypes$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GenerateExcelReportRequest$ {
  /** @deprecated use `GenerateExcelReportRequest$inboundSchema` instead. */
  export const inboundSchema = GenerateExcelReportRequest$inboundSchema;
  /** @deprecated use `GenerateExcelReportRequest$outboundSchema` instead. */
  export const outboundSchema = GenerateExcelReportRequest$outboundSchema;
  /** @deprecated use `GenerateExcelReportRequest$Outbound` instead. */
  export type Outbound = GenerateExcelReportRequest$Outbound;
}

export function generateExcelReportRequestToJSON(
  generateExcelReportRequest: GenerateExcelReportRequest,
): string {
  return JSON.stringify(
    GenerateExcelReportRequest$outboundSchema.parse(generateExcelReportRequest),
  );
}

export function generateExcelReportRequestFromJSON(
  jsonString: string,
): SafeParseResult<GenerateExcelReportRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GenerateExcelReportRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GenerateExcelReportRequest' from JSON`,
  );
}
