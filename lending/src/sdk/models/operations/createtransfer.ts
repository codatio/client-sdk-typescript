/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";

export type CreateTransferRequest = {
  /**
   * Unique identifier for a company.
   */
  companyId: string;
  /**
   * Unique identifier for a connection.
   */
  connectionId: string;
  /**
   * Time limit for the push operation to complete before it is timed out.
   */
  timeoutInMinutes?: number | undefined;
  /**
   * Allow a sync upon push completion.
   */
  allowSyncOnPushComplete?: boolean | undefined;
  accountingTransfer?: shared.AccountingTransfer | null | undefined;
};

/** @internal */
export const CreateTransferRequest$inboundSchema: z.ZodType<
  CreateTransferRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  companyId: z.string(),
  connectionId: z.string(),
  timeoutInMinutes: z.number().int().optional(),
  allowSyncOnPushComplete: z.boolean().default(true),
  AccountingTransfer: z.nullable(shared.AccountingTransfer$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "AccountingTransfer": "accountingTransfer",
  });
});

/** @internal */
export type CreateTransferRequest$Outbound = {
  companyId: string;
  connectionId: string;
  timeoutInMinutes?: number | undefined;
  allowSyncOnPushComplete: boolean;
  AccountingTransfer?: shared.AccountingTransfer$Outbound | null | undefined;
};

/** @internal */
export const CreateTransferRequest$outboundSchema: z.ZodType<
  CreateTransferRequest$Outbound,
  z.ZodTypeDef,
  CreateTransferRequest
> = z.object({
  companyId: z.string(),
  connectionId: z.string(),
  timeoutInMinutes: z.number().int().optional(),
  allowSyncOnPushComplete: z.boolean().default(true),
  accountingTransfer: z.nullable(shared.AccountingTransfer$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    accountingTransfer: "AccountingTransfer",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTransferRequest$ {
  /** @deprecated use `CreateTransferRequest$inboundSchema` instead. */
  export const inboundSchema = CreateTransferRequest$inboundSchema;
  /** @deprecated use `CreateTransferRequest$outboundSchema` instead. */
  export const outboundSchema = CreateTransferRequest$outboundSchema;
  /** @deprecated use `CreateTransferRequest$Outbound` instead. */
  export type Outbound = CreateTransferRequest$Outbound;
}
