/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListAccountingBankAccountTransactionsRequest = {
  /**
   * Unique identifier for a company.
   */
  companyId: string;
  /**
   * Unique identifier for a connection.
   */
  connectionId: string;
  /**
   * Unique identifier for an account.
   */
  accountId: string;
  /**
   * Page number. [Read more](https://docs.codat.io/using-the-api/paging).
   */
  page?: number | undefined;
  /**
   * Number of records to return in a page. [Read more](https://docs.codat.io/using-the-api/paging).
   */
  pageSize?: number | undefined;
  /**
   * Codat query string. [Read more](https://docs.codat.io/using-the-api/querying).
   */
  query?: string | undefined;
  /**
   * Field to order results by. [Read more](https://docs.codat.io/using-the-api/ordering-results).
   */
  orderBy?: string | undefined;
};

/** @internal */
export const ListAccountingBankAccountTransactionsRequest$inboundSchema:
  z.ZodType<
    ListAccountingBankAccountTransactionsRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    companyId: z.string(),
    connectionId: z.string(),
    accountId: z.string(),
    page: z.number().int().default(1),
    pageSize: z.number().int().default(100),
    query: z.string().optional(),
    orderBy: z.string().optional(),
  });

/** @internal */
export type ListAccountingBankAccountTransactionsRequest$Outbound = {
  companyId: string;
  connectionId: string;
  accountId: string;
  page: number;
  pageSize: number;
  query?: string | undefined;
  orderBy?: string | undefined;
};

/** @internal */
export const ListAccountingBankAccountTransactionsRequest$outboundSchema:
  z.ZodType<
    ListAccountingBankAccountTransactionsRequest$Outbound,
    z.ZodTypeDef,
    ListAccountingBankAccountTransactionsRequest
  > = z.object({
    companyId: z.string(),
    connectionId: z.string(),
    accountId: z.string(),
    page: z.number().int().default(1),
    pageSize: z.number().int().default(100),
    query: z.string().optional(),
    orderBy: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAccountingBankAccountTransactionsRequest$ {
  /** @deprecated use `ListAccountingBankAccountTransactionsRequest$inboundSchema` instead. */
  export const inboundSchema =
    ListAccountingBankAccountTransactionsRequest$inboundSchema;
  /** @deprecated use `ListAccountingBankAccountTransactionsRequest$outboundSchema` instead. */
  export const outboundSchema =
    ListAccountingBankAccountTransactionsRequest$outboundSchema;
  /** @deprecated use `ListAccountingBankAccountTransactionsRequest$Outbound` instead. */
  export type Outbound = ListAccountingBankAccountTransactionsRequest$Outbound;
}

export function listAccountingBankAccountTransactionsRequestToJSON(
  listAccountingBankAccountTransactionsRequest:
    ListAccountingBankAccountTransactionsRequest,
): string {
  return JSON.stringify(
    ListAccountingBankAccountTransactionsRequest$outboundSchema.parse(
      listAccountingBankAccountTransactionsRequest,
    ),
  );
}

export function listAccountingBankAccountTransactionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  ListAccountingBankAccountTransactionsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListAccountingBankAccountTransactionsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListAccountingBankAccountTransactionsRequest' from JSON`,
  );
}
