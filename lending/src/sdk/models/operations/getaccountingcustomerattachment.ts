/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetAccountingCustomerAttachmentRequest = {
  /**
   * Unique identifier for a company.
   */
  companyId: string;
  /**
   * Unique identifier for a connection.
   */
  connectionId: string;
  /**
   * Unique identifier for a customer.
   */
  customerId: string;
  /**
   * Unique identifier for an attachment.
   */
  attachmentId: string;
};

/** @internal */
export const GetAccountingCustomerAttachmentRequest$inboundSchema: z.ZodType<
  GetAccountingCustomerAttachmentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  companyId: z.string(),
  connectionId: z.string(),
  customerId: z.string(),
  attachmentId: z.string(),
});

/** @internal */
export type GetAccountingCustomerAttachmentRequest$Outbound = {
  companyId: string;
  connectionId: string;
  customerId: string;
  attachmentId: string;
};

/** @internal */
export const GetAccountingCustomerAttachmentRequest$outboundSchema: z.ZodType<
  GetAccountingCustomerAttachmentRequest$Outbound,
  z.ZodTypeDef,
  GetAccountingCustomerAttachmentRequest
> = z.object({
  companyId: z.string(),
  connectionId: z.string(),
  customerId: z.string(),
  attachmentId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAccountingCustomerAttachmentRequest$ {
  /** @deprecated use `GetAccountingCustomerAttachmentRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetAccountingCustomerAttachmentRequest$inboundSchema;
  /** @deprecated use `GetAccountingCustomerAttachmentRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetAccountingCustomerAttachmentRequest$outboundSchema;
  /** @deprecated use `GetAccountingCustomerAttachmentRequest$Outbound` instead. */
  export type Outbound = GetAccountingCustomerAttachmentRequest$Outbound;
}

export function getAccountingCustomerAttachmentRequestToJSON(
  getAccountingCustomerAttachmentRequest:
    GetAccountingCustomerAttachmentRequest,
): string {
  return JSON.stringify(
    GetAccountingCustomerAttachmentRequest$outboundSchema.parse(
      getAccountingCustomerAttachmentRequest,
    ),
  );
}

export function getAccountingCustomerAttachmentRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAccountingCustomerAttachmentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAccountingCustomerAttachmentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAccountingCustomerAttachmentRequest' from JSON`,
  );
}
