/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type CreateSupplierRequest = {
  /**
   * Unique identifier for a company.
   */
  companyId: string;
  /**
   * Unique identifier for a connection.
   */
  connectionId: string;
  /**
   * Time limit for the push operation to complete before it is timed out.
   */
  timeoutInMinutes?: number | undefined;
  /**
   * Allow a sync upon push completion.
   */
  allowSyncOnPushComplete?: boolean | undefined;
  accountingSupplier?: shared.AccountingSupplier | null | undefined;
};

/** @internal */
export const CreateSupplierRequest$inboundSchema: z.ZodType<
  CreateSupplierRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  companyId: z.string(),
  connectionId: z.string(),
  timeoutInMinutes: z.number().int().optional(),
  allowSyncOnPushComplete: z.boolean().default(true),
  AccountingSupplier: z.nullable(shared.AccountingSupplier$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "AccountingSupplier": "accountingSupplier",
  });
});

/** @internal */
export type CreateSupplierRequest$Outbound = {
  companyId: string;
  connectionId: string;
  timeoutInMinutes?: number | undefined;
  allowSyncOnPushComplete: boolean;
  AccountingSupplier?: shared.AccountingSupplier$Outbound | null | undefined;
};

/** @internal */
export const CreateSupplierRequest$outboundSchema: z.ZodType<
  CreateSupplierRequest$Outbound,
  z.ZodTypeDef,
  CreateSupplierRequest
> = z.object({
  companyId: z.string(),
  connectionId: z.string(),
  timeoutInMinutes: z.number().int().optional(),
  allowSyncOnPushComplete: z.boolean().default(true),
  accountingSupplier: z.nullable(shared.AccountingSupplier$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    accountingSupplier: "AccountingSupplier",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSupplierRequest$ {
  /** @deprecated use `CreateSupplierRequest$inboundSchema` instead. */
  export const inboundSchema = CreateSupplierRequest$inboundSchema;
  /** @deprecated use `CreateSupplierRequest$outboundSchema` instead. */
  export const outboundSchema = CreateSupplierRequest$outboundSchema;
  /** @deprecated use `CreateSupplierRequest$Outbound` instead. */
  export type Outbound = CreateSupplierRequest$Outbound;
}

export function createSupplierRequestToJSON(
  createSupplierRequest: CreateSupplierRequest,
): string {
  return JSON.stringify(
    CreateSupplierRequest$outboundSchema.parse(createSupplierRequest),
  );
}

export function createSupplierRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateSupplierRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSupplierRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSupplierRequest' from JSON`,
  );
}
