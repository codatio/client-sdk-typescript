/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

export class CreateExpenseDatasetRequestBodyItemsLinesRecordRef extends SpeakeasyBase {
  /**
   * identifier of linked reference from mapping options.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;
}

export class CreateExpenseDatasetRequestBodyItemsLines extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "accountRef" })
  @Type(() => CreateExpenseDatasetRequestBodyItemsLinesRecordRef)
  accountRef: CreateExpenseDatasetRequestBodyItemsLinesRecordRef;

  /**
   * Amount of the line, exclusive of tax.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "netAmount" })
  netAmount: number;

  /**
   * Amount of tax for the line.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "taxAmount" })
  taxAmount: number;

  @SpeakeasyMetadata()
  @Expose({ name: "taxRateRef" })
  @Type(() => CreateExpenseDatasetRequestBodyItemsLinesRecordRef)
  taxRateRef?: CreateExpenseDatasetRequestBodyItemsLinesRecordRef;

  @SpeakeasyMetadata({
    elemType: CreateExpenseDatasetRequestBodyItemsLinesRecordRef,
  })
  @Expose({ name: "trackingRefs" })
  @Type(() => CreateExpenseDatasetRequestBodyItemsLinesRecordRef)
  trackingRefs?: CreateExpenseDatasetRequestBodyItemsLinesRecordRef[];
}

/**
 * The type of transaction.
 */
export enum CreateExpenseDatasetRequestBodyItemsTypeEnum {
  Payment = "Payment",
  Refund = "Refund",
  Reward = "Reward",
  Chargeback = "Chargeback",
  TransferIn = "TransferIn",
  TransferOut = "TransferOut",
  AdjustmentIn = "AdjustmentIn",
  AdjustmentOut = "AdjustmentOut",
}

export class CreateExpenseDatasetRequestBodyItems extends SpeakeasyBase {
  /**
   * Currency the transaction was recorded in.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency" })
  currency: string;

  /**
   * Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
   *
   * @remarks
   *
   * Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.
   *
   * Where the currency rate is provided by the underlying accounting platform, it will be available from Codat with the same precision (up to a maximum of 9 decimal places).
   *
   * For accounting platforms which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
   *
   * ## Examples with base currency of GBP
   *
   * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
   * | :--------------- | :------------- | :------------ | :------------------------- |
   * | **USD**          | $20            | 0.781         | £15.62                     |
   * | **EUR**          | €20            | 0.885         | £17.70                     |
   * | **RUB**          | ₽20            | 0.011         | £0.22                      |
   *
   * ## Examples with base currency of USD
   *
   * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
   * | :--------------- | :------------- | :------------ | :------------------------- |
   * | **GBP**          | £20            | 1.277         | $25.54                     |
   * | **EUR**          | €20            | 1.134         | $22.68                     |
   * | **RUB**          | ₽20            | 0.015         | $0.30                      |
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currencyRate" })
  currencyRate?: number;

  /**
   * Your unique idenfier for the transaction.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  /**
   * Date of the transaction was recorded.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "issueDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  issueDate: Date;

  /**
   * Array of transaction lines.
   */
  @SpeakeasyMetadata({ elemType: CreateExpenseDatasetRequestBodyItemsLines })
  @Expose({ name: "lines" })
  @Type(() => CreateExpenseDatasetRequestBodyItemsLines)
  lines?: CreateExpenseDatasetRequestBodyItemsLines[];

  /**
   * Name of the merchant where the purchase took place
   */
  @SpeakeasyMetadata()
  @Expose({ name: "merchantName" })
  merchantName?: string;

  /**
   * Any private, company notes about the transaction.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "notes" })
  notes?: string;

  /**
   * The type of transaction.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: CreateExpenseDatasetRequestBodyItemsTypeEnum;
}

export class CreateExpenseDatasetRequestBody extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: CreateExpenseDatasetRequestBodyItems })
  @Expose({ name: "items" })
  @Type(() => CreateExpenseDatasetRequestBodyItems)
  items?: CreateExpenseDatasetRequestBodyItems[];
}

export class CreateExpenseDatasetRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody?: CreateExpenseDatasetRequestBody;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=companyId",
  })
  companyId: string;
}

/**
 * OK
 */
export class CreateExpenseDataset200ApplicationJSON extends SpeakeasyBase {
  /**
   * Unique id of dataset created
   */
  @SpeakeasyMetadata()
  @Expose({ name: "datasetId" })
  datasetId?: string;
}

export class CreateExpenseDatasetResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * OK
   */
  @SpeakeasyMetadata()
  createExpenseDataset200ApplicationJSONObject?: CreateExpenseDataset200ApplicationJSON;
}
