/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { objectToClass, SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform } from "class-transformer";

/**
 * The client's defined name for the object.
 */
export class SupplementalDataConfigurationSupplementalDataSourceConfiguration extends SpeakeasyBase {
    /**
     * The underlying endpoint of the source system which the configuration is targeting.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "dataSource" })
    dataSource?: string;

    /**
     * The additional properties that are required when pulling records.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "pullData" })
    pullData?: Record<string, string>;

    /**
     * The additional properties that are required to create and/or update records.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "pushData" })
    pushData?: Record<string, string>;
}

/**
 * OK
 */
export class SupplementalDataConfiguration extends SpeakeasyBase {
    @SpeakeasyMetadata({
        elemType: SupplementalDataConfigurationSupplementalDataSourceConfiguration,
    })
    @Expose({ name: "supplementalDataConfig" })
    @Transform(
        ({ value }) => {
            const obj: Record<
                string,
                SupplementalDataConfigurationSupplementalDataSourceConfiguration
            > = {};
            for (const key in value) {
                obj[key] = objectToClass(
                    value[key],
                    SupplementalDataConfigurationSupplementalDataSourceConfiguration
                );
            }
            return obj;
        },
        { toClassOnly: true }
    )
    supplementalDataConfig?: Record<
        string,
        SupplementalDataConfigurationSupplementalDataSourceConfiguration
    >;
}
