/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class ListIntegrationsRequest extends SpeakeasyBase {
  /**
   * Field to order results by. [Read more](https://docs.codat.io/using-the-api/ordering-results).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=orderBy",
  })
  orderBy?: string;

  /**
   * Page number. [Read more](https://docs.codat.io/using-the-api/paging).
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=page" })
  page: number;

  /**
   * Number of records to return in a page. [Read more](https://docs.codat.io/using-the-api/paging).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=pageSize",
  })
  pageSize?: number;

  /**
   * Codat query string. [Read more](https://docs.codat.io/using-the-api/querying).
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=query" })
  query?: string;
}

/**
 * Your API request was not properly authorized.
 */
export class ListIntegrations401ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "canBeRetried" })
  canBeRetried?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "correlationId" })
  correlationId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "detailedErrorCode" })
  detailedErrorCode?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "service" })
  service?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "statusCode" })
  statusCode?: number;
}

/**
 * Your `query` parameter was not correctly formed
 */
export class ListIntegrations400ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "canBeRetried" })
  canBeRetried?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "correlationId" })
  correlationId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "detailedErrorCode" })
  detailedErrorCode?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "service" })
  service?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "statusCode" })
  statusCode?: number;
}

export class ListIntegrationsLinksLinksCurrent extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "href" })
  href: string;
}

export class ListIntegrationsLinksLinksNext extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "href" })
  href?: string;
}

export class ListIntegrationsLinksLinksPrevious extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "href" })
  href?: string;
}

export class ListIntegrationsLinksLinksSelf extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "href" })
  href: string;
}

export class ListIntegrationsLinksLinks extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "current" })
  @Type(() => ListIntegrationsLinksLinksCurrent)
  current: ListIntegrationsLinksLinksCurrent;

  @SpeakeasyMetadata()
  @Expose({ name: "next" })
  @Type(() => ListIntegrationsLinksLinksNext)
  next?: ListIntegrationsLinksLinksNext;

  @SpeakeasyMetadata()
  @Expose({ name: "previous" })
  @Type(() => ListIntegrationsLinksLinksPrevious)
  previous?: ListIntegrationsLinksLinksPrevious;

  @SpeakeasyMetadata()
  @Expose({ name: "self" })
  @Type(() => ListIntegrationsLinksLinksSelf)
  self: ListIntegrationsLinksLinksSelf;
}

export enum ListIntegrationsLinksIntegrationDatatypeFeatureSupportedFeaturesFeatureStateEnum {
  Release = "Release",
  Beta = "Beta",
  Deprecated = "Deprecated",
  NotSupported = "NotSupported",
  NotImplemented = "NotImplemented",
}

export enum ListIntegrationsLinksIntegrationDatatypeFeatureSupportedFeaturesFeatureTypeEnum {
  Get = "Get",
  Post = "Post",
  Categorization = "Categorization",
  Delete = "Delete",
  Put = "Put",
  GetAsPdf = "GetAsPdf",
  DownloadAttachment = "DownloadAttachment",
  GetAttachment = "GetAttachment",
  GetAttachments = "GetAttachments",
  UploadAttachment = "UploadAttachment",
}

export class ListIntegrationsLinksIntegrationDatatypeFeatureSupportedFeatures extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "featureState" })
  featureState: ListIntegrationsLinksIntegrationDatatypeFeatureSupportedFeaturesFeatureStateEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "featureType" })
  featureType: ListIntegrationsLinksIntegrationDatatypeFeatureSupportedFeaturesFeatureTypeEnum;
}

/**
 * Describes support for a given datatype and associated operations
 */
export class ListIntegrationsLinksIntegrationDatatypeFeature extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "datatype" })
  datatype: string;

  @SpeakeasyMetadata({
    elemType: ListIntegrationsLinksIntegrationDatatypeFeatureSupportedFeatures,
  })
  @Expose({ name: "supportedFeatures" })
  @Type(() => ListIntegrationsLinksIntegrationDatatypeFeatureSupportedFeatures)
  supportedFeatures: ListIntegrationsLinksIntegrationDatatypeFeatureSupportedFeatures[];
}

/**
 * The type of platform of the connection.
 */
export enum ListIntegrationsLinksIntegrationSourceTypeEnum {
  Accounting = "Accounting",
  Banking = "Banking",
  Commerce = "Commerce",
  Other = "Other",
  Unknown = "Unknown",
}

/**
 * An integration that Codat supports
 */
export class ListIntegrationsLinksIntegration extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "dataProvidedBy" })
  dataProvidedBy?: string;

  @SpeakeasyMetadata({
    elemType: ListIntegrationsLinksIntegrationDatatypeFeature,
  })
  @Expose({ name: "datatypeFeatures" })
  @Type(() => ListIntegrationsLinksIntegrationDatatypeFeature)
  datatypeFeatures?: ListIntegrationsLinksIntegrationDatatypeFeature[];

  /**
   * Whether this integration is enabled for your customers to use
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enabled" })
  enabled: boolean;

  /**
   * A Codat ID representing the integration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "integrationId" })
  integrationId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "isBeta" })
  isBeta?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "isOfflineConnector" })
  isOfflineConnector?: boolean;

  /**
   * 4 letter key for an integration. [Read more](https://docs.codat.io/integrations/accounting/accounting-platform-keys).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "key" })
  key: string;

  @SpeakeasyMetadata()
  @Expose({ name: "logoUrl" })
  logoUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * A source-specific ID used to distinguish between different sources originating from the same data connection. In general, a data connection is a single data source. However, for TrueLayer, `sourceId` is associated with a specific bank and has a many-to-one relationship with the `integrationId`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sourceId" })
  sourceId?: string;

  /**
   * The type of platform of the connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sourceType" })
  sourceType?: ListIntegrationsLinksIntegrationSourceTypeEnum;
}

/**
 * Codat's Paging Model
 */
export class ListIntegrationsLinks extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "_links" })
  @Type(() => ListIntegrationsLinksLinks)
  links: ListIntegrationsLinksLinks;

  @SpeakeasyMetadata()
  @Expose({ name: "pageNumber" })
  pageNumber: number;

  @SpeakeasyMetadata()
  @Expose({ name: "pageSize" })
  pageSize: number;

  @SpeakeasyMetadata({ elemType: ListIntegrationsLinksIntegration })
  @Expose({ name: "results" })
  @Type(() => ListIntegrationsLinksIntegration)
  results?: ListIntegrationsLinksIntegration[];

  @SpeakeasyMetadata()
  @Expose({ name: "totalResults" })
  totalResults: number;
}

export class ListIntegrationsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * OK
   */
  @SpeakeasyMetadata()
  links?: ListIntegrationsLinks;

  /**
   * Your `query` parameter was not correctly formed
   */
  @SpeakeasyMetadata()
  listIntegrations400ApplicationJSONObject?: ListIntegrations400ApplicationJSON;

  /**
   * Your API request was not properly authorized.
   */
  @SpeakeasyMetadata()
  listIntegrations401ApplicationJSONObject?: ListIntegrations401ApplicationJSON;
}
