/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Decimal as Decimal$ } from "../../types/decimal.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Address,
  Address$inboundSchema,
  Address$Outbound,
  Address$outboundSchema,
} from "./address.js";
import {
  SupplierStatus,
  SupplierStatus$inboundSchema,
  SupplierStatus$outboundSchema,
} from "./supplierstatus.js";

/**
 * Suppliers are people or organizations that provide something, such as a product or service. Use the [List suppliers](https://docs.codat.io/sync-for-payables-v2-api#/operations/list-suppliers) endpoint to retrieve a list of all suppliers for a company.
 *
 * @remarks
 *
 * Suppliers' data links to accounts payable [bills](https://docs.codat.io/sync-for-payables-v2-api#/schemas/Bill).
 */
export type Supplier = {
  /**
   * Identifier for the supplier, unique to the company in the accounting software.
   */
  id?: string | undefined;
  /**
   * Name of the supplier as recorded in the accounting system, typically the company name.
   */
  supplierName?: string | undefined;
  /**
   * Name of the main contact for the supplier.
   */
  contactName?: string | null | undefined;
  /**
   * Email address that the supplier may be contacted on.
   */
  emailAddress?: string | null | undefined;
  /**
   * Phone number that the supplier may be contacted on.
   */
  phone?: string | null | undefined;
  /**
   * An array of Addresses.
   */
  addresses?: Array<Address> | null | undefined;
  /**
   * Status of the supplier.
   */
  status?: SupplierStatus | undefined;
  /**
   * Amount outstanding against the supplier.
   */
  balance?: Decimal$ | number | null | undefined;
  /**
   * Default currency the supplier's transactional data is recorded in.
   */
  defaultCurrency?: string | null | undefined;
  sourceModifiedDate?: string | undefined;
};

/** @internal */
export const Supplier$inboundSchema: z.ZodType<
  Supplier,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  supplierName: z.string().optional(),
  contactName: z.nullable(z.string()).optional(),
  emailAddress: z.nullable(z.string()).optional(),
  phone: z.nullable(z.string()).optional(),
  addresses: z.nullable(z.array(Address$inboundSchema)).optional(),
  status: SupplierStatus$inboundSchema.optional(),
  balance: z.nullable(z.number().transform(v => new Decimal$(v))).optional(),
  defaultCurrency: z.nullable(z.string()).optional(),
  sourceModifiedDate: z.string().optional(),
});

/** @internal */
export type Supplier$Outbound = {
  id?: string | undefined;
  supplierName?: string | undefined;
  contactName?: string | null | undefined;
  emailAddress?: string | null | undefined;
  phone?: string | null | undefined;
  addresses?: Array<Address$Outbound> | null | undefined;
  status?: string | undefined;
  balance?: number | null | undefined;
  defaultCurrency?: string | null | undefined;
  sourceModifiedDate?: string | undefined;
};

/** @internal */
export const Supplier$outboundSchema: z.ZodType<
  Supplier$Outbound,
  z.ZodTypeDef,
  Supplier
> = z.object({
  id: z.string().optional(),
  supplierName: z.string().optional(),
  contactName: z.nullable(z.string()).optional(),
  emailAddress: z.nullable(z.string()).optional(),
  phone: z.nullable(z.string()).optional(),
  addresses: z.nullable(z.array(Address$outboundSchema)).optional(),
  status: SupplierStatus$outboundSchema.optional(),
  balance: z.nullable(
    z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
      typeof v === "number" ? v : v.toNumber()
    ),
  ).optional(),
  defaultCurrency: z.nullable(z.string()).optional(),
  sourceModifiedDate: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Supplier$ {
  /** @deprecated use `Supplier$inboundSchema` instead. */
  export const inboundSchema = Supplier$inboundSchema;
  /** @deprecated use `Supplier$outboundSchema` instead. */
  export const outboundSchema = Supplier$outboundSchema;
  /** @deprecated use `Supplier$Outbound` instead. */
  export type Outbound = Supplier$Outbound;
}

export function supplierToJSON(supplier: Supplier): string {
  return JSON.stringify(Supplier$outboundSchema.parse(supplier));
}

export function supplierFromJSON(
  jsonString: string,
): SafeParseResult<Supplier, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Supplier$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Supplier' from JSON`,
  );
}
