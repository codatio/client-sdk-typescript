/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Decimal as Decimal$ } from "../../types/decimal.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Status of the tax rate in the accounting software.
 *
 * @remarks
 * - `Active` - An active tax rate in use by a company.
 * - `Archived` - A tax rate that has been archived or is inactive in the accounting software.
 */
export const TaxRateStatus = {
  Active: "Active",
  Archived: "Archived",
} as const;
/**
 * Status of the tax rate in the accounting software.
 *
 * @remarks
 * - `Active` - An active tax rate in use by a company.
 * - `Archived` - A tax rate that has been archived or is inactive in the accounting software.
 */
export type TaxRateStatus = ClosedEnum<typeof TaxRateStatus>;

export type TaxRateMappingOption = {
  /**
   * Identifier for the tax rate, unique for the company in the accounting software.
   */
  id?: string | undefined;
  /**
   * Codat-augmented name of the tax rate in the accounting software.
   */
  name?: string | null | undefined;
  /**
   * Code for the tax rate from the accounting software.
   */
  code?: string | null | undefined;
  /**
   * See Effective tax rates description.
   */
  effectiveTaxRate?: Decimal$ | number | null | undefined;
  /**
   * Total (not compounded) sum of the components of a tax rate.
   */
  totalTaxRate?: Decimal$ | number | null | undefined;
  /**
   * Status of the tax rate in the accounting software.
   *
   * @remarks
   * - `Active` - An active tax rate in use by a company.
   * - `Archived` - A tax rate that has been archived or is inactive in the accounting software.
   */
  status?: TaxRateStatus | undefined;
};

/** @internal */
export const TaxRateStatus$inboundSchema: z.ZodNativeEnum<
  typeof TaxRateStatus
> = z.nativeEnum(TaxRateStatus);

/** @internal */
export const TaxRateStatus$outboundSchema: z.ZodNativeEnum<
  typeof TaxRateStatus
> = TaxRateStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaxRateStatus$ {
  /** @deprecated use `TaxRateStatus$inboundSchema` instead. */
  export const inboundSchema = TaxRateStatus$inboundSchema;
  /** @deprecated use `TaxRateStatus$outboundSchema` instead. */
  export const outboundSchema = TaxRateStatus$outboundSchema;
}

/** @internal */
export const TaxRateMappingOption$inboundSchema: z.ZodType<
  TaxRateMappingOption,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.nullable(z.string()).optional(),
  code: z.nullable(z.string()).optional(),
  effectiveTaxRate: z.nullable(z.number().transform(v => new Decimal$(v)))
    .optional(),
  totalTaxRate: z.nullable(z.number().transform(v => new Decimal$(v)))
    .optional(),
  status: TaxRateStatus$inboundSchema.optional(),
});

/** @internal */
export type TaxRateMappingOption$Outbound = {
  id?: string | undefined;
  name?: string | null | undefined;
  code?: string | null | undefined;
  effectiveTaxRate?: number | null | undefined;
  totalTaxRate?: number | null | undefined;
  status?: string | undefined;
};

/** @internal */
export const TaxRateMappingOption$outboundSchema: z.ZodType<
  TaxRateMappingOption$Outbound,
  z.ZodTypeDef,
  TaxRateMappingOption
> = z.object({
  id: z.string().optional(),
  name: z.nullable(z.string()).optional(),
  code: z.nullable(z.string()).optional(),
  effectiveTaxRate: z.nullable(
    z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
      typeof v === "number" ? v : v.toNumber()
    ),
  ).optional(),
  totalTaxRate: z.nullable(
    z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
      typeof v === "number" ? v : v.toNumber()
    ),
  ).optional(),
  status: TaxRateStatus$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaxRateMappingOption$ {
  /** @deprecated use `TaxRateMappingOption$inboundSchema` instead. */
  export const inboundSchema = TaxRateMappingOption$inboundSchema;
  /** @deprecated use `TaxRateMappingOption$outboundSchema` instead. */
  export const outboundSchema = TaxRateMappingOption$outboundSchema;
  /** @deprecated use `TaxRateMappingOption$Outbound` instead. */
  export type Outbound = TaxRateMappingOption$Outbound;
}

export function taxRateMappingOptionToJSON(
  taxRateMappingOption: TaxRateMappingOption,
): string {
  return JSON.stringify(
    TaxRateMappingOption$outboundSchema.parse(taxRateMappingOption),
  );
}

export function taxRateMappingOptionFromJSON(
  jsonString: string,
): SafeParseResult<TaxRateMappingOption, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaxRateMappingOption$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaxRateMappingOption' from JSON`,
  );
}
