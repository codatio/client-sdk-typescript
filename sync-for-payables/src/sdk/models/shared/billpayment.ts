/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { Decimal as Decimal$ } from "../../types/decimal.js";
import {
  BillPaymentAccountRef,
  BillPaymentAccountRef$inboundSchema,
  BillPaymentAccountRef$Outbound,
  BillPaymentAccountRef$outboundSchema,
} from "./billpaymentaccountref.js";

export type BillPayment = {
  /**
   * Identifier for the bill payment, unique for the company in the accounting software.
   */
  id?: string | undefined;
  /**
   * Amount of the payment in the bill currency.
   */
  amount?: Decimal$ | number | undefined;
  date?: string | undefined;
  /**
   * Additional information associated with the payment.
   */
  reference?: string | null | undefined;
  /**
   * Reference to the bank account / credit card which you are using to pay the bill.
   */
  accountRef?: BillPaymentAccountRef | undefined;
  /**
   * Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
   *
   * @remarks
   *
   * Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.
   *
   * It is not possible to perform the currency conversion with two or more non-base currencies participating in the transaction. For example, if a company's base currency is USD, and it has a bill issued in EUR, then the bill payment must happen in USD or EUR.
   *
   * Where the currency rate is provided by the underlying accounting software, it will be available from Codat with the same precision (up to a maximum of 9 decimal places).
   *
   * For accounting software which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
   *
   * ## Examples with base currency of GBP
   *
   * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
   * | :--------------- | :------------- | :------------ | :------------------------- |
   * | **USD**          | $20            | 0.781         | £15.62                     |
   * | **EUR**          | €20            | 0.885         | £17.70                     |
   * | **RUB**          | ₽20            | 0.011         | £0.22                      |
   *
   * ## Examples with base currency of USD
   *
   * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
   * | :--------------- | :------------- | :------------ | :------------------------- |
   * | **GBP**          | £20            | 1.277         | $25.54                     |
   * | **EUR**          | €20            | 1.134         | $22.68                     |
   * | **RUB**          | ₽20            | 0.015         | $0.30                      |
   *
   * ### Integration-specific details
   *
   * | Integration       | Scenario                                        | System behavior                                                                                                                                                      |
   * |-------------------|-------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|
   * | QuickBooks Online | Transaction currency differs from base currency | If currency rate value is left `null`, a rate of 1 will be used by QBO by default. To override this, specify a currencyRate in the request body.  |
   */
  currencyRate?: Decimal$ | number | null | undefined;
};

/** @internal */
export const BillPayment$inboundSchema: z.ZodType<
  BillPayment,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  amount: z.number().transform(v => new Decimal$(v)).optional(),
  date: z.string().optional(),
  reference: z.nullable(z.string()).optional(),
  accountRef: BillPaymentAccountRef$inboundSchema.optional(),
  currencyRate: z.nullable(z.number().transform(v => new Decimal$(v)))
    .optional(),
});

/** @internal */
export type BillPayment$Outbound = {
  id?: string | undefined;
  amount?: number | undefined;
  date?: string | undefined;
  reference?: string | null | undefined;
  accountRef?: BillPaymentAccountRef$Outbound | undefined;
  currencyRate?: number | null | undefined;
};

/** @internal */
export const BillPayment$outboundSchema: z.ZodType<
  BillPayment$Outbound,
  z.ZodTypeDef,
  BillPayment
> = z.object({
  id: z.string().optional(),
  amount: z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
    typeof v === "number" ? v : v.toNumber()
  ).optional(),
  date: z.string().optional(),
  reference: z.nullable(z.string()).optional(),
  accountRef: BillPaymentAccountRef$outboundSchema.optional(),
  currencyRate: z.nullable(
    z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
      typeof v === "number" ? v : v.toNumber()
    ),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BillPayment$ {
  /** @deprecated use `BillPayment$inboundSchema` instead. */
  export const inboundSchema = BillPayment$inboundSchema;
  /** @deprecated use `BillPayment$outboundSchema` instead. */
  export const outboundSchema = BillPayment$outboundSchema;
  /** @deprecated use `BillPayment$Outbound` instead. */
  export type Outbound = BillPayment$Outbound;
}
