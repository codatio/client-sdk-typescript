/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  BankAccountType,
  BankAccountType$inboundSchema,
  BankAccountType$outboundSchema,
} from "./bankaccounttype.js";

export type BankAccountPrototype = {
  /**
   * Code used to identify each nominal account for a business.
   */
  nominalCode?: string | null | undefined;
  /**
   * Name of the bank account in the accounting software.
   */
  name: string | null;
  /**
   * The type of transactions and balances on the account.
   *
   * @remarks
   * For Credit accounts, positive balances are liabilities, and positive transactions **reduce** liabilities.
   * For Debit accounts, positive balances are assets, and positive transactions **increase** assets.
   */
  accountType: BankAccountType;
  /**
   * Account number for the bank account.
   *
   * @remarks
   *
   * Xero integrations
   * Only a UK account number shows for bank accounts with GBP currency and a combined total of sort code and account number that equals 14 digits, For non-GBP accounts, the full bank account number is populated.
   */
  accountNumber: string | null;
  /**
   * Sort code for the bank account. This is relevant to UK bank accounts.
   *
   * @remarks
   *
   * Xero integrations
   * The sort code is only displayed when the currency = GBP and the sort code and account number sum to 14 digits. For non-GBP accounts, this field is not populated.
   */
  sortCode?: string | null | undefined;
  /**
   * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
   *
   * @remarks
   *
   * ## Unknown currencies
   *
   * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction.
   *
   * There are only a very small number of edge cases where this currency code is returned by the Codat system.
   */
  currency: string;
};

/** @internal */
export const BankAccountPrototype$inboundSchema: z.ZodType<
  BankAccountPrototype,
  z.ZodTypeDef,
  unknown
> = z.object({
  nominalCode: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()),
  accountType: BankAccountType$inboundSchema,
  accountNumber: z.nullable(z.string()),
  sortCode: z.nullable(z.string()).optional(),
  currency: z.string(),
});

/** @internal */
export type BankAccountPrototype$Outbound = {
  nominalCode?: string | null | undefined;
  name: string | null;
  accountType: string;
  accountNumber: string | null;
  sortCode?: string | null | undefined;
  currency: string;
};

/** @internal */
export const BankAccountPrototype$outboundSchema: z.ZodType<
  BankAccountPrototype$Outbound,
  z.ZodTypeDef,
  BankAccountPrototype
> = z.object({
  nominalCode: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()),
  accountType: BankAccountType$outboundSchema,
  accountNumber: z.nullable(z.string()),
  sortCode: z.nullable(z.string()).optional(),
  currency: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BankAccountPrototype$ {
  /** @deprecated use `BankAccountPrototype$inboundSchema` instead. */
  export const inboundSchema = BankAccountPrototype$inboundSchema;
  /** @deprecated use `BankAccountPrototype$outboundSchema` instead. */
  export const outboundSchema = BankAccountPrototype$outboundSchema;
  /** @deprecated use `BankAccountPrototype$Outbound` instead. */
  export type Outbound = BankAccountPrototype$Outbound;
}
