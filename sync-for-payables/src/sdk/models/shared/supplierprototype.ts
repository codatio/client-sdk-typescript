/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { Decimal as Decimal$ } from "../../types/decimal.js";
import {
  Address,
  Address$inboundSchema,
  Address$Outbound,
  Address$outboundSchema,
} from "./address.js";
import {
  SupplierStatus,
  SupplierStatus$inboundSchema,
  SupplierStatus$outboundSchema,
} from "./supplierstatus.js";

export type SupplierPrototype = {
  /**
   * Name of the supplier as recorded in the accounting system, typically the company name.
   */
  supplierName: string;
  /**
   * Name of the main contact for the supplier.
   */
  contactName?: string | null | undefined;
  /**
   * Email address that the supplier may be contacted on.
   */
  emailAddress?: string | null | undefined;
  /**
   * Phone number that the supplier may be contacted on.
   */
  phone?: string | null | undefined;
  /**
   * An array of Addresses.
   */
  addresses?: Array<Address> | null | undefined;
  /**
   * Status of the supplier.
   */
  status: SupplierStatus;
  /**
   * Amount outstanding against the supplier.
   */
  balance?: Decimal$ | number | null | undefined;
  /**
   * Default currency the supplier's transactional data is recorded in.
   */
  defaultCurrency?: string | null | undefined;
};

/** @internal */
export const SupplierPrototype$inboundSchema: z.ZodType<
  SupplierPrototype,
  z.ZodTypeDef,
  unknown
> = z.object({
  supplierName: z.string(),
  contactName: z.nullable(z.string()).optional(),
  emailAddress: z.nullable(z.string()).optional(),
  phone: z.nullable(z.string()).optional(),
  addresses: z.nullable(z.array(Address$inboundSchema)).optional(),
  status: SupplierStatus$inboundSchema,
  balance: z.nullable(z.number().transform(v => new Decimal$(v))).optional(),
  defaultCurrency: z.nullable(z.string()).optional(),
});

/** @internal */
export type SupplierPrototype$Outbound = {
  supplierName: string;
  contactName?: string | null | undefined;
  emailAddress?: string | null | undefined;
  phone?: string | null | undefined;
  addresses?: Array<Address$Outbound> | null | undefined;
  status: string;
  balance?: number | null | undefined;
  defaultCurrency?: string | null | undefined;
};

/** @internal */
export const SupplierPrototype$outboundSchema: z.ZodType<
  SupplierPrototype$Outbound,
  z.ZodTypeDef,
  SupplierPrototype
> = z.object({
  supplierName: z.string(),
  contactName: z.nullable(z.string()).optional(),
  emailAddress: z.nullable(z.string()).optional(),
  phone: z.nullable(z.string()).optional(),
  addresses: z.nullable(z.array(Address$outboundSchema)).optional(),
  status: SupplierStatus$outboundSchema,
  balance: z.nullable(
    z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
      typeof v === "number" ? v : v.toNumber()
    ),
  ).optional(),
  defaultCurrency: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SupplierPrototype$ {
  /** @deprecated use `SupplierPrototype$inboundSchema` instead. */
  export const inboundSchema = SupplierPrototype$inboundSchema;
  /** @deprecated use `SupplierPrototype$outboundSchema` instead. */
  export const outboundSchema = SupplierPrototype$outboundSchema;
  /** @deprecated use `SupplierPrototype$Outbound` instead. */
  export type Outbound = SupplierPrototype$Outbound;
}
