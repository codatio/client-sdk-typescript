/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  BankAccountStatus,
  BankAccountStatus$inboundSchema,
  BankAccountStatus$outboundSchema,
} from "./bankaccountstatus.js";
import {
  BankAccountType,
  BankAccountType$inboundSchema,
  BankAccountType$outboundSchema,
} from "./bankaccounttype.js";

export type BankAccount = {
  /**
   * Identifier for the bank account, unique for the company in the accounting software.
   */
  id?: string | undefined;
  /**
   * Code used to identify each nominal account for a business.
   */
  nominalCode?: string | null | undefined;
  /**
   * Name of the bank account in the accounting software.
   */
  name?: string | null | undefined;
  /**
   * The type of transactions and balances on the account.
   *
   * @remarks
   * For Credit accounts, positive balances are liabilities, and positive transactions **reduce** liabilities.
   * For Debit accounts, positive balances are assets, and positive transactions **increase** assets.
   */
  accountType?: BankAccountType | undefined;
  /**
   * Account number for the bank account.
   *
   * @remarks
   *
   * Xero integrations
   * Only a UK account number shows for bank accounts with GBP currency and a combined total of sort code and account number that equals 14 digits, For non-GBP accounts, the full bank account number is populated.
   */
  accountNumber?: string | null | undefined;
  /**
   * Sort code for the bank account. This is relevant to UK bank accounts.
   *
   * @remarks
   *
   * Xero integrations
   * The sort code is only displayed when the currency = GBP and the sort code and account number sum to 14 digits. For non-GBP accounts, this field is not populated.
   */
  sortCode?: string | null | undefined;
  /**
   * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
   *
   * @remarks
   *
   * ## Unknown currencies
   *
   * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction.
   *
   * There are only a very small number of edge cases where this currency code is returned by the Codat system.
   */
  currency?: string | undefined;
  /**
   * The current status of the bank account.
   */
  status?: BankAccountStatus | undefined;
  sourceModifiedDate?: string | undefined;
};

/** @internal */
export const BankAccount$inboundSchema: z.ZodType<
  BankAccount,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  nominalCode: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  accountType: BankAccountType$inboundSchema.optional(),
  accountNumber: z.nullable(z.string()).optional(),
  sortCode: z.nullable(z.string()).optional(),
  currency: z.string().optional(),
  status: BankAccountStatus$inboundSchema.optional(),
  sourceModifiedDate: z.string().optional(),
});

/** @internal */
export type BankAccount$Outbound = {
  id?: string | undefined;
  nominalCode?: string | null | undefined;
  name?: string | null | undefined;
  accountType?: string | undefined;
  accountNumber?: string | null | undefined;
  sortCode?: string | null | undefined;
  currency?: string | undefined;
  status?: string | undefined;
  sourceModifiedDate?: string | undefined;
};

/** @internal */
export const BankAccount$outboundSchema: z.ZodType<
  BankAccount$Outbound,
  z.ZodTypeDef,
  BankAccount
> = z.object({
  id: z.string().optional(),
  nominalCode: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  accountType: BankAccountType$outboundSchema.optional(),
  accountNumber: z.nullable(z.string()).optional(),
  sortCode: z.nullable(z.string()).optional(),
  currency: z.string().optional(),
  status: BankAccountStatus$outboundSchema.optional(),
  sourceModifiedDate: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BankAccount$ {
  /** @deprecated use `BankAccount$inboundSchema` instead. */
  export const inboundSchema = BankAccount$inboundSchema;
  /** @deprecated use `BankAccount$outboundSchema` instead. */
  export const outboundSchema = BankAccount$outboundSchema;
  /** @deprecated use `BankAccount$Outbound` instead. */
  export type Outbound = BankAccount$Outbound;
}

export function bankAccountToJSON(bankAccount: BankAccount): string {
  return JSON.stringify(BankAccount$outboundSchema.parse(bankAccount));
}

export function bankAccountFromJSON(
  jsonString: string,
): SafeParseResult<BankAccount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BankAccount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BankAccount' from JSON`,
  );
}
