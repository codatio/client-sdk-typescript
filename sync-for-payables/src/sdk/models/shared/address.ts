/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AddressType,
  AddressType$inboundSchema,
  AddressType$outboundSchema,
} from "./addresstype.js";

export type Address = {
  /**
   * The type of the address
   */
  type?: AddressType | undefined;
  /**
   * Line 1 of the customer address.
   */
  line1?: string | null | undefined;
  /**
   * Line 2 of the customer address.
   */
  line2?: string | null | undefined;
  /**
   * City of the customer address.
   */
  city?: string | null | undefined;
  /**
   * Region of the customer address.
   */
  region?: string | null | undefined;
  /**
   * Country of the customer's address. For NetSuite, use the 2-digit [ISO 3166](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes) country code.
   */
  country?: string | null | undefined;
  /**
   * Postal code or zip code.
   */
  postalCode?: string | null | undefined;
};

/** @internal */
export const Address$inboundSchema: z.ZodType<Address, z.ZodTypeDef, unknown> =
  z.object({
    type: AddressType$inboundSchema.optional(),
    line1: z.nullable(z.string()).optional(),
    line2: z.nullable(z.string()).optional(),
    city: z.nullable(z.string()).optional(),
    region: z.nullable(z.string()).optional(),
    country: z.nullable(z.string()).optional(),
    postalCode: z.nullable(z.string()).optional(),
  });

/** @internal */
export type Address$Outbound = {
  type?: string | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  city?: string | null | undefined;
  region?: string | null | undefined;
  country?: string | null | undefined;
  postalCode?: string | null | undefined;
};

/** @internal */
export const Address$outboundSchema: z.ZodType<
  Address$Outbound,
  z.ZodTypeDef,
  Address
> = z.object({
  type: AddressType$outboundSchema.optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  region: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Address$ {
  /** @deprecated use `Address$inboundSchema` instead. */
  export const inboundSchema = Address$inboundSchema;
  /** @deprecated use `Address$outboundSchema` instead. */
  export const outboundSchema = Address$outboundSchema;
  /** @deprecated use `Address$Outbound` instead. */
  export type Outbound = Address$Outbound;
}

export function addressToJSON(address: Address): string {
  return JSON.stringify(Address$outboundSchema.parse(address));
}

export function addressFromJSON(
  jsonString: string,
): SafeParseResult<Address, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Address$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Address' from JSON`,
  );
}
