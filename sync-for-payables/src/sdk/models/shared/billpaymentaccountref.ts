/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Reference to the bank account / credit card which you are using to pay the bill.
 */
export type BillPaymentAccountRef = {
  /**
   * Unique ID of the bank account / credit card
   */
  id: string;
};

/** @internal */
export const BillPaymentAccountRef$inboundSchema: z.ZodType<
  BillPaymentAccountRef,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type BillPaymentAccountRef$Outbound = {
  id: string;
};

/** @internal */
export const BillPaymentAccountRef$outboundSchema: z.ZodType<
  BillPaymentAccountRef$Outbound,
  z.ZodTypeDef,
  BillPaymentAccountRef
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BillPaymentAccountRef$ {
  /** @deprecated use `BillPaymentAccountRef$inboundSchema` instead. */
  export const inboundSchema = BillPaymentAccountRef$inboundSchema;
  /** @deprecated use `BillPaymentAccountRef$outboundSchema` instead. */
  export const outboundSchema = BillPaymentAccountRef$outboundSchema;
  /** @deprecated use `BillPaymentAccountRef$Outbound` instead. */
  export type Outbound = BillPaymentAccountRef$Outbound;
}

export function billPaymentAccountRefToJSON(
  billPaymentAccountRef: BillPaymentAccountRef,
): string {
  return JSON.stringify(
    BillPaymentAccountRef$outboundSchema.parse(billPaymentAccountRef),
  );
}

export function billPaymentAccountRefFromJSON(
  jsonString: string,
): SafeParseResult<BillPaymentAccountRef, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BillPaymentAccountRef$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BillPaymentAccountRef' from JSON`,
  );
}
