/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Decimal as Decimal$ } from "../../types/decimal.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  BillLineItem,
  BillLineItem$inboundSchema,
  BillLineItem$Outbound,
  BillLineItem$outboundSchema,
} from "./billlineitem.js";
import {
  BillStatus,
  BillStatus$inboundSchema,
  BillStatus$outboundSchema,
} from "./billstatus.js";
import {
  SupplierRef,
  SupplierRef$inboundSchema,
  SupplierRef$Outbound,
  SupplierRef$outboundSchema,
} from "./supplierref.js";

/**
 * Bills are invoices that represent the SMB's financial obligations to their supplier for a purchase of goods or services.
 */
export type Bill = {
  /**
   * Identifier for the bill, unique for the company in the accounting software.
   */
  id?: string | undefined;
  /**
   * User-friendly reference for the bill.
   */
  reference?: string | null | undefined;
  /**
   * Reference to the supplier the record relates to.
   */
  supplierRef: SupplierRef;
  issueDate: string;
  dueDate: string;
  /**
   * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
   *
   * @remarks
   *
   * ## Unknown currencies
   *
   * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction.
   *
   * There are only a very small number of edge cases where this currency code is returned by the Codat system.
   */
  currency: string;
  /**
   * Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
   *
   * @remarks
   *
   * Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.
   *
   * It is not possible to perform the currency conversion with two or more non-base currencies participating in the transaction. For example, if a company's base currency is USD, and it has a bill issued in EUR, then the bill payment must happen in USD or EUR.
   *
   * Where the currency rate is provided by the underlying accounting software, it will be available from Codat with the same precision (up to a maximum of 9 decimal places).
   *
   * For accounting software which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
   *
   * ## Examples with base currency of GBP
   *
   * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
   * | :--------------- | :------------- | :------------ | :------------------------- |
   * | **USD**          | $20            | 0.781         | £15.62                     |
   * | **EUR**          | €20            | 0.885         | £17.70                     |
   * | **RUB**          | ₽20            | 0.011         | £0.22                      |
   *
   * ## Examples with base currency of USD
   *
   * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
   * | :--------------- | :------------- | :------------ | :------------------------- |
   * | **GBP**          | £20            | 1.277         | $25.54                     |
   * | **EUR**          | €20            | 1.134         | $22.68                     |
   * | **RUB**          | ₽20            | 0.015         | $0.30                      |
   *
   * ### Integration-specific details
   *
   * | Integration       | Scenario                                        | System behavior                                                                                                                                                      |
   * |-------------------|-------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|
   * | QuickBooks Online | Transaction currency differs from base currency | If currency rate value is left `null`, a rate of 1 will be used by QBO by default. To override this, specify a currencyRate in the request body.  |
   */
  currencyRate?: Decimal$ | number | null | undefined;
  /**
   * Array of Bill line items.
   */
  lineItems?: Array<BillLineItem> | null | undefined;
  /**
   * Current state of the bill. If creating a bill the status must be `Open`.
   */
  status: BillStatus;
  /**
   * Amount of the bill, including tax.
   */
  totalAmount?: Decimal$ | number | undefined;
  /**
   * Amount outstanding on the bill.
   */
  amountDue?: Decimal$ | number | null | undefined;
  sourceModifiedDate?: string | undefined;
};

/** @internal */
export const Bill$inboundSchema: z.ZodType<Bill, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string().optional(),
    reference: z.nullable(z.string()).optional(),
    supplierRef: SupplierRef$inboundSchema,
    issueDate: z.string(),
    dueDate: z.string(),
    currency: z.string(),
    currencyRate: z.nullable(z.number().transform(v => new Decimal$(v)))
      .optional(),
    lineItems: z.nullable(z.array(BillLineItem$inboundSchema)).optional(),
    status: BillStatus$inboundSchema,
    totalAmount: z.number().transform(v => new Decimal$(v)).optional(),
    amountDue: z.nullable(z.number().transform(v => new Decimal$(v)))
      .optional(),
    sourceModifiedDate: z.string().optional(),
  });

/** @internal */
export type Bill$Outbound = {
  id?: string | undefined;
  reference?: string | null | undefined;
  supplierRef: SupplierRef$Outbound;
  issueDate: string;
  dueDate: string;
  currency: string;
  currencyRate?: number | null | undefined;
  lineItems?: Array<BillLineItem$Outbound> | null | undefined;
  status: string;
  totalAmount?: number | undefined;
  amountDue?: number | null | undefined;
  sourceModifiedDate?: string | undefined;
};

/** @internal */
export const Bill$outboundSchema: z.ZodType<Bill$Outbound, z.ZodTypeDef, Bill> =
  z.object({
    id: z.string().optional(),
    reference: z.nullable(z.string()).optional(),
    supplierRef: SupplierRef$outboundSchema,
    issueDate: z.string(),
    dueDate: z.string(),
    currency: z.string(),
    currencyRate: z.nullable(
      z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
        typeof v === "number" ? v : v.toNumber()
      ),
    ).optional(),
    lineItems: z.nullable(z.array(BillLineItem$outboundSchema)).optional(),
    status: BillStatus$outboundSchema,
    totalAmount: z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
      typeof v === "number" ? v : v.toNumber()
    ).optional(),
    amountDue: z.nullable(
      z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
        typeof v === "number" ? v : v.toNumber()
      ),
    ).optional(),
    sourceModifiedDate: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Bill$ {
  /** @deprecated use `Bill$inboundSchema` instead. */
  export const inboundSchema = Bill$inboundSchema;
  /** @deprecated use `Bill$outboundSchema` instead. */
  export const outboundSchema = Bill$outboundSchema;
  /** @deprecated use `Bill$Outbound` instead. */
  export type Outbound = Bill$Outbound;
}

export function billToJSON(bill: Bill): string {
  return JSON.stringify(Bill$outboundSchema.parse(bill));
}

export function billFromJSON(
  jsonString: string,
): SafeParseResult<Bill, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Bill$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Bill' from JSON`,
  );
}
