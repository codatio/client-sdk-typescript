/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export type CodatFile = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

/** @internal */
export const CodatFile$inboundSchema: z.ZodType<
  CodatFile,
  z.ZodTypeDef,
  unknown
> = z.object({
  fileName: z.string(),
  content: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
});

/** @internal */
export type CodatFile$Outbound = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

/** @internal */
export const CodatFile$outboundSchema: z.ZodType<
  CodatFile$Outbound,
  z.ZodTypeDef,
  CodatFile
> = z.object({
  fileName: z.string(),
  content: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CodatFile$ {
  /** @deprecated use `CodatFile$inboundSchema` instead. */
  export const inboundSchema = CodatFile$inboundSchema;
  /** @deprecated use `CodatFile$outboundSchema` instead. */
  export const outboundSchema = CodatFile$outboundSchema;
  /** @deprecated use `CodatFile$Outbound` instead. */
  export type Outbound = CodatFile$Outbound;
}
