/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";

export type UnlinkConnectionUpdateConnection = {
  /**
   * The current authorization status of the data connection.
   */
  status?: shared.DataConnectionStatus | undefined;
};

export type UnlinkConnectionRequest = {
  /**
   * Unique identifier for a company.
   */
  companyId: string;
  /**
   * Unique identifier for a connection.
   */
  connectionId: string;
  requestBody?: UnlinkConnectionUpdateConnection | undefined;
};

/** @internal */
export const UnlinkConnectionUpdateConnection$inboundSchema: z.ZodType<
  UnlinkConnectionUpdateConnection,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: shared.DataConnectionStatus$inboundSchema.optional(),
});

/** @internal */
export type UnlinkConnectionUpdateConnection$Outbound = {
  status?: string | undefined;
};

/** @internal */
export const UnlinkConnectionUpdateConnection$outboundSchema: z.ZodType<
  UnlinkConnectionUpdateConnection$Outbound,
  z.ZodTypeDef,
  UnlinkConnectionUpdateConnection
> = z.object({
  status: shared.DataConnectionStatus$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnlinkConnectionUpdateConnection$ {
  /** @deprecated use `UnlinkConnectionUpdateConnection$inboundSchema` instead. */
  export const inboundSchema = UnlinkConnectionUpdateConnection$inboundSchema;
  /** @deprecated use `UnlinkConnectionUpdateConnection$outboundSchema` instead. */
  export const outboundSchema = UnlinkConnectionUpdateConnection$outboundSchema;
  /** @deprecated use `UnlinkConnectionUpdateConnection$Outbound` instead. */
  export type Outbound = UnlinkConnectionUpdateConnection$Outbound;
}

/** @internal */
export const UnlinkConnectionRequest$inboundSchema: z.ZodType<
  UnlinkConnectionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  companyId: z.string(),
  connectionId: z.string(),
  RequestBody: z.lazy(() => UnlinkConnectionUpdateConnection$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UnlinkConnectionRequest$Outbound = {
  companyId: string;
  connectionId: string;
  RequestBody?: UnlinkConnectionUpdateConnection$Outbound | undefined;
};

/** @internal */
export const UnlinkConnectionRequest$outboundSchema: z.ZodType<
  UnlinkConnectionRequest$Outbound,
  z.ZodTypeDef,
  UnlinkConnectionRequest
> = z.object({
  companyId: z.string(),
  connectionId: z.string(),
  requestBody: z.lazy(() => UnlinkConnectionUpdateConnection$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnlinkConnectionRequest$ {
  /** @deprecated use `UnlinkConnectionRequest$inboundSchema` instead. */
  export const inboundSchema = UnlinkConnectionRequest$inboundSchema;
  /** @deprecated use `UnlinkConnectionRequest$outboundSchema` instead. */
  export const outboundSchema = UnlinkConnectionRequest$outboundSchema;
  /** @deprecated use `UnlinkConnectionRequest$Outbound` instead. */
  export type Outbound = UnlinkConnectionRequest$Outbound;
}
