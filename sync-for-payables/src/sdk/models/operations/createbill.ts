/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type CreateBillRequest = {
  /**
   * Unique identifier for a company.
   */
  companyId: string;
  /**
   * Unique identifier for a connection.
   */
  connectionId: string;
  /**
   * A unique identifier to ensure idempotent behaviour for subsequent requests.
   */
  idempotencyKey?: string | undefined;
  billPrototype?: shared.BillPrototype | undefined;
};

/** @internal */
export const CreateBillRequest$inboundSchema: z.ZodType<
  CreateBillRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  companyId: z.string(),
  connectionId: z.string(),
  "Idempotency-Key": z.string().optional(),
  billPrototype: shared.BillPrototype$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "Idempotency-Key": "idempotencyKey",
  });
});

/** @internal */
export type CreateBillRequest$Outbound = {
  companyId: string;
  connectionId: string;
  "Idempotency-Key"?: string | undefined;
  billPrototype?: shared.BillPrototype$Outbound | undefined;
};

/** @internal */
export const CreateBillRequest$outboundSchema: z.ZodType<
  CreateBillRequest$Outbound,
  z.ZodTypeDef,
  CreateBillRequest
> = z.object({
  companyId: z.string(),
  connectionId: z.string(),
  idempotencyKey: z.string().optional(),
  billPrototype: shared.BillPrototype$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "Idempotency-Key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateBillRequest$ {
  /** @deprecated use `CreateBillRequest$inboundSchema` instead. */
  export const inboundSchema = CreateBillRequest$inboundSchema;
  /** @deprecated use `CreateBillRequest$outboundSchema` instead. */
  export const outboundSchema = CreateBillRequest$outboundSchema;
  /** @deprecated use `CreateBillRequest$Outbound` instead. */
  export type Outbound = CreateBillRequest$Outbound;
}

export function createBillRequestToJSON(
  createBillRequest: CreateBillRequest,
): string {
  return JSON.stringify(
    CreateBillRequest$outboundSchema.parse(createBillRequest),
  );
}

export function createBillRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateBillRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateBillRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateBillRequest' from JSON`,
  );
}
