/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetMappingOptionsPaymentsRequest = {
  /**
   * Unique identifier for a company.
   */
  companyId: string;
  /**
   * Unique identifier for a connection.
   */
  connectionId: string;
  /**
   * Retrieve the next page of results using the continuation token from the previous response.
   */
  continuationToken?: string | undefined;
  /**
   * Codat query string allows you to filter by `status` (`status=Active||status=Archived`). [Learn more](https://docs.codat.io/using-the-api/querying) about Codat's query string.
   */
  statusQuery?: string | undefined;
};

/** @internal */
export const GetMappingOptionsPaymentsRequest$inboundSchema: z.ZodType<
  GetMappingOptionsPaymentsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  companyId: z.string(),
  connectionId: z.string(),
  continuationToken: z.string().optional(),
  statusQuery: z.string().optional(),
});

/** @internal */
export type GetMappingOptionsPaymentsRequest$Outbound = {
  companyId: string;
  connectionId: string;
  continuationToken?: string | undefined;
  statusQuery?: string | undefined;
};

/** @internal */
export const GetMappingOptionsPaymentsRequest$outboundSchema: z.ZodType<
  GetMappingOptionsPaymentsRequest$Outbound,
  z.ZodTypeDef,
  GetMappingOptionsPaymentsRequest
> = z.object({
  companyId: z.string(),
  connectionId: z.string(),
  continuationToken: z.string().optional(),
  statusQuery: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMappingOptionsPaymentsRequest$ {
  /** @deprecated use `GetMappingOptionsPaymentsRequest$inboundSchema` instead. */
  export const inboundSchema = GetMappingOptionsPaymentsRequest$inboundSchema;
  /** @deprecated use `GetMappingOptionsPaymentsRequest$outboundSchema` instead. */
  export const outboundSchema = GetMappingOptionsPaymentsRequest$outboundSchema;
  /** @deprecated use `GetMappingOptionsPaymentsRequest$Outbound` instead. */
  export type Outbound = GetMappingOptionsPaymentsRequest$Outbound;
}

export function getMappingOptionsPaymentsRequestToJSON(
  getMappingOptionsPaymentsRequest: GetMappingOptionsPaymentsRequest,
): string {
  return JSON.stringify(
    GetMappingOptionsPaymentsRequest$outboundSchema.parse(
      getMappingOptionsPaymentsRequest,
    ),
  );
}

export function getMappingOptionsPaymentsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetMappingOptionsPaymentsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetMappingOptionsPaymentsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetMappingOptionsPaymentsRequest' from JSON`,
  );
}
