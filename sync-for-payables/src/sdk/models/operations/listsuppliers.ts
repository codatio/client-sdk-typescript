/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListSuppliersRequest = {
  /**
   * Unique identifier for a company.
   */
  companyId: string;
  /**
   * Unique identifier for a connection.
   */
  connectionId: string;
  /**
   * Retrieve the next page of results using the continuation token from the previous response.
   */
  continuationToken?: string | undefined;
  /**
   * Codat query string allows you to filter by `sourceModifiedDate` or if a supplier is `Active` or `Archived` in the accounting software. Learn more about Codat's query string [here](https://docs.codat.io/using-the-api/querying).
   */
  query?: string | undefined;
};

/** @internal */
export const ListSuppliersRequest$inboundSchema: z.ZodType<
  ListSuppliersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  companyId: z.string(),
  connectionId: z.string(),
  continuationToken: z.string().optional(),
  query: z.string().optional(),
});

/** @internal */
export type ListSuppliersRequest$Outbound = {
  companyId: string;
  connectionId: string;
  continuationToken?: string | undefined;
  query?: string | undefined;
};

/** @internal */
export const ListSuppliersRequest$outboundSchema: z.ZodType<
  ListSuppliersRequest$Outbound,
  z.ZodTypeDef,
  ListSuppliersRequest
> = z.object({
  companyId: z.string(),
  connectionId: z.string(),
  continuationToken: z.string().optional(),
  query: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSuppliersRequest$ {
  /** @deprecated use `ListSuppliersRequest$inboundSchema` instead. */
  export const inboundSchema = ListSuppliersRequest$inboundSchema;
  /** @deprecated use `ListSuppliersRequest$outboundSchema` instead. */
  export const outboundSchema = ListSuppliersRequest$outboundSchema;
  /** @deprecated use `ListSuppliersRequest$Outbound` instead. */
  export type Outbound = ListSuppliersRequest$Outbound;
}

export function listSuppliersRequestToJSON(
  listSuppliersRequest: ListSuppliersRequest,
): string {
  return JSON.stringify(
    ListSuppliersRequest$outboundSchema.parse(listSuppliersRequest),
  );
}

export function listSuppliersRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListSuppliersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSuppliersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSuppliersRequest' from JSON`,
  );
}
