/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The type of report you want to generate and download.
 */
export enum MakeRequestToDownloadExcelReportReportTypeEnum {
  Audit = "audit",
}

export class MakeRequestToDownloadExcelReportRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=companyId",
  })
  companyId: string;

  /**
   * The type of report you want to generate and download.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=reportType",
  })
  reportType: MakeRequestToDownloadExcelReportReportTypeEnum;
}

/**
 * OK
 */
export class MakeRequestToDownloadExcelReport200ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "errorMessage" })
  errorMessage?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "fileSize" })
  fileSize?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "inProgress" })
  inProgress?: boolean;

  /**
   * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
   *
   * @remarks
   *
   * ```
   * 2020-10-08T22:40:50Z
   * 2021-01-01T00:00:00
   * ```
   *
   *
   *
   * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
   *
   * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
   * - Unqualified local time: `2021-11-15T01:00:00`
   * - UTC time offsets: `2021-11-15T01:00:00-05:00`
   *
   * > ðŸ“˜ Time zones
   * >
   * > Not all dates from Codat will contain information about time zones.
   * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lastGenerated" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastGenerated?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "lastInvocationId" })
  lastInvocationId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "queued" })
  queued?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "reportType" })
  reportType?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "success" })
  success?: boolean;
}

export class MakeRequestToDownloadExcelReportResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * OK
   */
  @SpeakeasyMetadata()
  makeRequestToDownloadExcelReport200ApplicationJSONObject?: MakeRequestToDownloadExcelReport200ApplicationJSON;
}
