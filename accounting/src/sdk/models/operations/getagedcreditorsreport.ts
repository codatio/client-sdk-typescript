/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

export class GetAgedCreditorsReportRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=companyId",
  })
  companyId: string;

  /**
   * Number of periods to include in the report.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=numberOfPeriods",
  })
  numberOfPeriods?: number;

  /**
   * The length of period in days.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=periodLengthDays",
  })
  periodLengthDays?: number;

  /**
   * Date the report is generated up to.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=reportDate;dateTimeFormat=YYYY-MM-DD",
  })
  reportDate?: Date;
}

export class GetAgedCreditorsReportAgedCreditorsReportAgedCreditorAgedCurrencyOutstandingAgedOutstandingAmountAmountsOutstandingByDataType extends SpeakeasyBase {
  /**
   * The amount outstanding.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount?: number;

  /**
   * Name of data type with outstanding amount for given period.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

export class GetAgedCreditorsReportAgedCreditorsReportAgedCreditorAgedCurrencyOutstandingAgedOutstandingAmount extends SpeakeasyBase {
  /**
   * The amount outstanding.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount?: number;

  /**
   * Array of details.
   */
  @SpeakeasyMetadata({
    elemType:
      GetAgedCreditorsReportAgedCreditorsReportAgedCreditorAgedCurrencyOutstandingAgedOutstandingAmountAmountsOutstandingByDataType,
  })
  @Expose({ name: "details" })
  @Type(
    () =>
      GetAgedCreditorsReportAgedCreditorsReportAgedCreditorAgedCurrencyOutstandingAgedOutstandingAmountAmountsOutstandingByDataType
  )
  details?: GetAgedCreditorsReportAgedCreditorsReportAgedCreditorAgedCurrencyOutstandingAgedOutstandingAmountAmountsOutstandingByDataType[];

  /**
   * Start date of period.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fromDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  fromDate?: Date;

  /**
   * End date of period.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "toDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  toDate?: Date;
}

export class GetAgedCreditorsReportAgedCreditorsReportAgedCreditorAgedCurrencyOutstanding extends SpeakeasyBase {
  /**
   * Array of outstanding amounts by period.
   */
  @SpeakeasyMetadata({
    elemType:
      GetAgedCreditorsReportAgedCreditorsReportAgedCreditorAgedCurrencyOutstandingAgedOutstandingAmount,
  })
  @Expose({ name: "agedOutstandingAmounts" })
  @Type(
    () =>
      GetAgedCreditorsReportAgedCreditorsReportAgedCreditorAgedCurrencyOutstandingAgedOutstandingAmount
  )
  agedOutstandingAmounts?: GetAgedCreditorsReportAgedCreditorsReportAgedCreditorAgedCurrencyOutstandingAgedOutstandingAmount[];

  /**
   * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code. e.g. _GBP_.
   *
   * @remarks
   *
   * ## Unknown currencies
   *
   * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction.
   *
   * There are only a very small number of edge cases where this currency code is returned by the Codat system.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency" })
  currency?: string;
}

export class GetAgedCreditorsReportAgedCreditorsReportAgedCreditor extends SpeakeasyBase {
  /**
   * Array of aged creditors by currency.
   */
  @SpeakeasyMetadata({
    elemType:
      GetAgedCreditorsReportAgedCreditorsReportAgedCreditorAgedCurrencyOutstanding,
  })
  @Expose({ name: "agedCurrencyOutstanding" })
  @Type(
    () =>
      GetAgedCreditorsReportAgedCreditorsReportAgedCreditorAgedCurrencyOutstanding
  )
  agedCurrencyOutstanding?: GetAgedCreditorsReportAgedCreditorsReportAgedCreditorAgedCurrencyOutstanding[];

  /**
   * Supplier ID of the aged creditor.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "supplierId" })
  supplierId?: string;

  /**
   * Supplier name of the aged creditor.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "supplierName" })
  supplierName?: string;
}

/**
 * OK
 */
export class GetAgedCreditorsReportAgedCreditorsReport extends SpeakeasyBase {
  /**
   * Array of aged debtors.
   */
  @SpeakeasyMetadata({
    elemType: GetAgedCreditorsReportAgedCreditorsReportAgedCreditor,
  })
  @Expose({ name: "data" })
  @Type(() => GetAgedCreditorsReportAgedCreditorsReportAgedCreditor)
  data?: GetAgedCreditorsReportAgedCreditorsReportAgedCreditor[];

  /**
   * Date and time the report was generated.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "generated" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  generated?: Date;

  /**
   * Date the report is generated up to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reportDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  reportDate?: Date;
}

export class GetAgedCreditorsReportResponse extends SpeakeasyBase {
  /**
   * OK
   */
  @SpeakeasyMetadata()
  agedCreditorsReport?: GetAgedCreditorsReportAgedCreditorsReport;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
