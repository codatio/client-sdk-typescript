/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Data types that reference an account, for example bill and invoice line items, use an accountRef that includes the ID and name of the linked account.
 */
export class CreateJournalEntrySourceModifiedDateJournalLinesAccountRef extends SpeakeasyBase {
  /**
   * 'id' from the Accounts data type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * 'name' from the Accounts data type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

/**
 * List of record refs associated with the tracking information for the line (eg to a Tracking Category, or customer etc.)
 */
export class CreateJournalEntrySourceModifiedDateJournalLinesTracking extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "recordRefs" })
  recordRefs?: string[];
}

export class CreateJournalEntrySourceModifiedDateJournalLines extends SpeakeasyBase {
  /**
   * Data types that reference an account, for example bill and invoice line items, use an accountRef that includes the ID and name of the linked account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accountRef" })
  @Type(() => CreateJournalEntrySourceModifiedDateJournalLinesAccountRef)
  accountRef?: CreateJournalEntrySourceModifiedDateJournalLinesAccountRef;

  /**
   * Currency for the journal line item.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency" })
  currency?: string;

  /**
   * Description of the journal line item.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * Amount for the journal line. Debit entries are considered positive, and credit entries are considered negative.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "netAmount" })
  netAmount: number;

  /**
   * List of record refs associated with the tracking information for the line (eg to a Tracking Category, or customer etc.)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tracking" })
  @Type(() => CreateJournalEntrySourceModifiedDateJournalLinesTracking)
  tracking?: CreateJournalEntrySourceModifiedDateJournalLinesTracking;
}

/**
 * Links journal entries to the relevant journal in accounting integrations that use multi-book accounting (multiple journals).
 */
export class CreateJournalEntrySourceModifiedDateJournalRef extends SpeakeasyBase {
  /**
   * GUID of the underlying journal.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  /**
   * Journal name, 256 characters max.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

export class CreateJournalEntrySourceModifiedDateMetadata extends SpeakeasyBase {
  /**
   * Indicates whether the record has been deleted in the third-party system this record originated from.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isDeleted" })
  isDeleted?: boolean;
}

/**
 * Links to the underlying record or data type.
 *
 * @remarks
 *
 * Found on:
 *
 * - Journal entries
 * - Account transactions
 * - Invoices
 * - Transfers
 */
export class CreateJournalEntrySourceModifiedDateRecordRef extends SpeakeasyBase {
  /**
   * Name of the 'dataType'.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dataType" })
  dataType?: string;

  /**
   * 'id' of the underlying record or data type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;
}

/**
 * Reference to a configured dynamic key value pair that is unique to the accounting platform. This feature is in private beta, contact us if you would like to learn more.
 */
export class CreateJournalEntrySourceModifiedDateSupplementalData extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "content" })
  content?: Record<string, Record<string, any>>;
}

/**
 * > **Language tip:** For the top-level record of a company's financial transactions, refer to the [Journals](https://docs.codat.io/accounting-api#/schemas/Journal) data type
 *
 * @remarks
 *
 * > View the coverage for journal entries in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=journalEntries" target="_blank">Data coverage explorer</a>.
 *
 * ## Overview
 *
 * A journal entry report shows the entries made in a company's general ledger, or [accounts](https://docs.codat.io/accounting-api#/schemas/Account), when transactions are approved. The journal line items for each journal entry should balance.
 *
 * A journal entry line item is a single transaction line on the journal entry. For example:
 *
 * - When a journal entry is recording a receipt of cash, the credit to accounts receivable and the debit to cash are separate line items.
 * - When a company needs to recognise revenue from an annual contract on a monthly basis, on receipt of cash for month one, they make a debit to deferred income and a credit to revenue.
 *
 * In Codat a journal entry contains details of:
 *
 * - The date on which the entry was created and posted.
 * - Itemised lines, including amounts and currency.
 * - A reference to the associated accounts.
 * - A reference to the underlying record. For example, the invoice, bill, or other data type that triggered the posting of the journal entry to the general ledger.
 *
 * > **Pushing journal entries**
 * > Codat only supports journal entries in the base currency of the company that are pushed into accounts denominated in the same base currency.
 */
export class CreateJournalEntrySourceModifiedDate extends SpeakeasyBase {
  /**
   * Date on which the journal was created in the accounting platform.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createdOn" })
  createdOn?: string;

  /**
   * Optional description of the journal entry.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * Unique identifier of the journal entry for the company in the accounting platform.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * An array of journal lines.
   */
  @SpeakeasyMetadata({
    elemType: CreateJournalEntrySourceModifiedDateJournalLines,
  })
  @Expose({ name: "journalLines" })
  @Type(() => CreateJournalEntrySourceModifiedDateJournalLines)
  journalLines?: CreateJournalEntrySourceModifiedDateJournalLines[];

  /**
   * Links journal entries to the relevant journal in accounting integrations that use multi-book accounting (multiple journals).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "journalRef" })
  @Type(() => CreateJournalEntrySourceModifiedDateJournalRef)
  journalRef?: CreateJournalEntrySourceModifiedDateJournalRef;

  @SpeakeasyMetadata()
  @Expose({ name: "metadata" })
  @Type(() => CreateJournalEntrySourceModifiedDateMetadata)
  metadata?: CreateJournalEntrySourceModifiedDateMetadata;

  /**
   * The date on which this record was last modified in Codat.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "modifiedDate" })
  modifiedDate?: string;

  /**
   * Date on which the journal entry was posted to the accounting platform, and had an impact on the general ledger. This may be different from the creation date.
   *
   * @remarks
   *
   * For example, a user creates a journal entry on Monday and saves it as draft, which has no impact on the general ledger. On Thursday, they return to the entry and post it.
   *
   * The **createdOn** date shows as Monday.
   * The **postedOn** date shows as Thursday.
   * Journal entries can also be backdated, so the **postedOn** date may be earlier than the **createdOn** date.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "postedOn" })
  postedOn?: string;

  /**
   * Links to the underlying record or data type.
   *
   * @remarks
   *
   * Found on:
   *
   * - Journal entries
   * - Account transactions
   * - Invoices
   * - Transfers
   */
  @SpeakeasyMetadata()
  @Expose({ name: "recordRef" })
  @Type(() => CreateJournalEntrySourceModifiedDateRecordRef)
  recordRef?: CreateJournalEntrySourceModifiedDateRecordRef;

  /**
   * The date on which this record was last modified in the originating system
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sourceModifiedDate" })
  sourceModifiedDate?: string;

  /**
   * Reference to a configured dynamic key value pair that is unique to the accounting platform. This feature is in private beta, contact us if you would like to learn more.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "supplementalData" })
  @Type(() => CreateJournalEntrySourceModifiedDateSupplementalData)
  supplementalData?: CreateJournalEntrySourceModifiedDateSupplementalData;

  /**
   * Date on which the journal was last updated in the accounting platform.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updatedOn" })
  updatedOn?: string;
}

export class CreateJournalEntryRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody?: CreateJournalEntrySourceModifiedDate;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=companyId",
  })
  companyId: string;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=connectionId",
  })
  connectionId: string;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=timeoutInMinutes",
  })
  timeoutInMinutes?: number;
}

/**
 * Available Data types
 */
export enum CreateJournalEntry200ApplicationJSONChangesPushOperationReferenceDataTypeEnum {
  AccountTransactions = "accountTransactions",
  BalanceSheet = "balanceSheet",
  BankAccounts = "bankAccounts",
  BankTransactions = "bankTransactions",
  BillCreditNotes = "billCreditNotes",
  BillPayments = "billPayments",
  Bills = "bills",
  CashFlowStatement = "cashFlowStatement",
  ChartOfAccounts = "chartOfAccounts",
  Company = "company",
  CreditNotes = "creditNotes",
  Customers = "customers",
  DirectCosts = "directCosts",
  DirectIncomes = "directIncomes",
  Invoices = "invoices",
  Items = "items",
  JournalEntries = "journalEntries",
  Journals = "journals",
  PaymentMethods = "paymentMethods",
  Payments = "payments",
  ProfitAndLoss = "profitAndLoss",
  PurchaseOrders = "purchaseOrders",
  SalesOrders = "salesOrders",
  Suppliers = "suppliers",
  TaxRates = "taxRates",
  TrackingCategories = "trackingCategories",
  Transfers = "transfers",
  BankingAccountBalances = "banking-accountBalances",
  BankingAccounts = "banking-accounts",
  BankingTransactionCategories = "banking-transactionCategories",
  BankingTransactions = "banking-transactions",
  CommerceCompanyInfo = "commerce-companyInfo",
  CommerceCustomers = "commerce-customers",
  CommerceDisputes = "commerce-disputes",
  CommerceLocations = "commerce-locations",
  CommerceOrders = "commerce-orders",
  CommercePaymentMethods = "commerce-paymentMethods",
  CommercePayments = "commerce-payments",
  CommerceProductCategories = "commerce-productCategories",
  CommerceProducts = "commerce-products",
  CommerceTaxComponents = "commerce-taxComponents",
  CommerceTransactions = "commerce-transactions",
}

export class CreateJournalEntry200ApplicationJSONChangesPushOperationReference extends SpeakeasyBase {
  /**
   * Available Data types
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dataType" })
  dataType?: CreateJournalEntry200ApplicationJSONChangesPushOperationReferenceDataTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;
}

export enum CreateJournalEntry200ApplicationJSONChangesPushChangeTypeEnum {
  Unknown = "Unknown",
  Created = "Created",
  Modified = "Modified",
  Deleted = "Deleted",
  AttachmentUploaded = "AttachmentUploaded",
}

export class CreateJournalEntry200ApplicationJSONChanges extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "attachmentId" })
  attachmentId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "recordRef" })
  @Type(() => CreateJournalEntry200ApplicationJSONChangesPushOperationReference)
  recordRef?: CreateJournalEntry200ApplicationJSONChangesPushOperationReference;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: CreateJournalEntry200ApplicationJSONChangesPushChangeTypeEnum;
}

/**
 * Data types that reference an account, for example bill and invoice line items, use an accountRef that includes the ID and name of the linked account.
 */
export class CreateJournalEntry200ApplicationJSONSourceModifiedDateJournalLinesAccountRef extends SpeakeasyBase {
  /**
   * 'id' from the Accounts data type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * 'name' from the Accounts data type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

/**
 * List of record refs associated with the tracking information for the line (eg to a Tracking Category, or customer etc.)
 */
export class CreateJournalEntry200ApplicationJSONSourceModifiedDateJournalLinesTracking extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "recordRefs" })
  recordRefs?: string[];
}

export class CreateJournalEntry200ApplicationJSONSourceModifiedDateJournalLines extends SpeakeasyBase {
  /**
   * Data types that reference an account, for example bill and invoice line items, use an accountRef that includes the ID and name of the linked account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accountRef" })
  @Type(
    () =>
      CreateJournalEntry200ApplicationJSONSourceModifiedDateJournalLinesAccountRef
  )
  accountRef?: CreateJournalEntry200ApplicationJSONSourceModifiedDateJournalLinesAccountRef;

  /**
   * Currency for the journal line item.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency" })
  currency?: string;

  /**
   * Description of the journal line item.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * Amount for the journal line. Debit entries are considered positive, and credit entries are considered negative.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "netAmount" })
  netAmount: number;

  /**
   * List of record refs associated with the tracking information for the line (eg to a Tracking Category, or customer etc.)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tracking" })
  @Type(
    () =>
      CreateJournalEntry200ApplicationJSONSourceModifiedDateJournalLinesTracking
  )
  tracking?: CreateJournalEntry200ApplicationJSONSourceModifiedDateJournalLinesTracking;
}

/**
 * Links journal entries to the relevant journal in accounting integrations that use multi-book accounting (multiple journals).
 */
export class CreateJournalEntry200ApplicationJSONSourceModifiedDateJournalRef extends SpeakeasyBase {
  /**
   * GUID of the underlying journal.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  /**
   * Journal name, 256 characters max.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

export class CreateJournalEntry200ApplicationJSONSourceModifiedDateMetadata extends SpeakeasyBase {
  /**
   * Indicates whether the record has been deleted in the third-party system this record originated from.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isDeleted" })
  isDeleted?: boolean;
}

/**
 * Links to the underlying record or data type.
 *
 * @remarks
 *
 * Found on:
 *
 * - Journal entries
 * - Account transactions
 * - Invoices
 * - Transfers
 */
export class CreateJournalEntry200ApplicationJSONSourceModifiedDateRecordRef extends SpeakeasyBase {
  /**
   * Name of the 'dataType'.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dataType" })
  dataType?: string;

  /**
   * 'id' of the underlying record or data type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;
}

/**
 * Reference to a configured dynamic key value pair that is unique to the accounting platform. This feature is in private beta, contact us if you would like to learn more.
 */
export class CreateJournalEntry200ApplicationJSONSourceModifiedDateSupplementalData extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "content" })
  content?: Record<string, Record<string, any>>;
}

/**
 * > **Language tip:** For the top-level record of a company's financial transactions, refer to the [Journals](https://docs.codat.io/accounting-api#/schemas/Journal) data type
 *
 * @remarks
 *
 * > View the coverage for journal entries in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=journalEntries" target="_blank">Data coverage explorer</a>.
 *
 * ## Overview
 *
 * A journal entry report shows the entries made in a company's general ledger, or [accounts](https://docs.codat.io/accounting-api#/schemas/Account), when transactions are approved. The journal line items for each journal entry should balance.
 *
 * A journal entry line item is a single transaction line on the journal entry. For example:
 *
 * - When a journal entry is recording a receipt of cash, the credit to accounts receivable and the debit to cash are separate line items.
 * - When a company needs to recognise revenue from an annual contract on a monthly basis, on receipt of cash for month one, they make a debit to deferred income and a credit to revenue.
 *
 * In Codat a journal entry contains details of:
 *
 * - The date on which the entry was created and posted.
 * - Itemised lines, including amounts and currency.
 * - A reference to the associated accounts.
 * - A reference to the underlying record. For example, the invoice, bill, or other data type that triggered the posting of the journal entry to the general ledger.
 *
 * > **Pushing journal entries**
 * > Codat only supports journal entries in the base currency of the company that are pushed into accounts denominated in the same base currency.
 */
export class CreateJournalEntry200ApplicationJSONSourceModifiedDate extends SpeakeasyBase {
  /**
   * Date on which the journal was created in the accounting platform.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createdOn" })
  createdOn?: string;

  /**
   * Optional description of the journal entry.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * Unique identifier of the journal entry for the company in the accounting platform.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * An array of journal lines.
   */
  @SpeakeasyMetadata({
    elemType:
      CreateJournalEntry200ApplicationJSONSourceModifiedDateJournalLines,
  })
  @Expose({ name: "journalLines" })
  @Type(
    () => CreateJournalEntry200ApplicationJSONSourceModifiedDateJournalLines
  )
  journalLines?: CreateJournalEntry200ApplicationJSONSourceModifiedDateJournalLines[];

  /**
   * Links journal entries to the relevant journal in accounting integrations that use multi-book accounting (multiple journals).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "journalRef" })
  @Type(() => CreateJournalEntry200ApplicationJSONSourceModifiedDateJournalRef)
  journalRef?: CreateJournalEntry200ApplicationJSONSourceModifiedDateJournalRef;

  @SpeakeasyMetadata()
  @Expose({ name: "metadata" })
  @Type(() => CreateJournalEntry200ApplicationJSONSourceModifiedDateMetadata)
  metadata?: CreateJournalEntry200ApplicationJSONSourceModifiedDateMetadata;

  /**
   * The date on which this record was last modified in Codat.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "modifiedDate" })
  modifiedDate?: string;

  /**
   * Date on which the journal entry was posted to the accounting platform, and had an impact on the general ledger. This may be different from the creation date.
   *
   * @remarks
   *
   * For example, a user creates a journal entry on Monday and saves it as draft, which has no impact on the general ledger. On Thursday, they return to the entry and post it.
   *
   * The **createdOn** date shows as Monday.
   * The **postedOn** date shows as Thursday.
   * Journal entries can also be backdated, so the **postedOn** date may be earlier than the **createdOn** date.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "postedOn" })
  postedOn?: string;

  /**
   * Links to the underlying record or data type.
   *
   * @remarks
   *
   * Found on:
   *
   * - Journal entries
   * - Account transactions
   * - Invoices
   * - Transfers
   */
  @SpeakeasyMetadata()
  @Expose({ name: "recordRef" })
  @Type(() => CreateJournalEntry200ApplicationJSONSourceModifiedDateRecordRef)
  recordRef?: CreateJournalEntry200ApplicationJSONSourceModifiedDateRecordRef;

  /**
   * The date on which this record was last modified in the originating system
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sourceModifiedDate" })
  sourceModifiedDate?: string;

  /**
   * Reference to a configured dynamic key value pair that is unique to the accounting platform. This feature is in private beta, contact us if you would like to learn more.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "supplementalData" })
  @Type(
    () => CreateJournalEntry200ApplicationJSONSourceModifiedDateSupplementalData
  )
  supplementalData?: CreateJournalEntry200ApplicationJSONSourceModifiedDateSupplementalData;

  /**
   * Date on which the journal was last updated in the accounting platform.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updatedOn" })
  updatedOn?: string;
}

/**
 * The type of data being pushed, eg invoices, customers.
 */
export enum CreateJournalEntry200ApplicationJSONDataTypeEnum {
  AccountTransactions = "accountTransactions",
  BalanceSheet = "balanceSheet",
  BankAccounts = "bankAccounts",
  BankTransactions = "bankTransactions",
  BillCreditNotes = "billCreditNotes",
  BillPayments = "billPayments",
  Bills = "bills",
  CashFlowStatement = "cashFlowStatement",
  ChartOfAccounts = "chartOfAccounts",
  Company = "company",
  CreditNotes = "creditNotes",
  Customers = "customers",
  DirectCosts = "directCosts",
  DirectIncomes = "directIncomes",
  Invoices = "invoices",
  Items = "items",
  JournalEntries = "journalEntries",
  Journals = "journals",
  PaymentMethods = "paymentMethods",
  Payments = "payments",
  ProfitAndLoss = "profitAndLoss",
  PurchaseOrders = "purchaseOrders",
  SalesOrders = "salesOrders",
  Suppliers = "suppliers",
  TaxRates = "taxRates",
  TrackingCategories = "trackingCategories",
  Transfers = "transfers",
  BankingAccountBalances = "banking-accountBalances",
  BankingAccounts = "banking-accounts",
  BankingTransactionCategories = "banking-transactionCategories",
  BankingTransactions = "banking-transactions",
  CommerceCompanyInfo = "commerce-companyInfo",
  CommerceCustomers = "commerce-customers",
  CommerceDisputes = "commerce-disputes",
  CommerceLocations = "commerce-locations",
  CommerceOrders = "commerce-orders",
  CommercePaymentMethods = "commerce-paymentMethods",
  CommercePayments = "commerce-payments",
  CommerceProductCategories = "commerce-productCategories",
  CommerceProducts = "commerce-products",
  CommerceTaxComponents = "commerce-taxComponents",
  CommerceTransactions = "commerce-transactions",
}

/**
 * The status of the push operation.
 */
export enum CreateJournalEntry200ApplicationJSONPushOperationStatusEnum {
  Pending = "Pending",
  Failed = "Failed",
  Success = "Success",
  TimedOut = "TimedOut",
}

export class CreateJournalEntry200ApplicationJSONValidationValidationItem extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "itemId" })
  itemId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "validatorName" })
  validatorName?: string;
}

/**
 * A human-readable object describing validation decisions Codat has made when pushing data into the platform. If a push has failed because of validation errors, they will be detailed here.
 */
export class CreateJournalEntry200ApplicationJSONValidation extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType: CreateJournalEntry200ApplicationJSONValidationValidationItem,
  })
  @Expose({ name: "errors" })
  @Type(() => CreateJournalEntry200ApplicationJSONValidationValidationItem)
  errors?: CreateJournalEntry200ApplicationJSONValidationValidationItem[];

  @SpeakeasyMetadata({
    elemType: CreateJournalEntry200ApplicationJSONValidationValidationItem,
  })
  @Expose({ name: "warnings" })
  @Type(() => CreateJournalEntry200ApplicationJSONValidationValidationItem)
  warnings?: CreateJournalEntry200ApplicationJSONValidationValidationItem[];
}

/**
 * Success
 */
export class CreateJournalEntry200ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: CreateJournalEntry200ApplicationJSONChanges })
  @Expose({ name: "changes" })
  @Type(() => CreateJournalEntry200ApplicationJSONChanges)
  changes?: CreateJournalEntry200ApplicationJSONChanges[];

  /**
   * Unique identifier for your SMB in Codat.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "companyId" })
  companyId: string;

  /**
   * The datetime when the push was completed, null if Pending.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "completedOnUtc" })
  completedOnUtc?: string;

  /**
   * > **Language tip:** For the top-level record of a company's financial transactions, refer to the [Journals](https://docs.codat.io/accounting-api#/schemas/Journal) data type
   *
   * @remarks
   *
   * > View the coverage for journal entries in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=journalEntries" target="_blank">Data coverage explorer</a>.
   *
   * ## Overview
   *
   * A journal entry report shows the entries made in a company's general ledger, or [accounts](https://docs.codat.io/accounting-api#/schemas/Account), when transactions are approved. The journal line items for each journal entry should balance.
   *
   * A journal entry line item is a single transaction line on the journal entry. For example:
   *
   * - When a journal entry is recording a receipt of cash, the credit to accounts receivable and the debit to cash are separate line items.
   * - When a company needs to recognise revenue from an annual contract on a monthly basis, on receipt of cash for month one, they make a debit to deferred income and a credit to revenue.
   *
   * In Codat a journal entry contains details of:
   *
   * - The date on which the entry was created and posted.
   * - Itemised lines, including amounts and currency.
   * - A reference to the associated accounts.
   * - A reference to the underlying record. For example, the invoice, bill, or other data type that triggered the posting of the journal entry to the general ledger.
   *
   * > **Pushing journal entries**
   * > Codat only supports journal entries in the base currency of the company that are pushed into accounts denominated in the same base currency.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "data" })
  @Type(() => CreateJournalEntry200ApplicationJSONSourceModifiedDate)
  data?: CreateJournalEntry200ApplicationJSONSourceModifiedDate;

  /**
   * Unique identifier for a company's data connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dataConnectionKey" })
  dataConnectionKey: string;

  /**
   * The type of data being pushed, eg invoices, customers.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dataType" })
  dataType?: CreateJournalEntry200ApplicationJSONDataTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "errorMessage" })
  errorMessage?: string;

  /**
   * A unique identifier generated by Codat to represent this single push operation. This identifier can be used to track the status of the push, and should be persisted.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pushOperationKey" })
  pushOperationKey: string;

  /**
   * The datetime when the push was requested.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "requestedOnUtc" })
  requestedOnUtc: string;

  /**
   * The status of the push operation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: CreateJournalEntry200ApplicationJSONPushOperationStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "statusCode" })
  statusCode: number;

  @SpeakeasyMetadata()
  @Expose({ name: "timeoutInMinutes" })
  timeoutInMinutes?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "timeoutInSeconds" })
  timeoutInSeconds?: number;

  /**
   * A human-readable object describing validation decisions Codat has made when pushing data into the platform. If a push has failed because of validation errors, they will be detailed here.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "validation" })
  @Type(() => CreateJournalEntry200ApplicationJSONValidation)
  validation?: CreateJournalEntry200ApplicationJSONValidation;
}

export class CreateJournalEntryResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createJournalEntry200ApplicationJSONObject?: CreateJournalEntry200ApplicationJSON;
}
