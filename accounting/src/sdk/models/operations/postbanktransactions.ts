/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class PostBankTransactionsRequestBodyTransactionsModifiedDate extends SpeakeasyBase {
  /**
   * The date on which this record was last modified in Codat.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "modifiedDate" })
  modifiedDate?: string;
}

export class PostBankTransactionsRequestBodyTransactionsSourceModifiedDate extends SpeakeasyBase {
  /**
   * The date on which this record was last modified in the originating system
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sourceModifiedDate" })
  sourceModifiedDate?: string;
}

/**
 * Type of transaction for the bank statement line
 */
export enum PostBankTransactionsRequestBodyTransactionsTransactionTypeEnum {
  Unknown = "Unknown",
  Credit = "Credit",
  Debit = "Debit",
  Int = "Int",
  Div = "Div",
  Fee = "Fee",
  SerChg = "SerChg",
  Dep = "Dep",
  Atm = "Atm",
  Pos = "Pos",
  Xfer = "Xfer",
  Check = "Check",
  Payment = "Payment",
  Cash = "Cash",
  DirectDep = "DirectDep",
  DirectDebit = "DirectDebit",
  RepeatPmt = "RepeatPmt",
  Other = "Other",
}

export class PostBankTransactionsRequestBodyTransactions extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount: number;

  @SpeakeasyMetadata()
  @Expose({ name: "balance" })
  balance: number;

  @SpeakeasyMetadata()
  @Expose({ name: "counterparty" })
  counterparty?: string;

  /**
   * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
   *
   * @remarks
   *
   * ```
   * 2020-10-08T22:40:50Z
   * 2021-01-01T00:00:00
   * ```
   *
   *
   *
   * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
   *
   * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
   * - Unqualified local time: `2021-11-15T01:00:00`
   * - UTC time offsets: `2021-11-15T01:00:00-05:00`
   *
   * > Time zones
   * >
   * > Not all dates from Codat will contain information about time zones.
   * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "date" })
  date: string;

  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "modifiedDate" })
  @Type(() => PostBankTransactionsRequestBodyTransactionsModifiedDate)
  modifiedDate?: PostBankTransactionsRequestBodyTransactionsModifiedDate;

  @SpeakeasyMetadata()
  @Expose({ name: "reconciled" })
  reconciled: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "reference" })
  reference?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "sourceModifiedDate" })
  @Type(() => PostBankTransactionsRequestBodyTransactionsSourceModifiedDate)
  sourceModifiedDate?: PostBankTransactionsRequestBodyTransactionsSourceModifiedDate;

  /**
   * Type of transaction for the bank statement line
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transactionType" })
  transactionType: PostBankTransactionsRequestBodyTransactionsTransactionTypeEnum;
}

/**
 * > **Accessing Bank Accounts through Banking API**
 *
 * @remarks
 * >
 * > This datatype was originally used for accessing bank account data both in accounting integrations and open banking aggregators.
 * >
 * > To view bank account data through the Banking API, please refer to the new datatype [here](https://docs.codat.io/banking-api#/operations/list-all-banking-transactions)
 *
 * > View the coverage for bank transactions in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=bankTransactions" target="_blank">Data coverage explorer</a>.
 *
 * ## Overview
 *
 * Transactional banking data for a specific company and account.
 *
 * Bank transactions include the:
 * * Amount of the transaction.
 * * Current account balance.
 * * Transaction type, for example, credit, debit, or transfer.
 */
export class PostBankTransactionsRequestBody extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "accountId" })
  accountId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "contractVersion" })
  contractVersion?: string;

  @SpeakeasyMetadata({ elemType: PostBankTransactionsRequestBodyTransactions })
  @Expose({ name: "transactions" })
  @Type(() => PostBankTransactionsRequestBodyTransactions)
  transactions?: PostBankTransactionsRequestBodyTransactions[];
}

export class PostBankTransactionsRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody?: PostBankTransactionsRequestBody;

  /**
   * Unique identifier for an account
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=accountId",
  })
  accountId: string;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=allowSyncOnPushComplete",
  })
  allowSyncOnPushComplete?: boolean;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=companyId",
  })
  companyId: string;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=connectionId",
  })
  connectionId: string;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=timeoutInMinutes",
  })
  timeoutInMinutes?: number;
}

export class PostBankTransactions200ApplicationJSONChangesPushOperationRecordRef extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "dataType" })
  dataType?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;
}

export enum PostBankTransactions200ApplicationJSONChangesTypeEnum {
  Unknown = "Unknown",
  Created = "Created",
  Modified = "Modified",
  Deleted = "Deleted",
  AttachmentUploaded = "AttachmentUploaded",
}

export class PostBankTransactions200ApplicationJSONChanges extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "attachmentId" })
  attachmentId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "recordRef" })
  @Type(
    () => PostBankTransactions200ApplicationJSONChangesPushOperationRecordRef
  )
  recordRef?: PostBankTransactions200ApplicationJSONChangesPushOperationRecordRef;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: PostBankTransactions200ApplicationJSONChangesTypeEnum;
}

export class PostBankTransactions200ApplicationJSONDataTransactionsModifiedDate extends SpeakeasyBase {
  /**
   * The date on which this record was last modified in Codat.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "modifiedDate" })
  modifiedDate?: string;
}

export class PostBankTransactions200ApplicationJSONDataTransactionsSourceModifiedDate extends SpeakeasyBase {
  /**
   * The date on which this record was last modified in the originating system
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sourceModifiedDate" })
  sourceModifiedDate?: string;
}

/**
 * Type of transaction for the bank statement line
 */
export enum PostBankTransactions200ApplicationJSONDataTransactionsTransactionTypeEnum {
  Unknown = "Unknown",
  Credit = "Credit",
  Debit = "Debit",
  Int = "Int",
  Div = "Div",
  Fee = "Fee",
  SerChg = "SerChg",
  Dep = "Dep",
  Atm = "Atm",
  Pos = "Pos",
  Xfer = "Xfer",
  Check = "Check",
  Payment = "Payment",
  Cash = "Cash",
  DirectDep = "DirectDep",
  DirectDebit = "DirectDebit",
  RepeatPmt = "RepeatPmt",
  Other = "Other",
}

export class PostBankTransactions200ApplicationJSONDataTransactions extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount: number;

  @SpeakeasyMetadata()
  @Expose({ name: "balance" })
  balance: number;

  @SpeakeasyMetadata()
  @Expose({ name: "counterparty" })
  counterparty?: string;

  /**
   * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
   *
   * @remarks
   *
   * ```
   * 2020-10-08T22:40:50Z
   * 2021-01-01T00:00:00
   * ```
   *
   *
   *
   * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
   *
   * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
   * - Unqualified local time: `2021-11-15T01:00:00`
   * - UTC time offsets: `2021-11-15T01:00:00-05:00`
   *
   * > Time zones
   * >
   * > Not all dates from Codat will contain information about time zones.
   * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "date" })
  date: string;

  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "modifiedDate" })
  @Type(
    () => PostBankTransactions200ApplicationJSONDataTransactionsModifiedDate
  )
  modifiedDate?: PostBankTransactions200ApplicationJSONDataTransactionsModifiedDate;

  @SpeakeasyMetadata()
  @Expose({ name: "reconciled" })
  reconciled: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "reference" })
  reference?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "sourceModifiedDate" })
  @Type(
    () =>
      PostBankTransactions200ApplicationJSONDataTransactionsSourceModifiedDate
  )
  sourceModifiedDate?: PostBankTransactions200ApplicationJSONDataTransactionsSourceModifiedDate;

  /**
   * Type of transaction for the bank statement line
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transactionType" })
  transactionType: PostBankTransactions200ApplicationJSONDataTransactionsTransactionTypeEnum;
}

/**
 * > **Accessing Bank Accounts through Banking API**
 *
 * @remarks
 * >
 * > This datatype was originally used for accessing bank account data both in accounting integrations and open banking aggregators.
 * >
 * > To view bank account data through the Banking API, please refer to the new datatype [here](https://docs.codat.io/banking-api#/operations/list-all-banking-transactions)
 *
 * > View the coverage for bank transactions in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=bankTransactions" target="_blank">Data coverage explorer</a>.
 *
 * ## Overview
 *
 * Transactional banking data for a specific company and account.
 *
 * Bank transactions include the:
 * * Amount of the transaction.
 * * Current account balance.
 * * Transaction type, for example, credit, debit, or transfer.
 */
export class PostBankTransactions200ApplicationJSONData extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "accountId" })
  accountId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "contractVersion" })
  contractVersion?: string;

  @SpeakeasyMetadata({
    elemType: PostBankTransactions200ApplicationJSONDataTransactions,
  })
  @Expose({ name: "transactions" })
  @Type(() => PostBankTransactions200ApplicationJSONDataTransactions)
  transactions?: PostBankTransactions200ApplicationJSONDataTransactions[];
}

/**
 * The type of data being pushed, eg invoices, customers.
 */
export enum PostBankTransactions200ApplicationJSONDataTypeEnum {
  AccountTransactions = "accountTransactions",
  BalanceSheet = "balanceSheet",
  BankAccounts = "bankAccounts",
  BankTransactions = "bankTransactions",
  BillCreditNotes = "billCreditNotes",
  BillPayments = "billPayments",
  Bills = "bills",
  CashFlowStatement = "cashFlowStatement",
  ChartOfAccounts = "chartOfAccounts",
  Company = "company",
  CreditNotes = "creditNotes",
  Customers = "customers",
  DirectCosts = "directCosts",
  DirectIncomes = "directIncomes",
  Invoices = "invoices",
  Items = "items",
  JournalEntries = "journalEntries",
  Journals = "journals",
  PaymentMethods = "paymentMethods",
  Payments = "payments",
  ProfitAndLoss = "profitAndLoss",
  PurchaseOrders = "purchaseOrders",
  SalesOrders = "salesOrders",
  Suppliers = "suppliers",
  TaxRates = "taxRates",
  TrackingCategories = "trackingCategories",
  Transfers = "transfers",
  BankingAccountBalances = "banking-accountBalances",
  BankingAccounts = "banking-accounts",
  BankingTransactionCategories = "banking-transactionCategories",
  BankingTransactions = "banking-transactions",
  CommerceCompanyInfo = "commerce-companyInfo",
  CommerceCustomers = "commerce-customers",
  CommerceDisputes = "commerce-disputes",
  CommerceLocations = "commerce-locations",
  CommerceOrders = "commerce-orders",
  CommercePaymentMethods = "commerce-paymentMethods",
  CommercePayments = "commerce-payments",
  CommerceProductCategories = "commerce-productCategories",
  CommerceProducts = "commerce-products",
  CommerceTaxComponents = "commerce-taxComponents",
  CommerceTransactions = "commerce-transactions",
}

/**
 * The status of the push operation.
 */
export enum PostBankTransactions200ApplicationJSONStatusEnum {
  Pending = "Pending",
  Failed = "Failed",
  Success = "Success",
  TimedOut = "TimedOut",
}

export class PostBankTransactions200ApplicationJSONValidationValidationItem extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "itemId" })
  itemId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "validatorName" })
  validatorName?: string;
}

/**
 * A human-readable object describing validation decisions Codat has made when pushing data into the platform. If a push has failed because of validation errors, they will be detailed here.
 */
export class PostBankTransactions200ApplicationJSONValidation extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType: PostBankTransactions200ApplicationJSONValidationValidationItem,
  })
  @Expose({ name: "errors" })
  @Type(() => PostBankTransactions200ApplicationJSONValidationValidationItem)
  errors?: PostBankTransactions200ApplicationJSONValidationValidationItem[];

  @SpeakeasyMetadata({
    elemType: PostBankTransactions200ApplicationJSONValidationValidationItem,
  })
  @Expose({ name: "warnings" })
  @Type(() => PostBankTransactions200ApplicationJSONValidationValidationItem)
  warnings?: PostBankTransactions200ApplicationJSONValidationValidationItem[];
}

/**
 * Success
 */
export class PostBankTransactions200ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType: PostBankTransactions200ApplicationJSONChanges,
  })
  @Expose({ name: "changes" })
  @Type(() => PostBankTransactions200ApplicationJSONChanges)
  changes?: PostBankTransactions200ApplicationJSONChanges[];

  /**
   * Unique identifier for your SMB in Codat.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "companyId" })
  companyId: string;

  /**
   * The datetime when the push was completed, null if Pending.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "completedOnUtc" })
  completedOnUtc?: string;

  /**
   * > **Accessing Bank Accounts through Banking API**
   *
   * @remarks
   * >
   * > This datatype was originally used for accessing bank account data both in accounting integrations and open banking aggregators.
   * >
   * > To view bank account data through the Banking API, please refer to the new datatype [here](https://docs.codat.io/banking-api#/operations/list-all-banking-transactions)
   *
   * > View the coverage for bank transactions in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=bankTransactions" target="_blank">Data coverage explorer</a>.
   *
   * ## Overview
   *
   * Transactional banking data for a specific company and account.
   *
   * Bank transactions include the:
   * * Amount of the transaction.
   * * Current account balance.
   * * Transaction type, for example, credit, debit, or transfer.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "data" })
  @Type(() => PostBankTransactions200ApplicationJSONData)
  data?: PostBankTransactions200ApplicationJSONData;

  /**
   * Unique identifier for a company's data connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dataConnectionKey" })
  dataConnectionKey: string;

  /**
   * The type of data being pushed, eg invoices, customers.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dataType" })
  dataType?: PostBankTransactions200ApplicationJSONDataTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "errorMessage" })
  errorMessage?: string;

  /**
   * A unique identifier generated by Codat to represent this single push operation. This identifier can be used to track the status of the push, and should be persisted.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pushOperationKey" })
  pushOperationKey: string;

  /**
   * The datetime when the push was requested.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "requestedOnUtc" })
  requestedOnUtc: string;

  /**
   * The status of the push operation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: PostBankTransactions200ApplicationJSONStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "statusCode" })
  statusCode: number;

  @SpeakeasyMetadata()
  @Expose({ name: "timeoutInMinutes" })
  timeoutInMinutes?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "timeoutInSeconds" })
  timeoutInSeconds?: number;

  /**
   * A human-readable object describing validation decisions Codat has made when pushing data into the platform. If a push has failed because of validation errors, they will be detailed here.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "validation" })
  @Type(() => PostBankTransactions200ApplicationJSONValidation)
  validation?: PostBankTransactions200ApplicationJSONValidation;
}

export class PostBankTransactionsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  postBankTransactions200ApplicationJSONObject?: PostBankTransactions200ApplicationJSON;
}
