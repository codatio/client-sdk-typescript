/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { PushOptionChoice } from "./pushoptionchoice";
import { PushOptionProperty } from "./pushoptionproperty";
import { PushOptionTypeEnum } from "./pushoptiontypeenum";
import { PushValidationInfo } from "./pushvalidationinfo";
import { Expose, plainToInstance, Transform, Type } from "class-transformer";

/**
 * OK
 */
export class PushOption extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "displayName" })
  displayName: string;

  @SpeakeasyMetadata({ elemType: PushOptionChoice })
  @Expose({ name: "options" })
  @Type(() => PushOptionChoice)
  options?: PushOptionChoice[];

  @SpeakeasyMetadata({ elemType: PushOptionProperty })
  @Expose({ name: "properties" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, PushOptionProperty> = {};
      for (const key in value) {
        obj[key] = plainToInstance(
          PushOptionProperty,
          value[key] as PushOptionProperty,
          { excludeExtraneousValues: true }
        );
      }
      return obj;
    },
    { toClassOnly: true }
  )
  properties?: Record<string, PushOptionProperty>;

  @SpeakeasyMetadata()
  @Expose({ name: "required" })
  required: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: PushOptionTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "validation" })
  @Type(() => PushValidationInfo)
  validation?: PushValidationInfo;
}
