/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type CreateSourceAccountRequestBody =
  | shared.SourceAccountPrototype
  | shared.SourceAccountV2Prototype;

export type CreateSourceAccountRequest = {
  /**
   * Unique identifier for a company.
   */
  companyId: string;
  /**
   * Unique identifier for a connection.
   */
  connectionId: string;
  requestBody?:
    | shared.SourceAccountPrototype
    | shared.SourceAccountV2Prototype
    | undefined;
};

/**
 * Success
 */
export type CreateSourceAccountResponseBody =
  | shared.SourceAccount
  | shared.SourceAccountV2;

/** @internal */
export const CreateSourceAccountRequestBody$inboundSchema: z.ZodType<
  CreateSourceAccountRequestBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  shared.SourceAccountPrototype$inboundSchema,
  shared.SourceAccountV2Prototype$inboundSchema,
]);

/** @internal */
export type CreateSourceAccountRequestBody$Outbound =
  | shared.SourceAccountPrototype$Outbound
  | shared.SourceAccountV2Prototype$Outbound;

/** @internal */
export const CreateSourceAccountRequestBody$outboundSchema: z.ZodType<
  CreateSourceAccountRequestBody$Outbound,
  z.ZodTypeDef,
  CreateSourceAccountRequestBody
> = z.union([
  shared.SourceAccountPrototype$outboundSchema,
  shared.SourceAccountV2Prototype$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSourceAccountRequestBody$ {
  /** @deprecated use `CreateSourceAccountRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateSourceAccountRequestBody$inboundSchema;
  /** @deprecated use `CreateSourceAccountRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateSourceAccountRequestBody$outboundSchema;
  /** @deprecated use `CreateSourceAccountRequestBody$Outbound` instead. */
  export type Outbound = CreateSourceAccountRequestBody$Outbound;
}

export function createSourceAccountRequestBodyToJSON(
  createSourceAccountRequestBody: CreateSourceAccountRequestBody,
): string {
  return JSON.stringify(
    CreateSourceAccountRequestBody$outboundSchema.parse(
      createSourceAccountRequestBody,
    ),
  );
}

export function createSourceAccountRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateSourceAccountRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSourceAccountRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSourceAccountRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateSourceAccountRequest$inboundSchema: z.ZodType<
  CreateSourceAccountRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  companyId: z.string(),
  connectionId: z.string(),
  RequestBody: z.union([
    shared.SourceAccountPrototype$inboundSchema,
    shared.SourceAccountV2Prototype$inboundSchema,
  ]).optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreateSourceAccountRequest$Outbound = {
  companyId: string;
  connectionId: string;
  RequestBody?:
    | shared.SourceAccountPrototype$Outbound
    | shared.SourceAccountV2Prototype$Outbound
    | undefined;
};

/** @internal */
export const CreateSourceAccountRequest$outboundSchema: z.ZodType<
  CreateSourceAccountRequest$Outbound,
  z.ZodTypeDef,
  CreateSourceAccountRequest
> = z.object({
  companyId: z.string(),
  connectionId: z.string(),
  requestBody: z.union([
    shared.SourceAccountPrototype$outboundSchema,
    shared.SourceAccountV2Prototype$outboundSchema,
  ]).optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSourceAccountRequest$ {
  /** @deprecated use `CreateSourceAccountRequest$inboundSchema` instead. */
  export const inboundSchema = CreateSourceAccountRequest$inboundSchema;
  /** @deprecated use `CreateSourceAccountRequest$outboundSchema` instead. */
  export const outboundSchema = CreateSourceAccountRequest$outboundSchema;
  /** @deprecated use `CreateSourceAccountRequest$Outbound` instead. */
  export type Outbound = CreateSourceAccountRequest$Outbound;
}

export function createSourceAccountRequestToJSON(
  createSourceAccountRequest: CreateSourceAccountRequest,
): string {
  return JSON.stringify(
    CreateSourceAccountRequest$outboundSchema.parse(createSourceAccountRequest),
  );
}

export function createSourceAccountRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateSourceAccountRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSourceAccountRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSourceAccountRequest' from JSON`,
  );
}

/** @internal */
export const CreateSourceAccountResponseBody$inboundSchema: z.ZodType<
  CreateSourceAccountResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  shared.SourceAccount$inboundSchema,
  shared.SourceAccountV2$inboundSchema,
]);

/** @internal */
export type CreateSourceAccountResponseBody$Outbound =
  | shared.SourceAccount$Outbound
  | shared.SourceAccountV2$Outbound;

/** @internal */
export const CreateSourceAccountResponseBody$outboundSchema: z.ZodType<
  CreateSourceAccountResponseBody$Outbound,
  z.ZodTypeDef,
  CreateSourceAccountResponseBody
> = z.union([
  shared.SourceAccount$outboundSchema,
  shared.SourceAccountV2$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSourceAccountResponseBody$ {
  /** @deprecated use `CreateSourceAccountResponseBody$inboundSchema` instead. */
  export const inboundSchema = CreateSourceAccountResponseBody$inboundSchema;
  /** @deprecated use `CreateSourceAccountResponseBody$outboundSchema` instead. */
  export const outboundSchema = CreateSourceAccountResponseBody$outboundSchema;
  /** @deprecated use `CreateSourceAccountResponseBody$Outbound` instead. */
  export type Outbound = CreateSourceAccountResponseBody$Outbound;
}

export function createSourceAccountResponseBodyToJSON(
  createSourceAccountResponseBody: CreateSourceAccountResponseBody,
): string {
  return JSON.stringify(
    CreateSourceAccountResponseBody$outboundSchema.parse(
      createSourceAccountResponseBody,
    ),
  );
}

export function createSourceAccountResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateSourceAccountResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSourceAccountResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSourceAccountResponseBody' from JSON`,
  );
}
