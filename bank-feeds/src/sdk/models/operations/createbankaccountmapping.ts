/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type CreateBankAccountMappingRequest = {
  /**
   * Unique identifier for a company.
   */
  companyId: string;
  /**
   * Unique identifier for a connection.
   */
  connectionId: string;
  bankFeedAccountMapping?: shared.BankFeedAccountMapping | undefined;
};

/** @internal */
export const CreateBankAccountMappingRequest$inboundSchema: z.ZodType<
  CreateBankAccountMappingRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  companyId: z.string(),
  connectionId: z.string(),
  BankFeedAccountMapping: shared.BankFeedAccountMapping$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "BankFeedAccountMapping": "bankFeedAccountMapping",
  });
});

/** @internal */
export type CreateBankAccountMappingRequest$Outbound = {
  companyId: string;
  connectionId: string;
  BankFeedAccountMapping?: shared.BankFeedAccountMapping$Outbound | undefined;
};

/** @internal */
export const CreateBankAccountMappingRequest$outboundSchema: z.ZodType<
  CreateBankAccountMappingRequest$Outbound,
  z.ZodTypeDef,
  CreateBankAccountMappingRequest
> = z.object({
  companyId: z.string(),
  connectionId: z.string(),
  bankFeedAccountMapping: shared.BankFeedAccountMapping$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    bankFeedAccountMapping: "BankFeedAccountMapping",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateBankAccountMappingRequest$ {
  /** @deprecated use `CreateBankAccountMappingRequest$inboundSchema` instead. */
  export const inboundSchema = CreateBankAccountMappingRequest$inboundSchema;
  /** @deprecated use `CreateBankAccountMappingRequest$outboundSchema` instead. */
  export const outboundSchema = CreateBankAccountMappingRequest$outboundSchema;
  /** @deprecated use `CreateBankAccountMappingRequest$Outbound` instead. */
  export type Outbound = CreateBankAccountMappingRequest$Outbound;
}

export function createBankAccountMappingRequestToJSON(
  createBankAccountMappingRequest: CreateBankAccountMappingRequest,
): string {
  return JSON.stringify(
    CreateBankAccountMappingRequest$outboundSchema.parse(
      createBankAccountMappingRequest,
    ),
  );
}

export function createBankAccountMappingRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateBankAccountMappingRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateBankAccountMappingRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateBankAccountMappingRequest' from JSON`,
  );
}
