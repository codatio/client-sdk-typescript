/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type CreateBatchSourceAccountRequestBody =
  | Array<shared.SourceAccountV2>
  | Array<shared.SourceAccount>;

export type CreateBatchSourceAccountRequest = {
  /**
   * Unique identifier for a company.
   */
  companyId: string;
  /**
   * Unique identifier for a connection.
   */
  connectionId: string;
  requestBody?:
    | Array<shared.SourceAccountV2>
    | Array<shared.SourceAccount>
    | undefined;
};

export type ResponseBody1 =
  | shared.SourceAccountV2BatchCreateResponse
  | shared.SourceAccountBatchCreateResponse
  | shared.SourceAccountBatchErrorResponse;

/**
 * Multi-Status
 */
export type CreateBatchSourceAccountSourceAccountsResponseBody = Array<
  | shared.SourceAccountV2BatchCreateResponse
  | shared.SourceAccountBatchCreateResponse
  | shared.SourceAccountBatchErrorResponse
>;

export type One =
  | shared.SourceAccountV2BatchCreateResponse
  | shared.SourceAccountBatchCreateResponse;

/**
 * Success
 */
export type CreateBatchSourceAccountResponseBody = Array<
  | shared.SourceAccountV2BatchCreateResponse
  | shared.SourceAccountBatchCreateResponse
>;

export type CreateBatchSourceAccountResponse =
  | Array<
    | shared.SourceAccountV2BatchCreateResponse
    | shared.SourceAccountBatchCreateResponse
  >
  | Array<
    | shared.SourceAccountV2BatchCreateResponse
    | shared.SourceAccountBatchCreateResponse
    | shared.SourceAccountBatchErrorResponse
  >;

/** @internal */
export const CreateBatchSourceAccountRequestBody$inboundSchema: z.ZodType<
  CreateBatchSourceAccountRequestBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.array(shared.SourceAccountV2$inboundSchema),
  z.array(shared.SourceAccount$inboundSchema),
]);

/** @internal */
export type CreateBatchSourceAccountRequestBody$Outbound =
  | Array<shared.SourceAccountV2$Outbound>
  | Array<shared.SourceAccount$Outbound>;

/** @internal */
export const CreateBatchSourceAccountRequestBody$outboundSchema: z.ZodType<
  CreateBatchSourceAccountRequestBody$Outbound,
  z.ZodTypeDef,
  CreateBatchSourceAccountRequestBody
> = z.union([
  z.array(shared.SourceAccountV2$outboundSchema),
  z.array(shared.SourceAccount$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateBatchSourceAccountRequestBody$ {
  /** @deprecated use `CreateBatchSourceAccountRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    CreateBatchSourceAccountRequestBody$inboundSchema;
  /** @deprecated use `CreateBatchSourceAccountRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    CreateBatchSourceAccountRequestBody$outboundSchema;
  /** @deprecated use `CreateBatchSourceAccountRequestBody$Outbound` instead. */
  export type Outbound = CreateBatchSourceAccountRequestBody$Outbound;
}

export function createBatchSourceAccountRequestBodyToJSON(
  createBatchSourceAccountRequestBody: CreateBatchSourceAccountRequestBody,
): string {
  return JSON.stringify(
    CreateBatchSourceAccountRequestBody$outboundSchema.parse(
      createBatchSourceAccountRequestBody,
    ),
  );
}

export function createBatchSourceAccountRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateBatchSourceAccountRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateBatchSourceAccountRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateBatchSourceAccountRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateBatchSourceAccountRequest$inboundSchema: z.ZodType<
  CreateBatchSourceAccountRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  companyId: z.string(),
  connectionId: z.string(),
  RequestBody: z.union([
    z.array(shared.SourceAccountV2$inboundSchema),
    z.array(shared.SourceAccount$inboundSchema),
  ]).optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreateBatchSourceAccountRequest$Outbound = {
  companyId: string;
  connectionId: string;
  RequestBody?:
    | Array<shared.SourceAccountV2$Outbound>
    | Array<shared.SourceAccount$Outbound>
    | undefined;
};

/** @internal */
export const CreateBatchSourceAccountRequest$outboundSchema: z.ZodType<
  CreateBatchSourceAccountRequest$Outbound,
  z.ZodTypeDef,
  CreateBatchSourceAccountRequest
> = z.object({
  companyId: z.string(),
  connectionId: z.string(),
  requestBody: z.union([
    z.array(shared.SourceAccountV2$outboundSchema),
    z.array(shared.SourceAccount$outboundSchema),
  ]).optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateBatchSourceAccountRequest$ {
  /** @deprecated use `CreateBatchSourceAccountRequest$inboundSchema` instead. */
  export const inboundSchema = CreateBatchSourceAccountRequest$inboundSchema;
  /** @deprecated use `CreateBatchSourceAccountRequest$outboundSchema` instead. */
  export const outboundSchema = CreateBatchSourceAccountRequest$outboundSchema;
  /** @deprecated use `CreateBatchSourceAccountRequest$Outbound` instead. */
  export type Outbound = CreateBatchSourceAccountRequest$Outbound;
}

export function createBatchSourceAccountRequestToJSON(
  createBatchSourceAccountRequest: CreateBatchSourceAccountRequest,
): string {
  return JSON.stringify(
    CreateBatchSourceAccountRequest$outboundSchema.parse(
      createBatchSourceAccountRequest,
    ),
  );
}

export function createBatchSourceAccountRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateBatchSourceAccountRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateBatchSourceAccountRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateBatchSourceAccountRequest' from JSON`,
  );
}

/** @internal */
export const ResponseBody1$inboundSchema: z.ZodType<
  ResponseBody1,
  z.ZodTypeDef,
  unknown
> = z.union([
  shared.SourceAccountV2BatchCreateResponse$inboundSchema,
  shared.SourceAccountBatchCreateResponse$inboundSchema,
  shared.SourceAccountBatchErrorResponse$inboundSchema,
]);

/** @internal */
export type ResponseBody1$Outbound =
  | shared.SourceAccountV2BatchCreateResponse$Outbound
  | shared.SourceAccountBatchCreateResponse$Outbound
  | shared.SourceAccountBatchErrorResponse$Outbound;

/** @internal */
export const ResponseBody1$outboundSchema: z.ZodType<
  ResponseBody1$Outbound,
  z.ZodTypeDef,
  ResponseBody1
> = z.union([
  shared.SourceAccountV2BatchCreateResponse$outboundSchema,
  shared.SourceAccountBatchCreateResponse$outboundSchema,
  shared.SourceAccountBatchErrorResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBody1$ {
  /** @deprecated use `ResponseBody1$inboundSchema` instead. */
  export const inboundSchema = ResponseBody1$inboundSchema;
  /** @deprecated use `ResponseBody1$outboundSchema` instead. */
  export const outboundSchema = ResponseBody1$outboundSchema;
  /** @deprecated use `ResponseBody1$Outbound` instead. */
  export type Outbound = ResponseBody1$Outbound;
}

export function responseBody1ToJSON(responseBody1: ResponseBody1): string {
  return JSON.stringify(ResponseBody1$outboundSchema.parse(responseBody1));
}

export function responseBody1FromJSON(
  jsonString: string,
): SafeParseResult<ResponseBody1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBody1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBody1' from JSON`,
  );
}

/** @internal */
export const CreateBatchSourceAccountSourceAccountsResponseBody$inboundSchema:
  z.ZodType<
    CreateBatchSourceAccountSourceAccountsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.array(
    z.union([
      shared.SourceAccountV2BatchCreateResponse$inboundSchema,
      shared.SourceAccountBatchCreateResponse$inboundSchema,
      shared.SourceAccountBatchErrorResponse$inboundSchema,
    ]),
  );

/** @internal */
export type CreateBatchSourceAccountSourceAccountsResponseBody$Outbound = Array<
  | shared.SourceAccountV2BatchCreateResponse$Outbound
  | shared.SourceAccountBatchCreateResponse$Outbound
  | shared.SourceAccountBatchErrorResponse$Outbound
>;

/** @internal */
export const CreateBatchSourceAccountSourceAccountsResponseBody$outboundSchema:
  z.ZodType<
    CreateBatchSourceAccountSourceAccountsResponseBody$Outbound,
    z.ZodTypeDef,
    CreateBatchSourceAccountSourceAccountsResponseBody
  > = z.array(
    z.union([
      shared.SourceAccountV2BatchCreateResponse$outboundSchema,
      shared.SourceAccountBatchCreateResponse$outboundSchema,
      shared.SourceAccountBatchErrorResponse$outboundSchema,
    ]),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateBatchSourceAccountSourceAccountsResponseBody$ {
  /** @deprecated use `CreateBatchSourceAccountSourceAccountsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    CreateBatchSourceAccountSourceAccountsResponseBody$inboundSchema;
  /** @deprecated use `CreateBatchSourceAccountSourceAccountsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    CreateBatchSourceAccountSourceAccountsResponseBody$outboundSchema;
  /** @deprecated use `CreateBatchSourceAccountSourceAccountsResponseBody$Outbound` instead. */
  export type Outbound =
    CreateBatchSourceAccountSourceAccountsResponseBody$Outbound;
}

export function createBatchSourceAccountSourceAccountsResponseBodyToJSON(
  createBatchSourceAccountSourceAccountsResponseBody:
    CreateBatchSourceAccountSourceAccountsResponseBody,
): string {
  return JSON.stringify(
    CreateBatchSourceAccountSourceAccountsResponseBody$outboundSchema.parse(
      createBatchSourceAccountSourceAccountsResponseBody,
    ),
  );
}

export function createBatchSourceAccountSourceAccountsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateBatchSourceAccountSourceAccountsResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateBatchSourceAccountSourceAccountsResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateBatchSourceAccountSourceAccountsResponseBody' from JSON`,
  );
}

/** @internal */
export const One$inboundSchema: z.ZodType<One, z.ZodTypeDef, unknown> = z.union(
  [
    shared.SourceAccountV2BatchCreateResponse$inboundSchema,
    shared.SourceAccountBatchCreateResponse$inboundSchema,
  ],
);

/** @internal */
export type One$Outbound =
  | shared.SourceAccountV2BatchCreateResponse$Outbound
  | shared.SourceAccountBatchCreateResponse$Outbound;

/** @internal */
export const One$outboundSchema: z.ZodType<One$Outbound, z.ZodTypeDef, One> = z
  .union([
    shared.SourceAccountV2BatchCreateResponse$outboundSchema,
    shared.SourceAccountBatchCreateResponse$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace One$ {
  /** @deprecated use `One$inboundSchema` instead. */
  export const inboundSchema = One$inboundSchema;
  /** @deprecated use `One$outboundSchema` instead. */
  export const outboundSchema = One$outboundSchema;
  /** @deprecated use `One$Outbound` instead. */
  export type Outbound = One$Outbound;
}

export function oneToJSON(one: One): string {
  return JSON.stringify(One$outboundSchema.parse(one));
}

export function oneFromJSON(
  jsonString: string,
): SafeParseResult<One, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => One$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'One' from JSON`,
  );
}

/** @internal */
export const CreateBatchSourceAccountResponseBody$inboundSchema: z.ZodType<
  CreateBatchSourceAccountResponseBody,
  z.ZodTypeDef,
  unknown
> = z.array(
  z.union([
    shared.SourceAccountV2BatchCreateResponse$inboundSchema,
    shared.SourceAccountBatchCreateResponse$inboundSchema,
  ]),
);

/** @internal */
export type CreateBatchSourceAccountResponseBody$Outbound = Array<
  | shared.SourceAccountV2BatchCreateResponse$Outbound
  | shared.SourceAccountBatchCreateResponse$Outbound
>;

/** @internal */
export const CreateBatchSourceAccountResponseBody$outboundSchema: z.ZodType<
  CreateBatchSourceAccountResponseBody$Outbound,
  z.ZodTypeDef,
  CreateBatchSourceAccountResponseBody
> = z.array(
  z.union([
    shared.SourceAccountV2BatchCreateResponse$outboundSchema,
    shared.SourceAccountBatchCreateResponse$outboundSchema,
  ]),
);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateBatchSourceAccountResponseBody$ {
  /** @deprecated use `CreateBatchSourceAccountResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    CreateBatchSourceAccountResponseBody$inboundSchema;
  /** @deprecated use `CreateBatchSourceAccountResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    CreateBatchSourceAccountResponseBody$outboundSchema;
  /** @deprecated use `CreateBatchSourceAccountResponseBody$Outbound` instead. */
  export type Outbound = CreateBatchSourceAccountResponseBody$Outbound;
}

export function createBatchSourceAccountResponseBodyToJSON(
  createBatchSourceAccountResponseBody: CreateBatchSourceAccountResponseBody,
): string {
  return JSON.stringify(
    CreateBatchSourceAccountResponseBody$outboundSchema.parse(
      createBatchSourceAccountResponseBody,
    ),
  );
}

export function createBatchSourceAccountResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateBatchSourceAccountResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateBatchSourceAccountResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateBatchSourceAccountResponseBody' from JSON`,
  );
}

/** @internal */
export const CreateBatchSourceAccountResponse$inboundSchema: z.ZodType<
  CreateBatchSourceAccountResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.array(
    z.union([
      shared.SourceAccountV2BatchCreateResponse$inboundSchema,
      shared.SourceAccountBatchCreateResponse$inboundSchema,
    ]),
  ),
  z.array(
    z.union([
      shared.SourceAccountV2BatchCreateResponse$inboundSchema,
      shared.SourceAccountBatchCreateResponse$inboundSchema,
      shared.SourceAccountBatchErrorResponse$inboundSchema,
    ]),
  ),
]);

/** @internal */
export type CreateBatchSourceAccountResponse$Outbound =
  | Array<
    | shared.SourceAccountV2BatchCreateResponse$Outbound
    | shared.SourceAccountBatchCreateResponse$Outbound
  >
  | Array<
    | shared.SourceAccountV2BatchCreateResponse$Outbound
    | shared.SourceAccountBatchCreateResponse$Outbound
    | shared.SourceAccountBatchErrorResponse$Outbound
  >;

/** @internal */
export const CreateBatchSourceAccountResponse$outboundSchema: z.ZodType<
  CreateBatchSourceAccountResponse$Outbound,
  z.ZodTypeDef,
  CreateBatchSourceAccountResponse
> = z.union([
  z.array(
    z.union([
      shared.SourceAccountV2BatchCreateResponse$outboundSchema,
      shared.SourceAccountBatchCreateResponse$outboundSchema,
    ]),
  ),
  z.array(
    z.union([
      shared.SourceAccountV2BatchCreateResponse$outboundSchema,
      shared.SourceAccountBatchCreateResponse$outboundSchema,
      shared.SourceAccountBatchErrorResponse$outboundSchema,
    ]),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateBatchSourceAccountResponse$ {
  /** @deprecated use `CreateBatchSourceAccountResponse$inboundSchema` instead. */
  export const inboundSchema = CreateBatchSourceAccountResponse$inboundSchema;
  /** @deprecated use `CreateBatchSourceAccountResponse$outboundSchema` instead. */
  export const outboundSchema = CreateBatchSourceAccountResponse$outboundSchema;
  /** @deprecated use `CreateBatchSourceAccountResponse$Outbound` instead. */
  export type Outbound = CreateBatchSourceAccountResponse$Outbound;
}

export function createBatchSourceAccountResponseToJSON(
  createBatchSourceAccountResponse: CreateBatchSourceAccountResponse,
): string {
  return JSON.stringify(
    CreateBatchSourceAccountResponse$outboundSchema.parse(
      createBatchSourceAccountResponse,
    ),
  );
}

export function createBatchSourceAccountResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateBatchSourceAccountResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateBatchSourceAccountResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateBatchSourceAccountResponse' from JSON`,
  );
}
