/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type UpdateSourceAccountRequest = {
  /**
   * Unique identifier for a company.
   */
  companyId: string;
  /**
   * Unique identifier for a connection.
   */
  connectionId: string;
  /**
   * Unique identifier for an account.
   */
  accountId: string;
  sourceAccount?: shared.SourceAccount | undefined;
};

/** @internal */
export const UpdateSourceAccountRequest$inboundSchema: z.ZodType<
  UpdateSourceAccountRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  companyId: z.string(),
  connectionId: z.string(),
  accountId: z.string(),
  SourceAccount: shared.SourceAccount$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "SourceAccount": "sourceAccount",
  });
});

/** @internal */
export type UpdateSourceAccountRequest$Outbound = {
  companyId: string;
  connectionId: string;
  accountId: string;
  SourceAccount?: shared.SourceAccount$Outbound | undefined;
};

/** @internal */
export const UpdateSourceAccountRequest$outboundSchema: z.ZodType<
  UpdateSourceAccountRequest$Outbound,
  z.ZodTypeDef,
  UpdateSourceAccountRequest
> = z.object({
  companyId: z.string(),
  connectionId: z.string(),
  accountId: z.string(),
  sourceAccount: shared.SourceAccount$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    sourceAccount: "SourceAccount",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSourceAccountRequest$ {
  /** @deprecated use `UpdateSourceAccountRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateSourceAccountRequest$inboundSchema;
  /** @deprecated use `UpdateSourceAccountRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateSourceAccountRequest$outboundSchema;
  /** @deprecated use `UpdateSourceAccountRequest$Outbound` instead. */
  export type Outbound = UpdateSourceAccountRequest$Outbound;
}

export function updateSourceAccountRequestToJSON(
  updateSourceAccountRequest: UpdateSourceAccountRequest,
): string {
  return JSON.stringify(
    UpdateSourceAccountRequest$outboundSchema.parse(updateSourceAccountRequest),
  );
}

export function updateSourceAccountRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSourceAccountRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSourceAccountRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSourceAccountRequest' from JSON`,
  );
}
