/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type ListSourceAccountsRequest = {
  /**
   * Unique identifier for a company.
   */
  companyId: string;
  /**
   * Unique identifier for a connection.
   */
  connectionId: string;
};

/**
 * Success
 */
export type ListSourceAccountsResponseBody =
  | Array<shared.SourceAccountV2>
  | Array<shared.SourceAccount>;

/** @internal */
export const ListSourceAccountsRequest$inboundSchema: z.ZodType<
  ListSourceAccountsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  companyId: z.string(),
  connectionId: z.string(),
});

/** @internal */
export type ListSourceAccountsRequest$Outbound = {
  companyId: string;
  connectionId: string;
};

/** @internal */
export const ListSourceAccountsRequest$outboundSchema: z.ZodType<
  ListSourceAccountsRequest$Outbound,
  z.ZodTypeDef,
  ListSourceAccountsRequest
> = z.object({
  companyId: z.string(),
  connectionId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSourceAccountsRequest$ {
  /** @deprecated use `ListSourceAccountsRequest$inboundSchema` instead. */
  export const inboundSchema = ListSourceAccountsRequest$inboundSchema;
  /** @deprecated use `ListSourceAccountsRequest$outboundSchema` instead. */
  export const outboundSchema = ListSourceAccountsRequest$outboundSchema;
  /** @deprecated use `ListSourceAccountsRequest$Outbound` instead. */
  export type Outbound = ListSourceAccountsRequest$Outbound;
}

export function listSourceAccountsRequestToJSON(
  listSourceAccountsRequest: ListSourceAccountsRequest,
): string {
  return JSON.stringify(
    ListSourceAccountsRequest$outboundSchema.parse(listSourceAccountsRequest),
  );
}

export function listSourceAccountsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListSourceAccountsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSourceAccountsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSourceAccountsRequest' from JSON`,
  );
}

/** @internal */
export const ListSourceAccountsResponseBody$inboundSchema: z.ZodType<
  ListSourceAccountsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.array(shared.SourceAccountV2$inboundSchema),
  z.array(shared.SourceAccount$inboundSchema),
]);

/** @internal */
export type ListSourceAccountsResponseBody$Outbound =
  | Array<shared.SourceAccountV2$Outbound>
  | Array<shared.SourceAccount$Outbound>;

/** @internal */
export const ListSourceAccountsResponseBody$outboundSchema: z.ZodType<
  ListSourceAccountsResponseBody$Outbound,
  z.ZodTypeDef,
  ListSourceAccountsResponseBody
> = z.union([
  z.array(shared.SourceAccountV2$outboundSchema),
  z.array(shared.SourceAccount$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSourceAccountsResponseBody$ {
  /** @deprecated use `ListSourceAccountsResponseBody$inboundSchema` instead. */
  export const inboundSchema = ListSourceAccountsResponseBody$inboundSchema;
  /** @deprecated use `ListSourceAccountsResponseBody$outboundSchema` instead. */
  export const outboundSchema = ListSourceAccountsResponseBody$outboundSchema;
  /** @deprecated use `ListSourceAccountsResponseBody$Outbound` instead. */
  export type Outbound = ListSourceAccountsResponseBody$Outbound;
}

export function listSourceAccountsResponseBodyToJSON(
  listSourceAccountsResponseBody: ListSourceAccountsResponseBody,
): string {
  return JSON.stringify(
    ListSourceAccountsResponseBody$outboundSchema.parse(
      listSourceAccountsResponseBody,
    ),
  );
}

export function listSourceAccountsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ListSourceAccountsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSourceAccountsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSourceAccountsResponseBody' from JSON`,
  );
}
