/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Result = {
  /**
   * The error status code for the attempted creation of the source account.
   */
  statusCode?: string | undefined;
  /**
   * The error description for the attempted creation of the source account.
   */
  error?: string | undefined;
};

/**
 * Describes the error that occured when trying to create the specified source account.
 */
export type SourceAccountBatchErrorResponse = {
  /**
   * Unique ID for the source account.
   */
  sourceAccountId?: string | undefined;
  result?: Result | undefined;
};

/** @internal */
export const Result$inboundSchema: z.ZodType<Result, z.ZodTypeDef, unknown> = z
  .object({
    statusCode: z.string().optional(),
    error: z.string().optional(),
  });

/** @internal */
export type Result$Outbound = {
  statusCode?: string | undefined;
  error?: string | undefined;
};

/** @internal */
export const Result$outboundSchema: z.ZodType<
  Result$Outbound,
  z.ZodTypeDef,
  Result
> = z.object({
  statusCode: z.string().optional(),
  error: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Result$ {
  /** @deprecated use `Result$inboundSchema` instead. */
  export const inboundSchema = Result$inboundSchema;
  /** @deprecated use `Result$outboundSchema` instead. */
  export const outboundSchema = Result$outboundSchema;
  /** @deprecated use `Result$Outbound` instead. */
  export type Outbound = Result$Outbound;
}

export function resultToJSON(result: Result): string {
  return JSON.stringify(Result$outboundSchema.parse(result));
}

export function resultFromJSON(
  jsonString: string,
): SafeParseResult<Result, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Result$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Result' from JSON`,
  );
}

/** @internal */
export const SourceAccountBatchErrorResponse$inboundSchema: z.ZodType<
  SourceAccountBatchErrorResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourceAccountId: z.string().optional(),
  result: z.lazy(() => Result$inboundSchema).optional(),
});

/** @internal */
export type SourceAccountBatchErrorResponse$Outbound = {
  sourceAccountId?: string | undefined;
  result?: Result$Outbound | undefined;
};

/** @internal */
export const SourceAccountBatchErrorResponse$outboundSchema: z.ZodType<
  SourceAccountBatchErrorResponse$Outbound,
  z.ZodTypeDef,
  SourceAccountBatchErrorResponse
> = z.object({
  sourceAccountId: z.string().optional(),
  result: z.lazy(() => Result$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SourceAccountBatchErrorResponse$ {
  /** @deprecated use `SourceAccountBatchErrorResponse$inboundSchema` instead. */
  export const inboundSchema = SourceAccountBatchErrorResponse$inboundSchema;
  /** @deprecated use `SourceAccountBatchErrorResponse$outboundSchema` instead. */
  export const outboundSchema = SourceAccountBatchErrorResponse$outboundSchema;
  /** @deprecated use `SourceAccountBatchErrorResponse$Outbound` instead. */
  export type Outbound = SourceAccountBatchErrorResponse$Outbound;
}

export function sourceAccountBatchErrorResponseToJSON(
  sourceAccountBatchErrorResponse: SourceAccountBatchErrorResponse,
): string {
  return JSON.stringify(
    SourceAccountBatchErrorResponse$outboundSchema.parse(
      sourceAccountBatchErrorResponse,
    ),
  );
}

export function sourceAccountBatchErrorResponseFromJSON(
  jsonString: string,
): SafeParseResult<SourceAccountBatchErrorResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SourceAccountBatchErrorResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SourceAccountBatchErrorResponse' from JSON`,
  );
}
