/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    ConfigurationContactRef,
    ConfigurationContactRef$inboundSchema,
    ConfigurationContactRef$Outbound,
    ConfigurationContactRef$outboundSchema,
} from "./configurationcontactref.js";
import * as z from "zod";

export type ConfigurationCustomer = {
    /**
     * Unique identifier for the customer.
     */
    selectedCustomerId?: string | undefined;
    customerOptions?: Array<ConfigurationContactRef> | undefined;
};

/** @internal */
export const ConfigurationCustomer$inboundSchema: z.ZodType<
    ConfigurationCustomer,
    z.ZodTypeDef,
    unknown
> = z.object({
    selectedCustomerId: z.string().optional(),
    customerOptions: z.array(ConfigurationContactRef$inboundSchema).optional(),
});

/** @internal */
export type ConfigurationCustomer$Outbound = {
    selectedCustomerId?: string | undefined;
    customerOptions?: Array<ConfigurationContactRef$Outbound> | undefined;
};

/** @internal */
export const ConfigurationCustomer$outboundSchema: z.ZodType<
    ConfigurationCustomer$Outbound,
    z.ZodTypeDef,
    ConfigurationCustomer
> = z.object({
    selectedCustomerId: z.string().optional(),
    customerOptions: z.array(ConfigurationContactRef$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConfigurationCustomer$ {
    /** @deprecated use `ConfigurationCustomer$inboundSchema` instead. */
    export const inboundSchema = ConfigurationCustomer$inboundSchema;
    /** @deprecated use `ConfigurationCustomer$outboundSchema` instead. */
    export const outboundSchema = ConfigurationCustomer$outboundSchema;
    /** @deprecated use `ConfigurationCustomer$Outbound` instead. */
    export type Outbound = ConfigurationCustomer$Outbound;
}
