/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PushFieldValidation = {
  /**
   * Field name that resulted in the validation issue.
   */
  field?: string | undefined;
  /**
   * Details on the validation issue.
   */
  details: string;
  /**
   * Unique reference identifier for the validation issue.
   */
  ref?: string | null | undefined;
};

/** @internal */
export const PushFieldValidation$inboundSchema: z.ZodType<
  PushFieldValidation,
  z.ZodTypeDef,
  unknown
> = z.object({
  field: z.string().optional(),
  details: z.string(),
  ref: z.nullable(z.string()).optional(),
});

/** @internal */
export type PushFieldValidation$Outbound = {
  field?: string | undefined;
  details: string;
  ref?: string | null | undefined;
};

/** @internal */
export const PushFieldValidation$outboundSchema: z.ZodType<
  PushFieldValidation$Outbound,
  z.ZodTypeDef,
  PushFieldValidation
> = z.object({
  field: z.string().optional(),
  details: z.string(),
  ref: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PushFieldValidation$ {
  /** @deprecated use `PushFieldValidation$inboundSchema` instead. */
  export const inboundSchema = PushFieldValidation$inboundSchema;
  /** @deprecated use `PushFieldValidation$outboundSchema` instead. */
  export const outboundSchema = PushFieldValidation$outboundSchema;
  /** @deprecated use `PushFieldValidation$Outbound` instead. */
  export type Outbound = PushFieldValidation$Outbound;
}

export function pushFieldValidationToJSON(
  pushFieldValidation: PushFieldValidation,
): string {
  return JSON.stringify(
    PushFieldValidation$outboundSchema.parse(pushFieldValidation),
  );
}

export function pushFieldValidationFromJSON(
  jsonString: string,
): SafeParseResult<PushFieldValidation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PushFieldValidation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PushFieldValidation' from JSON`,
  );
}
