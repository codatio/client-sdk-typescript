/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { DataType, DataType$inboundSchema, DataType$outboundSchema } from "./datatype.js";
import * as z from "zod";

export type PushOperationRef = {
    /**
     * Unique identifier for a push operation.
     */
    id?: string | undefined;
    /**
     * Available data types
     */
    dataType?: DataType | undefined;
};

/** @internal */
export const PushOperationRef$inboundSchema: z.ZodType<PushOperationRef, z.ZodTypeDef, unknown> =
    z.object({
        id: z.string().optional(),
        dataType: DataType$inboundSchema.optional(),
    });

/** @internal */
export type PushOperationRef$Outbound = {
    id?: string | undefined;
    dataType?: string | undefined;
};

/** @internal */
export const PushOperationRef$outboundSchema: z.ZodType<
    PushOperationRef$Outbound,
    z.ZodTypeDef,
    PushOperationRef
> = z.object({
    id: z.string().optional(),
    dataType: DataType$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PushOperationRef$ {
    /** @deprecated use `PushOperationRef$inboundSchema` instead. */
    export const inboundSchema = PushOperationRef$inboundSchema;
    /** @deprecated use `PushOperationRef$outboundSchema` instead. */
    export const outboundSchema = PushOperationRef$outboundSchema;
    /** @deprecated use `PushOperationRef$Outbound` instead. */
    export type Outbound = PushOperationRef$Outbound;
}
