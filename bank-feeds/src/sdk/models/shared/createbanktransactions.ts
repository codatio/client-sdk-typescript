/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  BankTransactions,
  BankTransactions$inboundSchema,
  BankTransactions$Outbound,
  BankTransactions$outboundSchema,
} from "./banktransactions.js";

export type CreateBankTransactions = {
  /**
   * Unique identifier for a bank account.
   */
  accountId: string;
  transactions: Array<BankTransactions>;
};

/** @internal */
export const CreateBankTransactions$inboundSchema: z.ZodType<
  CreateBankTransactions,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountId: z.string(),
  transactions: z.array(BankTransactions$inboundSchema),
});

/** @internal */
export type CreateBankTransactions$Outbound = {
  accountId: string;
  transactions: Array<BankTransactions$Outbound>;
};

/** @internal */
export const CreateBankTransactions$outboundSchema: z.ZodType<
  CreateBankTransactions$Outbound,
  z.ZodTypeDef,
  CreateBankTransactions
> = z.object({
  accountId: z.string(),
  transactions: z.array(BankTransactions$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateBankTransactions$ {
  /** @deprecated use `CreateBankTransactions$inboundSchema` instead. */
  export const inboundSchema = CreateBankTransactions$inboundSchema;
  /** @deprecated use `CreateBankTransactions$outboundSchema` instead. */
  export const outboundSchema = CreateBankTransactions$outboundSchema;
  /** @deprecated use `CreateBankTransactions$Outbound` instead. */
  export type Outbound = CreateBankTransactions$Outbound;
}

export function createBankTransactionsToJSON(
  createBankTransactions: CreateBankTransactions,
): string {
  return JSON.stringify(
    CreateBankTransactions$outboundSchema.parse(createBankTransactions),
  );
}

export function createBankTransactionsFromJSON(
  jsonString: string,
): SafeParseResult<CreateBankTransactions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateBankTransactions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateBankTransactions' from JSON`,
  );
}
