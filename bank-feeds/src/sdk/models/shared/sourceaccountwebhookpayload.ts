/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CompanyReference,
  CompanyReference$inboundSchema,
  CompanyReference$Outbound,
  CompanyReference$outboundSchema,
} from "./companyreference.js";
import {
  SourceAccount,
  SourceAccount$inboundSchema,
  SourceAccount$Outbound,
  SourceAccount$outboundSchema,
} from "./sourceaccount.js";
import {
  SourceAccountV2,
  SourceAccountV2$inboundSchema,
  SourceAccountV2$Outbound,
  SourceAccountV2$outboundSchema,
} from "./sourceaccountv2.js";

export type SourceAccountWebhookPayloadSourceAccount =
  | SourceAccount
  | SourceAccountV2;

export type SourceAccountWebhookPayload = {
  referenceCompany?: CompanyReference | undefined;
  /**
   * Unique identifier for your SMB in Codat.
   */
  companyId?: string | undefined;
  /**
   * Unique identifier for a company's data connection.
   */
  connectionId?: string | undefined;
  sourceAccount?: SourceAccount | SourceAccountV2 | undefined;
};

/** @internal */
export const SourceAccountWebhookPayloadSourceAccount$inboundSchema: z.ZodType<
  SourceAccountWebhookPayloadSourceAccount,
  z.ZodTypeDef,
  unknown
> = z.union([SourceAccount$inboundSchema, SourceAccountV2$inboundSchema]);

/** @internal */
export type SourceAccountWebhookPayloadSourceAccount$Outbound =
  | SourceAccount$Outbound
  | SourceAccountV2$Outbound;

/** @internal */
export const SourceAccountWebhookPayloadSourceAccount$outboundSchema: z.ZodType<
  SourceAccountWebhookPayloadSourceAccount$Outbound,
  z.ZodTypeDef,
  SourceAccountWebhookPayloadSourceAccount
> = z.union([SourceAccount$outboundSchema, SourceAccountV2$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SourceAccountWebhookPayloadSourceAccount$ {
  /** @deprecated use `SourceAccountWebhookPayloadSourceAccount$inboundSchema` instead. */
  export const inboundSchema =
    SourceAccountWebhookPayloadSourceAccount$inboundSchema;
  /** @deprecated use `SourceAccountWebhookPayloadSourceAccount$outboundSchema` instead. */
  export const outboundSchema =
    SourceAccountWebhookPayloadSourceAccount$outboundSchema;
  /** @deprecated use `SourceAccountWebhookPayloadSourceAccount$Outbound` instead. */
  export type Outbound = SourceAccountWebhookPayloadSourceAccount$Outbound;
}

export function sourceAccountWebhookPayloadSourceAccountToJSON(
  sourceAccountWebhookPayloadSourceAccount:
    SourceAccountWebhookPayloadSourceAccount,
): string {
  return JSON.stringify(
    SourceAccountWebhookPayloadSourceAccount$outboundSchema.parse(
      sourceAccountWebhookPayloadSourceAccount,
    ),
  );
}

export function sourceAccountWebhookPayloadSourceAccountFromJSON(
  jsonString: string,
): SafeParseResult<
  SourceAccountWebhookPayloadSourceAccount,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SourceAccountWebhookPayloadSourceAccount$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SourceAccountWebhookPayloadSourceAccount' from JSON`,
  );
}

/** @internal */
export const SourceAccountWebhookPayload$inboundSchema: z.ZodType<
  SourceAccountWebhookPayload,
  z.ZodTypeDef,
  unknown
> = z.object({
  referenceCompany: CompanyReference$inboundSchema.optional(),
  companyId: z.string().optional(),
  connectionId: z.string().optional(),
  sourceAccount: z.union([
    SourceAccount$inboundSchema,
    SourceAccountV2$inboundSchema,
  ]).optional(),
});

/** @internal */
export type SourceAccountWebhookPayload$Outbound = {
  referenceCompany?: CompanyReference$Outbound | undefined;
  companyId?: string | undefined;
  connectionId?: string | undefined;
  sourceAccount?: SourceAccount$Outbound | SourceAccountV2$Outbound | undefined;
};

/** @internal */
export const SourceAccountWebhookPayload$outboundSchema: z.ZodType<
  SourceAccountWebhookPayload$Outbound,
  z.ZodTypeDef,
  SourceAccountWebhookPayload
> = z.object({
  referenceCompany: CompanyReference$outboundSchema.optional(),
  companyId: z.string().optional(),
  connectionId: z.string().optional(),
  sourceAccount: z.union([
    SourceAccount$outboundSchema,
    SourceAccountV2$outboundSchema,
  ]).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SourceAccountWebhookPayload$ {
  /** @deprecated use `SourceAccountWebhookPayload$inboundSchema` instead. */
  export const inboundSchema = SourceAccountWebhookPayload$inboundSchema;
  /** @deprecated use `SourceAccountWebhookPayload$outboundSchema` instead. */
  export const outboundSchema = SourceAccountWebhookPayload$outboundSchema;
  /** @deprecated use `SourceAccountWebhookPayload$Outbound` instead. */
  export type Outbound = SourceAccountWebhookPayload$Outbound;
}

export function sourceAccountWebhookPayloadToJSON(
  sourceAccountWebhookPayload: SourceAccountWebhookPayload,
): string {
  return JSON.stringify(
    SourceAccountWebhookPayload$outboundSchema.parse(
      sourceAccountWebhookPayload,
    ),
  );
}

export function sourceAccountWebhookPayloadFromJSON(
  jsonString: string,
): SafeParseResult<SourceAccountWebhookPayload, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SourceAccountWebhookPayload$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SourceAccountWebhookPayload' from JSON`,
  );
}
