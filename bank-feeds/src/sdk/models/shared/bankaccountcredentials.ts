/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Result of generate credentials
 */
export type BankAccountCredentials = {
  /**
   * Username used by the bank feeds platform to retrieve transactions
   */
  username?: string | undefined;
  /**
   * Password to enable the bank feeds platform to securely retrieve transactions.
   */
  password?: string | undefined;
};

/** @internal */
export const BankAccountCredentials$inboundSchema: z.ZodType<
  BankAccountCredentials,
  z.ZodTypeDef,
  unknown
> = z.object({
  username: z.string().optional(),
  password: z.string().optional(),
});

/** @internal */
export type BankAccountCredentials$Outbound = {
  username?: string | undefined;
  password?: string | undefined;
};

/** @internal */
export const BankAccountCredentials$outboundSchema: z.ZodType<
  BankAccountCredentials$Outbound,
  z.ZodTypeDef,
  BankAccountCredentials
> = z.object({
  username: z.string().optional(),
  password: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BankAccountCredentials$ {
  /** @deprecated use `BankAccountCredentials$inboundSchema` instead. */
  export const inboundSchema = BankAccountCredentials$inboundSchema;
  /** @deprecated use `BankAccountCredentials$outboundSchema` instead. */
  export const outboundSchema = BankAccountCredentials$outboundSchema;
  /** @deprecated use `BankAccountCredentials$Outbound` instead. */
  export type Outbound = BankAccountCredentials$Outbound;
}

export function bankAccountCredentialsToJSON(
  bankAccountCredentials: BankAccountCredentials,
): string {
  return JSON.stringify(
    BankAccountCredentials$outboundSchema.parse(bankAccountCredentials),
  );
}

export function bankAccountCredentialsFromJSON(
  jsonString: string,
): SafeParseResult<BankAccountCredentials, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BankAccountCredentials$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BankAccountCredentials' from JSON`,
  );
}
