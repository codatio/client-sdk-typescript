/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * A collection of links for the company.
 */
export type CompanyReferenceLinks = {
  /**
   * Link to the company page in the portal.
   */
  portal?: string | undefined;
};

export type CompanyReference = {
  /**
   * Unique identifier for your SMB in Codat.
   */
  id?: string | undefined;
  /**
   * The name of the company
   */
  name?: string | undefined;
  /**
   * Additional information about the company. This can be used to store foreign IDs, references, etc.
   */
  description?: string | undefined;
  /**
   * A collection of links for the company.
   */
  links?: CompanyReferenceLinks | undefined;
  /**
   * A collection of user-defined key-value pairs that store custom metadata against the company.
   */
  tags?: { [k: string]: string } | undefined;
};

/** @internal */
export const CompanyReferenceLinks$inboundSchema: z.ZodType<
  CompanyReferenceLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  portal: z.string().optional(),
});

/** @internal */
export type CompanyReferenceLinks$Outbound = {
  portal?: string | undefined;
};

/** @internal */
export const CompanyReferenceLinks$outboundSchema: z.ZodType<
  CompanyReferenceLinks$Outbound,
  z.ZodTypeDef,
  CompanyReferenceLinks
> = z.object({
  portal: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompanyReferenceLinks$ {
  /** @deprecated use `CompanyReferenceLinks$inboundSchema` instead. */
  export const inboundSchema = CompanyReferenceLinks$inboundSchema;
  /** @deprecated use `CompanyReferenceLinks$outboundSchema` instead. */
  export const outboundSchema = CompanyReferenceLinks$outboundSchema;
  /** @deprecated use `CompanyReferenceLinks$Outbound` instead. */
  export type Outbound = CompanyReferenceLinks$Outbound;
}

/** @internal */
export const CompanyReference$inboundSchema: z.ZodType<
  CompanyReference,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  links: z.lazy(() => CompanyReferenceLinks$inboundSchema).optional(),
  tags: z.record(z.string()).optional(),
});

/** @internal */
export type CompanyReference$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  links?: CompanyReferenceLinks$Outbound | undefined;
  tags?: { [k: string]: string } | undefined;
};

/** @internal */
export const CompanyReference$outboundSchema: z.ZodType<
  CompanyReference$Outbound,
  z.ZodTypeDef,
  CompanyReference
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  links: z.lazy(() => CompanyReferenceLinks$outboundSchema).optional(),
  tags: z.record(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompanyReference$ {
  /** @deprecated use `CompanyReference$inboundSchema` instead. */
  export const inboundSchema = CompanyReference$inboundSchema;
  /** @deprecated use `CompanyReference$outboundSchema` instead. */
  export const outboundSchema = CompanyReference$outboundSchema;
  /** @deprecated use `CompanyReference$Outbound` instead. */
  export type Outbound = CompanyReference$Outbound;
}
