/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CompanyRequestBody = {
  /**
   * Name of company being connected.
   */
  name: string;
  /**
   * Additional information about the company. This can be used to store foreign IDs, references, etc.
   */
  description?: string | undefined;
  /**
   * A collection of user-defined key-value pairs that store custom metadata against the company.
   */
  tags?: { [k: string]: string } | undefined;
};

/** @internal */
export const CompanyRequestBody$inboundSchema: z.ZodType<
  CompanyRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  tags: z.record(z.string()).optional(),
});

/** @internal */
export type CompanyRequestBody$Outbound = {
  name: string;
  description?: string | undefined;
  tags?: { [k: string]: string } | undefined;
};

/** @internal */
export const CompanyRequestBody$outboundSchema: z.ZodType<
  CompanyRequestBody$Outbound,
  z.ZodTypeDef,
  CompanyRequestBody
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  tags: z.record(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompanyRequestBody$ {
  /** @deprecated use `CompanyRequestBody$inboundSchema` instead. */
  export const inboundSchema = CompanyRequestBody$inboundSchema;
  /** @deprecated use `CompanyRequestBody$outboundSchema` instead. */
  export const outboundSchema = CompanyRequestBody$outboundSchema;
  /** @deprecated use `CompanyRequestBody$Outbound` instead. */
  export type Outbound = CompanyRequestBody$Outbound;
}

export function companyRequestBodyToJSON(
  companyRequestBody: CompanyRequestBody,
): string {
  return JSON.stringify(
    CompanyRequestBody$outboundSchema.parse(companyRequestBody),
  );
}

export function companyRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CompanyRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompanyRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompanyRequestBody' from JSON`,
  );
}
