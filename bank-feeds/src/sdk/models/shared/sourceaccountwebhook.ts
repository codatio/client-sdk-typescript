/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    SourceAccountWebhookPayload,
    SourceAccountWebhookPayload$inboundSchema,
    SourceAccountWebhookPayload$Outbound,
    SourceAccountWebhookPayload$outboundSchema,
} from "./sourceaccountwebhookpayload.js";
import * as z from "zod";

export type SourceAccountWebhook = {
    /**
     * Unique identifier of the event
     */
    id?: string | undefined;
    /**
     * The type of event.
     */
    eventType?: string | undefined;
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    generatedDate?: string | undefined;
    payload?: SourceAccountWebhookPayload | undefined;
};

/** @internal */
export const SourceAccountWebhook$inboundSchema: z.ZodType<
    SourceAccountWebhook,
    z.ZodTypeDef,
    unknown
> = z.object({
    id: z.string().optional(),
    eventType: z.string().optional(),
    generatedDate: z.string().optional(),
    payload: SourceAccountWebhookPayload$inboundSchema.optional(),
});

/** @internal */
export type SourceAccountWebhook$Outbound = {
    id?: string | undefined;
    eventType?: string | undefined;
    generatedDate?: string | undefined;
    payload?: SourceAccountWebhookPayload$Outbound | undefined;
};

/** @internal */
export const SourceAccountWebhook$outboundSchema: z.ZodType<
    SourceAccountWebhook$Outbound,
    z.ZodTypeDef,
    SourceAccountWebhook
> = z.object({
    id: z.string().optional(),
    eventType: z.string().optional(),
    generatedDate: z.string().optional(),
    payload: SourceAccountWebhookPayload$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SourceAccountWebhook$ {
    /** @deprecated use `SourceAccountWebhook$inboundSchema` instead. */
    export const inboundSchema = SourceAccountWebhook$inboundSchema;
    /** @deprecated use `SourceAccountWebhook$outboundSchema` instead. */
    export const outboundSchema = SourceAccountWebhook$outboundSchema;
    /** @deprecated use `SourceAccountWebhook$Outbound` instead. */
    export type Outbound = SourceAccountWebhook$Outbound;
}
