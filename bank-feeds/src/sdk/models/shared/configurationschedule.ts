/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ConfigurationSchedule = {
  /**
   * The sync frequency.
   */
  selectedFrequency?: string | undefined;
  /**
   * The available sync frequencies.
   */
  frequencyOptions?: Array<string> | undefined;
  /**
   * The datetime in UTC you want to start syncing from.
   */
  startDate?: string | undefined;
  /**
   * The hour in which the sync is initiated.
   */
  syncHourUtc?: number | undefined;
  /**
   * The [IANA](https://www.iana.org/time-zones) time zone ID.
   */
  timeZoneIanaId?: string | undefined;
};

/** @internal */
export const ConfigurationSchedule$inboundSchema: z.ZodType<
  ConfigurationSchedule,
  z.ZodTypeDef,
  unknown
> = z.object({
  selectedFrequency: z.string().optional(),
  frequencyOptions: z.array(z.string()).optional(),
  startDate: z.string().optional(),
  syncHourUtc: z.number().int().optional(),
  timeZoneIanaId: z.string().optional(),
});

/** @internal */
export type ConfigurationSchedule$Outbound = {
  selectedFrequency?: string | undefined;
  frequencyOptions?: Array<string> | undefined;
  startDate?: string | undefined;
  syncHourUtc?: number | undefined;
  timeZoneIanaId?: string | undefined;
};

/** @internal */
export const ConfigurationSchedule$outboundSchema: z.ZodType<
  ConfigurationSchedule$Outbound,
  z.ZodTypeDef,
  ConfigurationSchedule
> = z.object({
  selectedFrequency: z.string().optional(),
  frequencyOptions: z.array(z.string()).optional(),
  startDate: z.string().optional(),
  syncHourUtc: z.number().int().optional(),
  timeZoneIanaId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConfigurationSchedule$ {
  /** @deprecated use `ConfigurationSchedule$inboundSchema` instead. */
  export const inboundSchema = ConfigurationSchedule$inboundSchema;
  /** @deprecated use `ConfigurationSchedule$outboundSchema` instead. */
  export const outboundSchema = ConfigurationSchedule$outboundSchema;
  /** @deprecated use `ConfigurationSchedule$Outbound` instead. */
  export type Outbound = ConfigurationSchedule$Outbound;
}

export function configurationScheduleToJSON(
  configurationSchedule: ConfigurationSchedule,
): string {
  return JSON.stringify(
    ConfigurationSchedule$outboundSchema.parse(configurationSchedule),
  );
}

export function configurationScheduleFromJSON(
  jsonString: string,
): SafeParseResult<ConfigurationSchedule, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConfigurationSchedule$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConfigurationSchedule' from JSON`,
  );
}
