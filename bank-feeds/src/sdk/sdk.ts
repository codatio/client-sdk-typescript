/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks/hooks.js";
import { SDKOptions, serverURLFromOptions } from "../lib/config.js";
import { HTTPClient } from "../lib/http.js";
import { ClientSDK } from "../lib/sdks.js";
import { AccountMapping } from "./accountmapping.js";
import { BankAccounts } from "./bankaccounts.js";
import { Companies } from "./companies.js";
import { CompanyInformation } from "./companyinformation.js";
import { Configuration } from "./configuration.js";
import { Connections } from "./connections.js";
import { SourceAccounts } from "./sourceaccounts.js";
import { Sync } from "./sync.js";
import { Transactions } from "./transactions.js";

export class CodatBankFeeds extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    private _companies?: Companies;
    get companies(): Companies {
        return (this._companies ??= new Companies(this.options$));
    }

    private _connections?: Connections;
    get connections(): Connections {
        return (this._connections ??= new Connections(this.options$));
    }

    private _configuration?: Configuration;
    get configuration(): Configuration {
        return (this._configuration ??= new Configuration(this.options$));
    }

    private _sync?: Sync;
    get sync(): Sync {
        return (this._sync ??= new Sync(this.options$));
    }

    private _bankAccounts?: BankAccounts;
    get bankAccounts(): BankAccounts {
        return (this._bankAccounts ??= new BankAccounts(this.options$));
    }

    private _sourceAccounts?: SourceAccounts;
    get sourceAccounts(): SourceAccounts {
        return (this._sourceAccounts ??= new SourceAccounts(this.options$));
    }

    private _accountMapping?: AccountMapping;
    get accountMapping(): AccountMapping {
        return (this._accountMapping ??= new AccountMapping(this.options$));
    }

    private _companyInformation?: CompanyInformation;
    get companyInformation(): CompanyInformation {
        return (this._companyInformation ??= new CompanyInformation(this.options$));
    }

    private _transactions?: Transactions;
    get transactions(): Transactions {
        return (this._transactions ??= new Transactions(this.options$));
    }
}
