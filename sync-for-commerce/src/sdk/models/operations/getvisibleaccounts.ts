/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetVisibleAccountsRequest = {
  /**
   * Unique identifier for your client in Codat.
   */
  clientId: string;
  /**
   * A unique 4-letter key to represent a platform in each integration.
   */
  platformKey: string;
};

/** @internal */
export const GetVisibleAccountsRequest$inboundSchema: z.ZodType<
  GetVisibleAccountsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientId: z.string(),
  platformKey: z.string(),
});

/** @internal */
export type GetVisibleAccountsRequest$Outbound = {
  clientId: string;
  platformKey: string;
};

/** @internal */
export const GetVisibleAccountsRequest$outboundSchema: z.ZodType<
  GetVisibleAccountsRequest$Outbound,
  z.ZodTypeDef,
  GetVisibleAccountsRequest
> = z.object({
  clientId: z.string(),
  platformKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetVisibleAccountsRequest$ {
  /** @deprecated use `GetVisibleAccountsRequest$inboundSchema` instead. */
  export const inboundSchema = GetVisibleAccountsRequest$inboundSchema;
  /** @deprecated use `GetVisibleAccountsRequest$outboundSchema` instead. */
  export const outboundSchema = GetVisibleAccountsRequest$outboundSchema;
  /** @deprecated use `GetVisibleAccountsRequest$Outbound` instead. */
  export type Outbound = GetVisibleAccountsRequest$Outbound;
}

export function getVisibleAccountsRequestToJSON(
  getVisibleAccountsRequest: GetVisibleAccountsRequest,
): string {
  return JSON.stringify(
    GetVisibleAccountsRequest$outboundSchema.parse(getVisibleAccountsRequest),
  );
}

export function getVisibleAccountsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetVisibleAccountsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetVisibleAccountsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetVisibleAccountsRequest' from JSON`,
  );
}
