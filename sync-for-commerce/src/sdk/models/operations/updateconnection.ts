/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type UpdateConnectionRequest = {
  /**
   * Unique identifier for a company.
   */
  companyId: string;
  /**
   * Unique identifier for a connection.
   */
  connectionId: string;
  updateConnection?: shared.UpdateConnection | undefined;
};

/** @internal */
export const UpdateConnectionRequest$inboundSchema: z.ZodType<
  UpdateConnectionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  companyId: z.string(),
  connectionId: z.string(),
  UpdateConnection: shared.UpdateConnection$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "UpdateConnection": "updateConnection",
  });
});

/** @internal */
export type UpdateConnectionRequest$Outbound = {
  companyId: string;
  connectionId: string;
  UpdateConnection?: shared.UpdateConnection$Outbound | undefined;
};

/** @internal */
export const UpdateConnectionRequest$outboundSchema: z.ZodType<
  UpdateConnectionRequest$Outbound,
  z.ZodTypeDef,
  UpdateConnectionRequest
> = z.object({
  companyId: z.string(),
  connectionId: z.string(),
  updateConnection: shared.UpdateConnection$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    updateConnection: "UpdateConnection",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateConnectionRequest$ {
  /** @deprecated use `UpdateConnectionRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateConnectionRequest$inboundSchema;
  /** @deprecated use `UpdateConnectionRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateConnectionRequest$outboundSchema;
  /** @deprecated use `UpdateConnectionRequest$Outbound` instead. */
  export type Outbound = UpdateConnectionRequest$Outbound;
}

export function updateConnectionRequestToJSON(
  updateConnectionRequest: UpdateConnectionRequest,
): string {
  return JSON.stringify(
    UpdateConnectionRequest$outboundSchema.parse(updateConnectionRequest),
  );
}

export function updateConnectionRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateConnectionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateConnectionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateConnectionRequest' from JSON`,
  );
}
