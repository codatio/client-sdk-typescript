/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import { z } from "zod";

export type CreateConnectionRequestBody = {
    /**
     * A unique 4-letter key to represent a platform in each integration. View [accounting](https://docs.codat.io/integrations/accounting/overview#platform-keys), [banking](https://docs.codat.io/integrations/banking/overview#platform-keys), and [commerce](https://docs.codat.io/integrations/commerce/overview#platform-keys) platform keys.
     */
    platformKey?: string | undefined;
};

export type CreateConnectionRequest = {
    requestBody?: CreateConnectionRequestBody | undefined;
    /**
     * Unique identifier for a company.
     */
    companyId: string;
};

export type CreateConnectionResponse = {
    /**
     * OK
     */
    connection?: shared.Connection | undefined;
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * Your API request was not properly authorized.
     */
    errorMessage?: shared.ErrorMessage | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace CreateConnectionRequestBody$ {
    export type Inbound = {
        platformKey?: string | undefined;
    };

    export const inboundSchema: z.ZodType<CreateConnectionRequestBody, z.ZodTypeDef, Inbound> = z
        .object({
            platformKey: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.platformKey === undefined ? null : { platformKey: v.platformKey }),
            };
        });

    export type Outbound = {
        platformKey?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateConnectionRequestBody> = z
        .object({
            platformKey: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.platformKey === undefined ? null : { platformKey: v.platformKey }),
            };
        });
}

/** @internal */
export namespace CreateConnectionRequest$ {
    export type Inbound = {
        RequestBody?: CreateConnectionRequestBody$.Inbound | undefined;
        companyId: string;
    };

    export const inboundSchema: z.ZodType<CreateConnectionRequest, z.ZodTypeDef, Inbound> = z
        .object({
            RequestBody: z.lazy(() => CreateConnectionRequestBody$.inboundSchema).optional(),
            companyId: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.RequestBody === undefined ? null : { requestBody: v.RequestBody }),
                companyId: v.companyId,
            };
        });

    export type Outbound = {
        RequestBody?: CreateConnectionRequestBody$.Outbound | undefined;
        companyId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateConnectionRequest> = z
        .object({
            requestBody: z.lazy(() => CreateConnectionRequestBody$.outboundSchema).optional(),
            companyId: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.requestBody === undefined ? null : { RequestBody: v.requestBody }),
                companyId: v.companyId,
            };
        });
}

/** @internal */
export namespace CreateConnectionResponse$ {
    export type Inbound = {
        Connection?: shared.Connection$.Inbound | undefined;
        ContentType: string;
        ErrorMessage?: shared.ErrorMessage$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<CreateConnectionResponse, z.ZodTypeDef, Inbound> = z
        .object({
            Connection: shared.Connection$.inboundSchema.optional(),
            ContentType: z.string(),
            ErrorMessage: shared.ErrorMessage$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                ...(v.Connection === undefined ? null : { connection: v.Connection }),
                contentType: v.ContentType,
                ...(v.ErrorMessage === undefined ? null : { errorMessage: v.ErrorMessage }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        Connection?: shared.Connection$.Outbound | undefined;
        ContentType: string;
        ErrorMessage?: shared.ErrorMessage$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateConnectionResponse> = z
        .object({
            connection: shared.Connection$.outboundSchema.optional(),
            contentType: z.string(),
            errorMessage: shared.ErrorMessage$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ...(v.connection === undefined ? null : { Connection: v.connection }),
                ContentType: v.contentType,
                ...(v.errorMessage === undefined ? null : { ErrorMessage: v.errorMessage }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
