/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type RequestSyncRequest = {
  /**
   * Unique identifier for a company.
   */
  companyId: string;
  syncToLatestArgs?: shared.SyncToLatestArgs | undefined;
};

/** @internal */
export const RequestSyncRequest$inboundSchema: z.ZodType<
  RequestSyncRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  companyId: z.string(),
  SyncToLatestArgs: shared.SyncToLatestArgs$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "SyncToLatestArgs": "syncToLatestArgs",
  });
});

/** @internal */
export type RequestSyncRequest$Outbound = {
  companyId: string;
  SyncToLatestArgs?: shared.SyncToLatestArgs$Outbound | undefined;
};

/** @internal */
export const RequestSyncRequest$outboundSchema: z.ZodType<
  RequestSyncRequest$Outbound,
  z.ZodTypeDef,
  RequestSyncRequest
> = z.object({
  companyId: z.string(),
  syncToLatestArgs: shared.SyncToLatestArgs$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    syncToLatestArgs: "SyncToLatestArgs",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestSyncRequest$ {
  /** @deprecated use `RequestSyncRequest$inboundSchema` instead. */
  export const inboundSchema = RequestSyncRequest$inboundSchema;
  /** @deprecated use `RequestSyncRequest$outboundSchema` instead. */
  export const outboundSchema = RequestSyncRequest$outboundSchema;
  /** @deprecated use `RequestSyncRequest$Outbound` instead. */
  export type Outbound = RequestSyncRequest$Outbound;
}

export function requestSyncRequestToJSON(
  requestSyncRequest: RequestSyncRequest,
): string {
  return JSON.stringify(
    RequestSyncRequest$outboundSchema.parse(requestSyncRequest),
  );
}

export function requestSyncRequestFromJSON(
  jsonString: string,
): SafeParseResult<RequestSyncRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RequestSyncRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RequestSyncRequest' from JSON`,
  );
}
