/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetConfigurationRequest = {
  /**
   * Unique identifier for a company.
   */
  companyId: string;
};

/** @internal */
export const GetConfigurationRequest$inboundSchema: z.ZodType<
  GetConfigurationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  companyId: z.string(),
});

/** @internal */
export type GetConfigurationRequest$Outbound = {
  companyId: string;
};

/** @internal */
export const GetConfigurationRequest$outboundSchema: z.ZodType<
  GetConfigurationRequest$Outbound,
  z.ZodTypeDef,
  GetConfigurationRequest
> = z.object({
  companyId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurationRequest$ {
  /** @deprecated use `GetConfigurationRequest$inboundSchema` instead. */
  export const inboundSchema = GetConfigurationRequest$inboundSchema;
  /** @deprecated use `GetConfigurationRequest$outboundSchema` instead. */
  export const outboundSchema = GetConfigurationRequest$outboundSchema;
  /** @deprecated use `GetConfigurationRequest$Outbound` instead. */
  export type Outbound = GetConfigurationRequest$Outbound;
}

export function getConfigurationRequestToJSON(
  getConfigurationRequest: GetConfigurationRequest,
): string {
  return JSON.stringify(
    GetConfigurationRequest$outboundSchema.parse(getConfigurationRequest),
  );
}

export function getConfigurationRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetConfigurationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetConfigurationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetConfigurationRequest' from JSON`,
  );
}
