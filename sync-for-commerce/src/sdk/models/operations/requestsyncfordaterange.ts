/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import { z } from "zod";

export type RequestSyncForDateRangeRequest = {
    syncRange?: shared.SyncRange | undefined;
    /**
     * Unique identifier for a company.
     */
    companyId: string;
};

export type RequestSyncForDateRangeResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * The request made is not valid.
     */
    errorMessage?: shared.ErrorMessage | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Success
     */
    syncSummary?: shared.SyncSummary | undefined;
};

/** @internal */
export namespace RequestSyncForDateRangeRequest$ {
    export type Inbound = {
        SyncRange?: shared.SyncRange$.Inbound | undefined;
        companyId: string;
    };

    export const inboundSchema: z.ZodType<RequestSyncForDateRangeRequest, z.ZodTypeDef, Inbound> = z
        .object({
            SyncRange: shared.SyncRange$.inboundSchema.optional(),
            companyId: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.SyncRange === undefined ? null : { syncRange: v.SyncRange }),
                companyId: v.companyId,
            };
        });

    export type Outbound = {
        SyncRange?: shared.SyncRange$.Outbound | undefined;
        companyId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RequestSyncForDateRangeRequest> =
        z
            .object({
                syncRange: shared.SyncRange$.outboundSchema.optional(),
                companyId: z.string(),
            })
            .transform((v) => {
                return {
                    ...(v.syncRange === undefined ? null : { SyncRange: v.syncRange }),
                    companyId: v.companyId,
                };
            });
}

/** @internal */
export namespace RequestSyncForDateRangeResponse$ {
    export type Inbound = {
        ContentType: string;
        ErrorMessage?: shared.ErrorMessage$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
        SyncSummary?: shared.SyncSummary$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<RequestSyncForDateRangeResponse, z.ZodTypeDef, Inbound> =
        z
            .object({
                ContentType: z.string(),
                ErrorMessage: shared.ErrorMessage$.inboundSchema.optional(),
                StatusCode: z.number().int(),
                RawResponse: z.instanceof(Response),
                SyncSummary: shared.SyncSummary$.inboundSchema.optional(),
            })
            .transform((v) => {
                return {
                    contentType: v.ContentType,
                    ...(v.ErrorMessage === undefined ? null : { errorMessage: v.ErrorMessage }),
                    statusCode: v.StatusCode,
                    rawResponse: v.RawResponse,
                    ...(v.SyncSummary === undefined ? null : { syncSummary: v.SyncSummary }),
                };
            });

    export type Outbound = {
        ContentType: string;
        ErrorMessage?: shared.ErrorMessage$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
        SyncSummary?: shared.SyncSummary$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestSyncForDateRangeResponse
    > = z
        .object({
            contentType: z.string(),
            errorMessage: shared.ErrorMessage$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            syncSummary: shared.SyncSummary$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.errorMessage === undefined ? null : { ErrorMessage: v.errorMessage }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.syncSummary === undefined ? null : { SyncSummary: v.syncSummary }),
            };
        });
}
