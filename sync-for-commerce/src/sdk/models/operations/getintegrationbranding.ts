/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import { z } from "zod";

export type GetIntegrationBrandingRequest = {
    /**
     * A unique 4-letter key to represent a platform in each integration. View [accounting](https://docs.codat.io/integrations/accounting/overview#platform-keys), [banking](https://docs.codat.io/integrations/banking/overview#platform-keys), and [commerce](https://docs.codat.io/integrations/commerce/overview#platform-keys) platform keys.
     */
    platformKey: string;
};

export type GetIntegrationBrandingResponse = {
    /**
     * Success
     */
    branding?: shared.Branding | undefined;
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * Your API request was not properly authorized.
     */
    errorMessage?: shared.ErrorMessage | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace GetIntegrationBrandingRequest$ {
    export type Inbound = {
        platformKey: string;
    };

    export const inboundSchema: z.ZodType<GetIntegrationBrandingRequest, z.ZodTypeDef, Inbound> = z
        .object({
            platformKey: z.string(),
        })
        .transform((v) => {
            return {
                platformKey: v.platformKey,
            };
        });

    export type Outbound = {
        platformKey: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetIntegrationBrandingRequest> =
        z
            .object({
                platformKey: z.string(),
            })
            .transform((v) => {
                return {
                    platformKey: v.platformKey,
                };
            });
}

/** @internal */
export namespace GetIntegrationBrandingResponse$ {
    export type Inbound = {
        Branding?: shared.Branding$.Inbound | undefined;
        ContentType: string;
        ErrorMessage?: shared.ErrorMessage$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<GetIntegrationBrandingResponse, z.ZodTypeDef, Inbound> = z
        .object({
            Branding: shared.Branding$.inboundSchema.optional(),
            ContentType: z.string(),
            ErrorMessage: shared.ErrorMessage$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                ...(v.Branding === undefined ? null : { branding: v.Branding }),
                contentType: v.ContentType,
                ...(v.ErrorMessage === undefined ? null : { errorMessage: v.ErrorMessage }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        Branding?: shared.Branding$.Outbound | undefined;
        ContentType: string;
        ErrorMessage?: shared.ErrorMessage$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetIntegrationBrandingResponse> =
        z
            .object({
                branding: shared.Branding$.outboundSchema.optional(),
                contentType: z.string(),
                errorMessage: shared.ErrorMessage$.outboundSchema.optional(),
                statusCode: z.number().int(),
                rawResponse: z.instanceof(Response).transform(() => {
                    throw new Error("Response cannot be serialized");
                }),
            })
            .transform((v) => {
                return {
                    ...(v.branding === undefined ? null : { Branding: v.branding }),
                    ContentType: v.contentType,
                    ...(v.errorMessage === undefined ? null : { ErrorMessage: v.errorMessage }),
                    StatusCode: v.statusCode,
                    RawResponse: v.rawResponse,
                };
            });
}
