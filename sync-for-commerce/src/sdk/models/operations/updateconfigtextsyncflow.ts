/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import { z } from "zod";

export type UpdateConfigTextSyncFlowRequest = {
    requestBody?: Record<string, shared.Localization> | undefined;
    /**
     * Localization identifier for English (US) or French.
     */
    locale: shared.Locale;
};

export type UpdateConfigTextSyncFlowResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * The request made is not valid.
     */
    errorMessage?: shared.ErrorMessage | undefined;
    /**
     * Success
     */
    localizationInfo?: Record<string, shared.Localization> | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace UpdateConfigTextSyncFlowRequest$ {
    export type Inbound = {
        RequestBody?: Record<string, shared.Localization$.Inbound> | undefined;
        locale: shared.Locale;
    };

    export const inboundSchema: z.ZodType<UpdateConfigTextSyncFlowRequest, z.ZodTypeDef, Inbound> =
        z
            .object({
                RequestBody: z.record(shared.Localization$.inboundSchema).optional(),
                locale: shared.Locale$,
            })
            .transform((v) => {
                return {
                    ...(v.RequestBody === undefined ? null : { requestBody: v.RequestBody }),
                    locale: v.locale,
                };
            });

    export type Outbound = {
        RequestBody?: Record<string, shared.Localization$.Outbound> | undefined;
        locale: shared.Locale;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UpdateConfigTextSyncFlowRequest
    > = z
        .object({
            requestBody: z.record(shared.Localization$.outboundSchema).optional(),
            locale: shared.Locale$,
        })
        .transform((v) => {
            return {
                ...(v.requestBody === undefined ? null : { RequestBody: v.requestBody }),
                locale: v.locale,
            };
        });
}

/** @internal */
export namespace UpdateConfigTextSyncFlowResponse$ {
    export type Inbound = {
        ContentType: string;
        ErrorMessage?: shared.ErrorMessage$.Inbound | undefined;
        LocalizationInfo?: Record<string, shared.Localization$.Inbound> | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<UpdateConfigTextSyncFlowResponse, z.ZodTypeDef, Inbound> =
        z
            .object({
                ContentType: z.string(),
                ErrorMessage: shared.ErrorMessage$.inboundSchema.optional(),
                LocalizationInfo: z.record(shared.Localization$.inboundSchema).optional(),
                StatusCode: z.number().int(),
                RawResponse: z.instanceof(Response),
            })
            .transform((v) => {
                return {
                    contentType: v.ContentType,
                    ...(v.ErrorMessage === undefined ? null : { errorMessage: v.ErrorMessage }),
                    ...(v.LocalizationInfo === undefined
                        ? null
                        : { localizationInfo: v.LocalizationInfo }),
                    statusCode: v.StatusCode,
                    rawResponse: v.RawResponse,
                };
            });

    export type Outbound = {
        ContentType: string;
        ErrorMessage?: shared.ErrorMessage$.Outbound | undefined;
        LocalizationInfo?: Record<string, shared.Localization$.Outbound> | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UpdateConfigTextSyncFlowResponse
    > = z
        .object({
            contentType: z.string(),
            errorMessage: shared.ErrorMessage$.outboundSchema.optional(),
            localizationInfo: z.record(shared.Localization$.outboundSchema).optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.errorMessage === undefined ? null : { ErrorMessage: v.errorMessage }),
                ...(v.localizationInfo === undefined
                    ? null
                    : { LocalizationInfo: v.localizationInfo }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
