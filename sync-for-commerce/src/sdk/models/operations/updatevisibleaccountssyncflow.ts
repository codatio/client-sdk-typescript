/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import { z } from "zod";

export type UpdateVisibleAccountsSyncFlowRequest = {
    visibleAccounts?: shared.VisibleAccounts | undefined;
    /**
     * A unique 4-letter key to represent a platform in each integration. View [accounting](https://docs.codat.io/integrations/accounting/overview#platform-keys), [banking](https://docs.codat.io/integrations/banking/overview#platform-keys), and [commerce](https://docs.codat.io/integrations/commerce/overview#platform-keys) platform keys.
     */
    platformKey: string;
};

export type UpdateVisibleAccountsSyncFlowResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * The request made is not valid.
     */
    errorMessage?: shared.ErrorMessage | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Success
     */
    visibleAccounts?: shared.VisibleAccounts | undefined;
};

/** @internal */
export namespace UpdateVisibleAccountsSyncFlowRequest$ {
    export type Inbound = {
        VisibleAccounts?: shared.VisibleAccounts$.Inbound | undefined;
        platformKey: string;
    };

    export const inboundSchema: z.ZodType<
        UpdateVisibleAccountsSyncFlowRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            VisibleAccounts: shared.VisibleAccounts$.inboundSchema.optional(),
            platformKey: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.VisibleAccounts === undefined
                    ? null
                    : { visibleAccounts: v.VisibleAccounts }),
                platformKey: v.platformKey,
            };
        });

    export type Outbound = {
        VisibleAccounts?: shared.VisibleAccounts$.Outbound | undefined;
        platformKey: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UpdateVisibleAccountsSyncFlowRequest
    > = z
        .object({
            visibleAccounts: shared.VisibleAccounts$.outboundSchema.optional(),
            platformKey: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.visibleAccounts === undefined
                    ? null
                    : { VisibleAccounts: v.visibleAccounts }),
                platformKey: v.platformKey,
            };
        });
}

/** @internal */
export namespace UpdateVisibleAccountsSyncFlowResponse$ {
    export type Inbound = {
        ContentType: string;
        ErrorMessage?: shared.ErrorMessage$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
        VisibleAccounts?: shared.VisibleAccounts$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        UpdateVisibleAccountsSyncFlowResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            ErrorMessage: shared.ErrorMessage$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            VisibleAccounts: shared.VisibleAccounts$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.ErrorMessage === undefined ? null : { errorMessage: v.ErrorMessage }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.VisibleAccounts === undefined
                    ? null
                    : { visibleAccounts: v.VisibleAccounts }),
            };
        });

    export type Outbound = {
        ContentType: string;
        ErrorMessage?: shared.ErrorMessage$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
        VisibleAccounts?: shared.VisibleAccounts$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UpdateVisibleAccountsSyncFlowResponse
    > = z
        .object({
            contentType: z.string(),
            errorMessage: shared.ErrorMessage$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            visibleAccounts: shared.VisibleAccounts$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.errorMessage === undefined ? null : { ErrorMessage: v.errorMessage }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.visibleAccounts === undefined
                    ? null
                    : { VisibleAccounts: v.visibleAccounts }),
            };
        });
}
