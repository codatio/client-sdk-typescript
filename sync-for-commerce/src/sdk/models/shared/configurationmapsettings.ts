/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The format commerce transactions are stored in the accounting software.
 */
export const OutputFormat = {
  JournalEntry: "JournalEntry",
} as const;
/**
 * The format commerce transactions are stored in the accounting software.
 */
export type OutputFormat = ClosedEnum<typeof OutputFormat>;

export type ConfigurationMapSettings = {
  /**
   * The format commerce transactions are stored in the accounting software.
   */
  outputFormat?: OutputFormat | undefined;
};

/** @internal */
export const OutputFormat$inboundSchema: z.ZodNativeEnum<typeof OutputFormat> =
  z.nativeEnum(OutputFormat);

/** @internal */
export const OutputFormat$outboundSchema: z.ZodNativeEnum<typeof OutputFormat> =
  OutputFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputFormat$ {
  /** @deprecated use `OutputFormat$inboundSchema` instead. */
  export const inboundSchema = OutputFormat$inboundSchema;
  /** @deprecated use `OutputFormat$outboundSchema` instead. */
  export const outboundSchema = OutputFormat$outboundSchema;
}

/** @internal */
export const ConfigurationMapSettings$inboundSchema: z.ZodType<
  ConfigurationMapSettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  outputFormat: OutputFormat$inboundSchema.optional(),
});

/** @internal */
export type ConfigurationMapSettings$Outbound = {
  outputFormat?: string | undefined;
};

/** @internal */
export const ConfigurationMapSettings$outboundSchema: z.ZodType<
  ConfigurationMapSettings$Outbound,
  z.ZodTypeDef,
  ConfigurationMapSettings
> = z.object({
  outputFormat: OutputFormat$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConfigurationMapSettings$ {
  /** @deprecated use `ConfigurationMapSettings$inboundSchema` instead. */
  export const inboundSchema = ConfigurationMapSettings$inboundSchema;
  /** @deprecated use `ConfigurationMapSettings$outboundSchema` instead. */
  export const outboundSchema = ConfigurationMapSettings$outboundSchema;
  /** @deprecated use `ConfigurationMapSettings$Outbound` instead. */
  export type Outbound = ConfigurationMapSettings$Outbound;
}

export function configurationMapSettingsToJSON(
  configurationMapSettings: ConfigurationMapSettings,
): string {
  return JSON.stringify(
    ConfigurationMapSettings$outboundSchema.parse(configurationMapSettings),
  );
}

export function configurationMapSettingsFromJSON(
  jsonString: string,
): SafeParseResult<ConfigurationMapSettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConfigurationMapSettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConfigurationMapSettings' from JSON`,
  );
}
