/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ImageReference, ImageReference$ } from "./imagereference";
import { z } from "zod";

export type BrandingImage = {
    /**
     * Image reference.
     */
    image?: ImageReference | undefined;
};

/** @internal */
export namespace BrandingImage$ {
    export type Inbound = {
        image?: ImageReference$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<BrandingImage, z.ZodTypeDef, Inbound> = z
        .object({
            image: ImageReference$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.image === undefined ? null : { image: v.image }),
            };
        });

    export type Outbound = {
        image?: ImageReference$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, BrandingImage> = z
        .object({
            image: ImageReference$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.image === undefined ? null : { image: v.image }),
            };
        });
}
