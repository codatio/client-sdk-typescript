/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AccountOption, AccountOption$ } from "./accountoption";
import { z } from "zod";

/**
 * G/L account object for configuration.
 */
export type ConfigAccount = {
    /**
     * Object containing account options.
     */
    accountOptions?: Array<AccountOption> | null | undefined;
    /**
     * Descriprtive text for sales configuration section.
     */
    descriptionText?: string | null | undefined;
    /**
     * Label text for sales configuration section.
     */
    labelText?: string | null | undefined;
    /**
     * Required section to be configured for sync.
     */
    required?: boolean | undefined;
    /**
     * Selected account id from the list of available accounts.
     */
    selectedAccountId?: string | null | undefined;
};

/** @internal */
export namespace ConfigAccount$ {
    export type Inbound = {
        accountOptions?: Array<AccountOption$.Inbound> | null | undefined;
        descriptionText?: string | null | undefined;
        labelText?: string | null | undefined;
        required?: boolean | undefined;
        selectedAccountId?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<ConfigAccount, z.ZodTypeDef, Inbound> = z
        .object({
            accountOptions: z.nullable(z.array(AccountOption$.inboundSchema)).optional(),
            descriptionText: z.nullable(z.string()).optional(),
            labelText: z.nullable(z.string()).optional(),
            required: z.boolean().optional(),
            selectedAccountId: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.accountOptions === undefined ? null : { accountOptions: v.accountOptions }),
                ...(v.descriptionText === undefined
                    ? null
                    : { descriptionText: v.descriptionText }),
                ...(v.labelText === undefined ? null : { labelText: v.labelText }),
                ...(v.required === undefined ? null : { required: v.required }),
                ...(v.selectedAccountId === undefined
                    ? null
                    : { selectedAccountId: v.selectedAccountId }),
            };
        });

    export type Outbound = {
        accountOptions?: Array<AccountOption$.Outbound> | null | undefined;
        descriptionText?: string | null | undefined;
        labelText?: string | null | undefined;
        required?: boolean | undefined;
        selectedAccountId?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ConfigAccount> = z
        .object({
            accountOptions: z.nullable(z.array(AccountOption$.outboundSchema)).optional(),
            descriptionText: z.nullable(z.string()).optional(),
            labelText: z.nullable(z.string()).optional(),
            required: z.boolean().optional(),
            selectedAccountId: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.accountOptions === undefined ? null : { accountOptions: v.accountOptions }),
                ...(v.descriptionText === undefined
                    ? null
                    : { descriptionText: v.descriptionText }),
                ...(v.labelText === undefined ? null : { labelText: v.labelText }),
                ...(v.required === undefined ? null : { required: v.required }),
                ...(v.selectedAccountId === undefined
                    ? null
                    : { selectedAccountId: v.selectedAccountId }),
            };
        });
}
