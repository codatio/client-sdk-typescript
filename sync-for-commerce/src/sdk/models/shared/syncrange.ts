/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type DateRange = {
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    start: string;
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    finish: string;
};

export type SyncRange = {
    dateRange: DateRange;
};

/** @internal */
export const DateRange$inboundSchema: z.ZodType<DateRange, z.ZodTypeDef, unknown> = z.object({
    start: z.string(),
    finish: z.string(),
});

/** @internal */
export type DateRange$Outbound = {
    start: string;
    finish: string;
};

/** @internal */
export const DateRange$outboundSchema: z.ZodType<DateRange$Outbound, z.ZodTypeDef, DateRange> =
    z.object({
        start: z.string(),
        finish: z.string(),
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DateRange$ {
    /** @deprecated use `DateRange$inboundSchema` instead. */
    export const inboundSchema = DateRange$inboundSchema;
    /** @deprecated use `DateRange$outboundSchema` instead. */
    export const outboundSchema = DateRange$outboundSchema;
    /** @deprecated use `DateRange$Outbound` instead. */
    export type Outbound = DateRange$Outbound;
}

/** @internal */
export const SyncRange$inboundSchema: z.ZodType<SyncRange, z.ZodTypeDef, unknown> = z.object({
    dateRange: z.lazy(() => DateRange$inboundSchema),
});

/** @internal */
export type SyncRange$Outbound = {
    dateRange: DateRange$Outbound;
};

/** @internal */
export const SyncRange$outboundSchema: z.ZodType<SyncRange$Outbound, z.ZodTypeDef, SyncRange> =
    z.object({
        dateRange: z.lazy(() => DateRange$outboundSchema),
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SyncRange$ {
    /** @deprecated use `SyncRange$inboundSchema` instead. */
    export const inboundSchema = SyncRange$inboundSchema;
    /** @deprecated use `SyncRange$outboundSchema` instead. */
    export const outboundSchema = SyncRange$outboundSchema;
    /** @deprecated use `SyncRange$Outbound` instead. */
    export type Outbound = SyncRange$Outbound;
}
