/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type DateRange = {
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    finish: string;
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    start: string;
};

export type SyncRange = {
    dateRange: DateRange;
};

/** @internal */
export namespace DateRange$ {
    export type Inbound = {
        finish: string;
        start: string;
    };

    export const inboundSchema: z.ZodType<DateRange, z.ZodTypeDef, Inbound> = z
        .object({
            finish: z.string(),
            start: z.string(),
        })
        .transform((v) => {
            return {
                finish: v.finish,
                start: v.start,
            };
        });

    export type Outbound = {
        finish: string;
        start: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DateRange> = z
        .object({
            finish: z.string(),
            start: z.string(),
        })
        .transform((v) => {
            return {
                finish: v.finish,
                start: v.start,
            };
        });
}

/** @internal */
export namespace SyncRange$ {
    export type Inbound = {
        dateRange: DateRange$.Inbound;
    };

    export const inboundSchema: z.ZodType<SyncRange, z.ZodTypeDef, Inbound> = z
        .object({
            dateRange: z.lazy(() => DateRange$.inboundSchema),
        })
        .transform((v) => {
            return {
                dateRange: v.dateRange,
            };
        });

    export type Outbound = {
        dateRange: DateRange$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SyncRange> = z
        .object({
            dateRange: z.lazy(() => DateRange$.outboundSchema),
        })
        .transform((v) => {
            return {
                dateRange: v.dateRange,
            };
        });
}
