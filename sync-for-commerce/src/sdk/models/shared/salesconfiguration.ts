/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    AccountConfiguration,
    AccountConfiguration$inboundSchema,
    AccountConfiguration$Outbound,
    AccountConfiguration$outboundSchema,
} from "./accountconfiguration.js";
import {
    Grouping,
    Grouping$inboundSchema,
    Grouping$Outbound,
    Grouping$outboundSchema,
} from "./grouping.js";
import {
    InvoiceStatus,
    InvoiceStatus$inboundSchema,
    InvoiceStatus$Outbound,
    InvoiceStatus$outboundSchema,
} from "./invoicestatus.js";
import {
    NewTaxRates,
    NewTaxRates$inboundSchema,
    NewTaxRates$Outbound,
    NewTaxRates$outboundSchema,
} from "./newtaxrates.js";
import {
    SalesCustomer,
    SalesCustomer$inboundSchema,
    SalesCustomer$Outbound,
    SalesCustomer$outboundSchema,
} from "./salescustomer.js";
import {
    TaxRateAmount,
    TaxRateAmount$inboundSchema,
    TaxRateAmount$Outbound,
    TaxRateAmount$outboundSchema,
} from "./taxrateamount.js";
import * as z from "zod";

export type SalesConfiguration = {
    /**
     * Boolean indicator for syncing sales.
     */
    syncSales?: boolean | undefined;
    accounts?: { [k: string]: AccountConfiguration } | null | undefined;
    invoiceStatus?: InvoiceStatus | undefined;
    salesCustomer?: SalesCustomer | undefined;
    taxRates?: { [k: string]: TaxRateAmount } | null | undefined;
    newTaxRates?: NewTaxRates | undefined;
    grouping?: Grouping | undefined;
};

/** @internal */
export const SalesConfiguration$inboundSchema: z.ZodType<
    SalesConfiguration,
    z.ZodTypeDef,
    unknown
> = z.object({
    syncSales: z.boolean().optional(),
    accounts: z.nullable(z.record(AccountConfiguration$inboundSchema)).optional(),
    invoiceStatus: InvoiceStatus$inboundSchema.optional(),
    salesCustomer: SalesCustomer$inboundSchema.optional(),
    taxRates: z.nullable(z.record(TaxRateAmount$inboundSchema)).optional(),
    newTaxRates: NewTaxRates$inboundSchema.optional(),
    grouping: Grouping$inboundSchema.optional(),
});

/** @internal */
export type SalesConfiguration$Outbound = {
    syncSales?: boolean | undefined;
    accounts?: { [k: string]: AccountConfiguration$Outbound } | null | undefined;
    invoiceStatus?: InvoiceStatus$Outbound | undefined;
    salesCustomer?: SalesCustomer$Outbound | undefined;
    taxRates?: { [k: string]: TaxRateAmount$Outbound } | null | undefined;
    newTaxRates?: NewTaxRates$Outbound | undefined;
    grouping?: Grouping$Outbound | undefined;
};

/** @internal */
export const SalesConfiguration$outboundSchema: z.ZodType<
    SalesConfiguration$Outbound,
    z.ZodTypeDef,
    SalesConfiguration
> = z.object({
    syncSales: z.boolean().optional(),
    accounts: z.nullable(z.record(AccountConfiguration$outboundSchema)).optional(),
    invoiceStatus: InvoiceStatus$outboundSchema.optional(),
    salesCustomer: SalesCustomer$outboundSchema.optional(),
    taxRates: z.nullable(z.record(TaxRateAmount$outboundSchema)).optional(),
    newTaxRates: NewTaxRates$outboundSchema.optional(),
    grouping: Grouping$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SalesConfiguration$ {
    /** @deprecated use `SalesConfiguration$inboundSchema` instead. */
    export const inboundSchema = SalesConfiguration$inboundSchema;
    /** @deprecated use `SalesConfiguration$outboundSchema` instead. */
    export const outboundSchema = SalesConfiguration$outboundSchema;
    /** @deprecated use `SalesConfiguration$Outbound` instead. */
    export type Outbound = SalesConfiguration$Outbound;
}
