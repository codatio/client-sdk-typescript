/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TaxRateMapping = {
  /**
   * Selected tax component id from the list of tax components on the commerce software.
   */
  selectedCommerceTaxRateIds?: Array<string> | null | undefined;
  /**
   * Selected tax rate id from the list of tax rates on the accounting software.
   */
  selectedAccountingTaxRateId?: string | null | undefined;
};

/** @internal */
export const TaxRateMapping$inboundSchema: z.ZodType<
  TaxRateMapping,
  z.ZodTypeDef,
  unknown
> = z.object({
  selectedCommerceTaxRateIds: z.nullable(z.array(z.string())).optional(),
  selectedAccountingTaxRateId: z.nullable(z.string()).optional(),
});

/** @internal */
export type TaxRateMapping$Outbound = {
  selectedCommerceTaxRateIds?: Array<string> | null | undefined;
  selectedAccountingTaxRateId?: string | null | undefined;
};

/** @internal */
export const TaxRateMapping$outboundSchema: z.ZodType<
  TaxRateMapping$Outbound,
  z.ZodTypeDef,
  TaxRateMapping
> = z.object({
  selectedCommerceTaxRateIds: z.nullable(z.array(z.string())).optional(),
  selectedAccountingTaxRateId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaxRateMapping$ {
  /** @deprecated use `TaxRateMapping$inboundSchema` instead. */
  export const inboundSchema = TaxRateMapping$inboundSchema;
  /** @deprecated use `TaxRateMapping$outboundSchema` instead. */
  export const outboundSchema = TaxRateMapping$outboundSchema;
  /** @deprecated use `TaxRateMapping$Outbound` instead. */
  export type Outbound = TaxRateMapping$Outbound;
}

export function taxRateMappingToJSON(taxRateMapping: TaxRateMapping): string {
  return JSON.stringify(TaxRateMapping$outboundSchema.parse(taxRateMapping));
}

export function taxRateMappingFromJSON(
  jsonString: string,
): SafeParseResult<TaxRateMapping, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaxRateMapping$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaxRateMapping' from JSON`,
  );
}
