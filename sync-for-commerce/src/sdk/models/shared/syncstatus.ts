/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    Connection,
    Connection$inboundSchema,
    Connection$Outbound,
    Connection$outboundSchema,
} from "./connection.js";
import * as z from "zod";

/**
 * The status of syncing for a company and its connections.
 */
export type SyncStatus = {
    companyId?: any | undefined;
    /**
     * Unique identifier for the sync in Codat.
     */
    commerceSyncId?: string | undefined;
    /**
     * Unique identifier for the sync in Codat.
     */
    syncId?: string | undefined;
    /**
     * Numerical status code sync of the company data.
     */
    syncStatusCode?: number | undefined;
    /**
     * Status of the sync of the company data. This is linked to status code.
     */
    syncStatus?: string | null | undefined;
    /**
     * Friendly error message for the sync operation.
     */
    errorMessage?: string | null | undefined;
    /**
     * Exception message for the sync operation.
     */
    syncExceptionMessage?: string | null | undefined;
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    syncUtc?: string | undefined;
    /**
     * Boolean indicator for data being pushed during a sync operation.
     */
    dataPushed?: boolean | undefined;
    /**
     * Array of containing objects data connection information for the company.
     */
    dataConnections?: Array<Connection> | null | undefined;
};

/** @internal */
export const SyncStatus$inboundSchema: z.ZodType<SyncStatus, z.ZodTypeDef, unknown> = z.object({
    companyId: z.any().optional(),
    commerceSyncId: z.string().optional(),
    syncId: z.string().optional(),
    syncStatusCode: z.number().int().optional(),
    syncStatus: z.nullable(z.string()).optional(),
    errorMessage: z.nullable(z.string()).optional(),
    syncExceptionMessage: z.nullable(z.string()).optional(),
    syncUtc: z.string().optional(),
    dataPushed: z.boolean().optional(),
    dataConnections: z.nullable(z.array(Connection$inboundSchema)).optional(),
});

/** @internal */
export type SyncStatus$Outbound = {
    companyId?: any | undefined;
    commerceSyncId?: string | undefined;
    syncId?: string | undefined;
    syncStatusCode?: number | undefined;
    syncStatus?: string | null | undefined;
    errorMessage?: string | null | undefined;
    syncExceptionMessage?: string | null | undefined;
    syncUtc?: string | undefined;
    dataPushed?: boolean | undefined;
    dataConnections?: Array<Connection$Outbound> | null | undefined;
};

/** @internal */
export const SyncStatus$outboundSchema: z.ZodType<SyncStatus$Outbound, z.ZodTypeDef, SyncStatus> =
    z.object({
        companyId: z.any().optional(),
        commerceSyncId: z.string().optional(),
        syncId: z.string().optional(),
        syncStatusCode: z.number().int().optional(),
        syncStatus: z.nullable(z.string()).optional(),
        errorMessage: z.nullable(z.string()).optional(),
        syncExceptionMessage: z.nullable(z.string()).optional(),
        syncUtc: z.string().optional(),
        dataPushed: z.boolean().optional(),
        dataConnections: z.nullable(z.array(Connection$outboundSchema)).optional(),
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SyncStatus$ {
    /** @deprecated use `SyncStatus$inboundSchema` instead. */
    export const inboundSchema = SyncStatus$inboundSchema;
    /** @deprecated use `SyncStatus$outboundSchema` instead. */
    export const outboundSchema = SyncStatus$outboundSchema;
    /** @deprecated use `SyncStatus$Outbound` instead. */
    export type Outbound = SyncStatus$Outbound;
}
