/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Connection, Connection$ } from "./connection";
import { z } from "zod";

export type SyncDateRangeUtc = {
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    finish?: string | undefined;
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    start?: string | undefined;
};

export type SyncSummary = {
    /**
     * Unique identifier for the sync in Codat.
     */
    commerceSyncId?: string | undefined;
    /**
     * Unique identifier for your SMB in Codat.
     */
    companyId?: string | undefined;
    /**
     * Array of containing objects data connection information for the company.
     */
    dataConnections?: Array<Connection> | null | undefined;
    /**
     * Boolean indicator for data being pushed during a sync operation.
     */
    dataPushed?: boolean | undefined;
    /**
     * Friendly error message for the sync operation.
     */
    errorMessage?: string | null | undefined;
    syncDateRangeUtc?: SyncDateRangeUtc | undefined;
    /**
     * Exception message for the sync operation.
     */
    syncExceptionMessage?: string | null | undefined;
    /**
     * Status of the sync of the company data. This is linked to status code.
     */
    syncStatus?: string | null | undefined;
    /**
     * Numerical status code sync of the company data.
     */
    syncStatusCode?: number | undefined;
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    syncUtc?: string | undefined;
};

/** @internal */
export namespace SyncDateRangeUtc$ {
    export type Inbound = {
        finish?: string | undefined;
        start?: string | undefined;
    };

    export const inboundSchema: z.ZodType<SyncDateRangeUtc, z.ZodTypeDef, Inbound> = z
        .object({
            finish: z.string().optional(),
            start: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.finish === undefined ? null : { finish: v.finish }),
                ...(v.start === undefined ? null : { start: v.start }),
            };
        });

    export type Outbound = {
        finish?: string | undefined;
        start?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SyncDateRangeUtc> = z
        .object({
            finish: z.string().optional(),
            start: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.finish === undefined ? null : { finish: v.finish }),
                ...(v.start === undefined ? null : { start: v.start }),
            };
        });
}

/** @internal */
export namespace SyncSummary$ {
    export type Inbound = {
        commerceSyncId?: string | undefined;
        companyId?: string | undefined;
        dataConnections?: Array<Connection$.Inbound> | null | undefined;
        dataPushed?: boolean | undefined;
        errorMessage?: string | null | undefined;
        syncDateRangeUtc?: SyncDateRangeUtc$.Inbound | undefined;
        syncExceptionMessage?: string | null | undefined;
        syncStatus?: string | null | undefined;
        syncStatusCode?: number | undefined;
        syncUtc?: string | undefined;
    };

    export const inboundSchema: z.ZodType<SyncSummary, z.ZodTypeDef, Inbound> = z
        .object({
            commerceSyncId: z.string().optional(),
            companyId: z.string().optional(),
            dataConnections: z.nullable(z.array(Connection$.inboundSchema)).optional(),
            dataPushed: z.boolean().optional(),
            errorMessage: z.nullable(z.string()).optional(),
            syncDateRangeUtc: z.lazy(() => SyncDateRangeUtc$.inboundSchema).optional(),
            syncExceptionMessage: z.nullable(z.string()).optional(),
            syncStatus: z.nullable(z.string()).optional(),
            syncStatusCode: z.number().int().optional(),
            syncUtc: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.commerceSyncId === undefined ? null : { commerceSyncId: v.commerceSyncId }),
                ...(v.companyId === undefined ? null : { companyId: v.companyId }),
                ...(v.dataConnections === undefined
                    ? null
                    : { dataConnections: v.dataConnections }),
                ...(v.dataPushed === undefined ? null : { dataPushed: v.dataPushed }),
                ...(v.errorMessage === undefined ? null : { errorMessage: v.errorMessage }),
                ...(v.syncDateRangeUtc === undefined
                    ? null
                    : { syncDateRangeUtc: v.syncDateRangeUtc }),
                ...(v.syncExceptionMessage === undefined
                    ? null
                    : { syncExceptionMessage: v.syncExceptionMessage }),
                ...(v.syncStatus === undefined ? null : { syncStatus: v.syncStatus }),
                ...(v.syncStatusCode === undefined ? null : { syncStatusCode: v.syncStatusCode }),
                ...(v.syncUtc === undefined ? null : { syncUtc: v.syncUtc }),
            };
        });

    export type Outbound = {
        commerceSyncId?: string | undefined;
        companyId?: string | undefined;
        dataConnections?: Array<Connection$.Outbound> | null | undefined;
        dataPushed?: boolean | undefined;
        errorMessage?: string | null | undefined;
        syncDateRangeUtc?: SyncDateRangeUtc$.Outbound | undefined;
        syncExceptionMessage?: string | null | undefined;
        syncStatus?: string | null | undefined;
        syncStatusCode?: number | undefined;
        syncUtc?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SyncSummary> = z
        .object({
            commerceSyncId: z.string().optional(),
            companyId: z.string().optional(),
            dataConnections: z.nullable(z.array(Connection$.outboundSchema)).optional(),
            dataPushed: z.boolean().optional(),
            errorMessage: z.nullable(z.string()).optional(),
            syncDateRangeUtc: z.lazy(() => SyncDateRangeUtc$.outboundSchema).optional(),
            syncExceptionMessage: z.nullable(z.string()).optional(),
            syncStatus: z.nullable(z.string()).optional(),
            syncStatusCode: z.number().int().optional(),
            syncUtc: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.commerceSyncId === undefined ? null : { commerceSyncId: v.commerceSyncId }),
                ...(v.companyId === undefined ? null : { companyId: v.companyId }),
                ...(v.dataConnections === undefined
                    ? null
                    : { dataConnections: v.dataConnections }),
                ...(v.dataPushed === undefined ? null : { dataPushed: v.dataPushed }),
                ...(v.errorMessage === undefined ? null : { errorMessage: v.errorMessage }),
                ...(v.syncDateRangeUtc === undefined
                    ? null
                    : { syncDateRangeUtc: v.syncDateRangeUtc }),
                ...(v.syncExceptionMessage === undefined
                    ? null
                    : { syncExceptionMessage: v.syncExceptionMessage }),
                ...(v.syncStatus === undefined ? null : { syncStatus: v.syncStatus }),
                ...(v.syncStatusCode === undefined ? null : { syncStatusCode: v.syncStatusCode }),
                ...(v.syncUtc === undefined ? null : { syncUtc: v.syncUtc }),
            };
        });
}
