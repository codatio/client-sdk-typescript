/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Connection,
  Connection$inboundSchema,
  Connection$Outbound,
  Connection$outboundSchema,
} from "./connection.js";

export type SyncDateRangeUtc = {
  /**
   * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
   *
   * @remarks
   *
   * ```
   * 2020-10-08T22:40:50Z
   * 2021-01-01T00:00:00
   * ```
   *
   * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
   *
   * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
   * - Unqualified local time: `2021-11-15T01:00:00`
   * - UTC time offsets: `2021-11-15T01:00:00-05:00`
   *
   * > Time zones
   * >
   * > Not all dates from Codat will contain information about time zones.
   * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
   */
  start?: string | undefined;
  /**
   * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
   *
   * @remarks
   *
   * ```
   * 2020-10-08T22:40:50Z
   * 2021-01-01T00:00:00
   * ```
   *
   * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
   *
   * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
   * - Unqualified local time: `2021-11-15T01:00:00`
   * - UTC time offsets: `2021-11-15T01:00:00-05:00`
   *
   * > Time zones
   * >
   * > Not all dates from Codat will contain information about time zones.
   * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
   */
  finish?: string | undefined;
};

export type SyncSummary = {
  syncDateRangeUtc?: SyncDateRangeUtc | undefined;
  /**
   * Unique identifier for your SMB in Codat.
   */
  companyId?: string | undefined;
  /**
   * Unique identifier for the sync in Codat.
   */
  commerceSyncId?: string | undefined;
  /**
   * Numerical status code sync of the company data.
   */
  syncStatusCode?: number | undefined;
  /**
   * Status of the sync of the company data. This is linked to status code.
   */
  syncStatus?: string | null | undefined;
  /**
   * Friendly error message for the sync operation.
   */
  errorMessage?: string | null | undefined;
  /**
   * Exception message for the sync operation.
   */
  syncExceptionMessage?: string | null | undefined;
  /**
   * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
   *
   * @remarks
   *
   * ```
   * 2020-10-08T22:40:50Z
   * 2021-01-01T00:00:00
   * ```
   *
   * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
   *
   * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
   * - Unqualified local time: `2021-11-15T01:00:00`
   * - UTC time offsets: `2021-11-15T01:00:00-05:00`
   *
   * > Time zones
   * >
   * > Not all dates from Codat will contain information about time zones.
   * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
   */
  syncUtc?: string | undefined;
  /**
   * Array of containing objects data connection information for the company.
   */
  dataConnections?: Array<Connection> | null | undefined;
  /**
   * Boolean indicator for data being pushed during a sync operation.
   */
  dataPushed?: boolean | undefined;
};

/** @internal */
export const SyncDateRangeUtc$inboundSchema: z.ZodType<
  SyncDateRangeUtc,
  z.ZodTypeDef,
  unknown
> = z.object({
  start: z.string().optional(),
  finish: z.string().optional(),
});

/** @internal */
export type SyncDateRangeUtc$Outbound = {
  start?: string | undefined;
  finish?: string | undefined;
};

/** @internal */
export const SyncDateRangeUtc$outboundSchema: z.ZodType<
  SyncDateRangeUtc$Outbound,
  z.ZodTypeDef,
  SyncDateRangeUtc
> = z.object({
  start: z.string().optional(),
  finish: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SyncDateRangeUtc$ {
  /** @deprecated use `SyncDateRangeUtc$inboundSchema` instead. */
  export const inboundSchema = SyncDateRangeUtc$inboundSchema;
  /** @deprecated use `SyncDateRangeUtc$outboundSchema` instead. */
  export const outboundSchema = SyncDateRangeUtc$outboundSchema;
  /** @deprecated use `SyncDateRangeUtc$Outbound` instead. */
  export type Outbound = SyncDateRangeUtc$Outbound;
}

export function syncDateRangeUtcToJSON(
  syncDateRangeUtc: SyncDateRangeUtc,
): string {
  return JSON.stringify(
    SyncDateRangeUtc$outboundSchema.parse(syncDateRangeUtc),
  );
}

export function syncDateRangeUtcFromJSON(
  jsonString: string,
): SafeParseResult<SyncDateRangeUtc, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SyncDateRangeUtc$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SyncDateRangeUtc' from JSON`,
  );
}

/** @internal */
export const SyncSummary$inboundSchema: z.ZodType<
  SyncSummary,
  z.ZodTypeDef,
  unknown
> = z.object({
  syncDateRangeUtc: z.lazy(() => SyncDateRangeUtc$inboundSchema).optional(),
  companyId: z.string().optional(),
  commerceSyncId: z.string().optional(),
  syncStatusCode: z.number().int().optional(),
  syncStatus: z.nullable(z.string()).optional(),
  errorMessage: z.nullable(z.string()).optional(),
  syncExceptionMessage: z.nullable(z.string()).optional(),
  syncUtc: z.string().optional(),
  dataConnections: z.nullable(z.array(Connection$inboundSchema)).optional(),
  dataPushed: z.boolean().optional(),
});

/** @internal */
export type SyncSummary$Outbound = {
  syncDateRangeUtc?: SyncDateRangeUtc$Outbound | undefined;
  companyId?: string | undefined;
  commerceSyncId?: string | undefined;
  syncStatusCode?: number | undefined;
  syncStatus?: string | null | undefined;
  errorMessage?: string | null | undefined;
  syncExceptionMessage?: string | null | undefined;
  syncUtc?: string | undefined;
  dataConnections?: Array<Connection$Outbound> | null | undefined;
  dataPushed?: boolean | undefined;
};

/** @internal */
export const SyncSummary$outboundSchema: z.ZodType<
  SyncSummary$Outbound,
  z.ZodTypeDef,
  SyncSummary
> = z.object({
  syncDateRangeUtc: z.lazy(() => SyncDateRangeUtc$outboundSchema).optional(),
  companyId: z.string().optional(),
  commerceSyncId: z.string().optional(),
  syncStatusCode: z.number().int().optional(),
  syncStatus: z.nullable(z.string()).optional(),
  errorMessage: z.nullable(z.string()).optional(),
  syncExceptionMessage: z.nullable(z.string()).optional(),
  syncUtc: z.string().optional(),
  dataConnections: z.nullable(z.array(Connection$outboundSchema)).optional(),
  dataPushed: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SyncSummary$ {
  /** @deprecated use `SyncSummary$inboundSchema` instead. */
  export const inboundSchema = SyncSummary$inboundSchema;
  /** @deprecated use `SyncSummary$outboundSchema` instead. */
  export const outboundSchema = SyncSummary$outboundSchema;
  /** @deprecated use `SyncSummary$Outbound` instead. */
  export type Outbound = SyncSummary$Outbound;
}

export function syncSummaryToJSON(syncSummary: SyncSummary): string {
  return JSON.stringify(SyncSummary$outboundSchema.parse(syncSummary));
}

export function syncSummaryFromJSON(
  jsonString: string,
): SafeParseResult<SyncSummary, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SyncSummary$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SyncSummary' from JSON`,
  );
}
