/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type AccountOption = {
    /**
     * Classification of the type of G/L account.
     */
    classification?: string | null | undefined;
    /**
     * Identifier for the account, unique for the company.
     */
    id?: string | undefined;
    /**
     * Name of the account.
     */
    name?: string | null | undefined;
    /**
     * Reference given to each nominal account for a business. It ensures money is allocated to the correct account. This code isn't a unique identifier in the Codat system.
     */
    nominalCode?: string | null | undefined;
};

/** @internal */
export namespace AccountOption$ {
    export type Inbound = {
        classification?: string | null | undefined;
        id?: string | undefined;
        name?: string | null | undefined;
        nominalCode?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<AccountOption, z.ZodTypeDef, Inbound> = z
        .object({
            classification: z.nullable(z.string()).optional(),
            id: z.string().optional(),
            name: z.nullable(z.string()).optional(),
            nominalCode: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.classification === undefined ? null : { classification: v.classification }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.nominalCode === undefined ? null : { nominalCode: v.nominalCode }),
            };
        });

    export type Outbound = {
        classification?: string | null | undefined;
        id?: string | undefined;
        name?: string | null | undefined;
        nominalCode?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AccountOption> = z
        .object({
            classification: z.nullable(z.string()).optional(),
            id: z.string().optional(),
            name: z.nullable(z.string()).optional(),
            nominalCode: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.classification === undefined ? null : { classification: v.classification }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.nominalCode === undefined ? null : { nominalCode: v.nominalCode }),
            };
        });
}
