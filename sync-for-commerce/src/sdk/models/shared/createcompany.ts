/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateCompany = {
  /**
   * Name of company being connected.
   */
  name: string;
  /**
   * Additional information about the company. This can be used to store foreign IDs, references, etc.
   */
  description?: string | undefined;
  /**
   * A collection of user-defined key-value pairs that store custom metadata against the company.
   */
  tags?: { [k: string]: string } | undefined;
};

/** @internal */
export const CreateCompany$inboundSchema: z.ZodType<
  CreateCompany,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  tags: z.record(z.string()).optional(),
});

/** @internal */
export type CreateCompany$Outbound = {
  name: string;
  description?: string | undefined;
  tags?: { [k: string]: string } | undefined;
};

/** @internal */
export const CreateCompany$outboundSchema: z.ZodType<
  CreateCompany$Outbound,
  z.ZodTypeDef,
  CreateCompany
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  tags: z.record(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCompany$ {
  /** @deprecated use `CreateCompany$inboundSchema` instead. */
  export const inboundSchema = CreateCompany$inboundSchema;
  /** @deprecated use `CreateCompany$outboundSchema` instead. */
  export const outboundSchema = CreateCompany$outboundSchema;
  /** @deprecated use `CreateCompany$Outbound` instead. */
  export type Outbound = CreateCompany$Outbound;
}

export function createCompanyToJSON(createCompany: CreateCompany): string {
  return JSON.stringify(CreateCompany$outboundSchema.parse(createCompany));
}

export function createCompanyFromJSON(
  jsonString: string,
): SafeParseResult<CreateCompany, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCompany$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCompany' from JSON`,
  );
}
