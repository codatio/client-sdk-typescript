/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SupportedFeature,
  SupportedFeature$inboundSchema,
  SupportedFeature$Outbound,
  SupportedFeature$outboundSchema,
} from "./supportedfeature.js";

/**
 * Available data types
 */
export const DataTypes = {
  AccountTransactions: "accountTransactions",
  BalanceSheet: "balanceSheet",
  BankAccounts: "bankAccounts",
  BankTransactions: "bankTransactions",
  BillCreditNotes: "billCreditNotes",
  BillPayments: "billPayments",
  Bills: "bills",
  CashFlowStatement: "cashFlowStatement",
  ChartOfAccounts: "chartOfAccounts",
  Company: "company",
  CreditNotes: "creditNotes",
  Customers: "customers",
  DirectCosts: "directCosts",
  DirectIncomes: "directIncomes",
  Invoices: "invoices",
  ItemReceipts: "itemReceipts",
  Items: "items",
  JournalEntries: "journalEntries",
  Journals: "journals",
  PaymentMethods: "paymentMethods",
  Payments: "payments",
  ProfitAndLoss: "profitAndLoss",
  PurchaseOrders: "purchaseOrders",
  SalesOrders: "salesOrders",
  Suppliers: "suppliers",
  TaxRates: "taxRates",
  TrackingCategories: "trackingCategories",
  Transfers: "transfers",
  BankingAccountBalances: "banking-accountBalances",
  BankingAccounts: "banking-accounts",
  BankingTransactionCategories: "banking-transactionCategories",
  BankingTransactions: "banking-transactions",
  CommerceCompanyInfo: "commerce-companyInfo",
  CommerceCustomers: "commerce-customers",
  CommerceDisputes: "commerce-disputes",
  CommerceLocations: "commerce-locations",
  CommerceOrders: "commerce-orders",
  CommercePaymentMethods: "commerce-paymentMethods",
  CommercePayments: "commerce-payments",
  CommerceProductCategories: "commerce-productCategories",
  CommerceProducts: "commerce-products",
  CommerceTaxComponents: "commerce-taxComponents",
  CommerceTransactions: "commerce-transactions",
} as const;
/**
 * Available data types
 */
export type DataTypes = ClosedEnum<typeof DataTypes>;

/**
 * Describes support for a given datatype and associated operations
 */
export type DataTypeFeature = {
  /**
   * Available data types
   */
  dataType?: DataTypes | undefined;
  supportedFeatures: Array<SupportedFeature>;
};

/** @internal */
export const DataTypes$inboundSchema: z.ZodNativeEnum<typeof DataTypes> = z
  .nativeEnum(DataTypes);

/** @internal */
export const DataTypes$outboundSchema: z.ZodNativeEnum<typeof DataTypes> =
  DataTypes$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DataTypes$ {
  /** @deprecated use `DataTypes$inboundSchema` instead. */
  export const inboundSchema = DataTypes$inboundSchema;
  /** @deprecated use `DataTypes$outboundSchema` instead. */
  export const outboundSchema = DataTypes$outboundSchema;
}

/** @internal */
export const DataTypeFeature$inboundSchema: z.ZodType<
  DataTypeFeature,
  z.ZodTypeDef,
  unknown
> = z.object({
  dataType: DataTypes$inboundSchema.optional(),
  supportedFeatures: z.array(SupportedFeature$inboundSchema),
});

/** @internal */
export type DataTypeFeature$Outbound = {
  dataType?: string | undefined;
  supportedFeatures: Array<SupportedFeature$Outbound>;
};

/** @internal */
export const DataTypeFeature$outboundSchema: z.ZodType<
  DataTypeFeature$Outbound,
  z.ZodTypeDef,
  DataTypeFeature
> = z.object({
  dataType: DataTypes$outboundSchema.optional(),
  supportedFeatures: z.array(SupportedFeature$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DataTypeFeature$ {
  /** @deprecated use `DataTypeFeature$inboundSchema` instead. */
  export const inboundSchema = DataTypeFeature$inboundSchema;
  /** @deprecated use `DataTypeFeature$outboundSchema` instead. */
  export const outboundSchema = DataTypeFeature$outboundSchema;
  /** @deprecated use `DataTypeFeature$Outbound` instead. */
  export type Outbound = DataTypeFeature$Outbound;
}

export function dataTypeFeatureToJSON(
  dataTypeFeature: DataTypeFeature,
): string {
  return JSON.stringify(DataTypeFeature$outboundSchema.parse(dataTypeFeature));
}

export function dataTypeFeatureFromJSON(
  jsonString: string,
): SafeParseResult<DataTypeFeature, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DataTypeFeature$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DataTypeFeature' from JSON`,
  );
}
