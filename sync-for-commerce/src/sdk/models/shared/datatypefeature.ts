/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SupportedFeature, SupportedFeature$ } from "./supportedfeature";
import { z } from "zod";

/**
 * Available Data types
 */
export enum DataTypes {
    AccountTransactions = "accountTransactions",
    BalanceSheet = "balanceSheet",
    BankAccounts = "bankAccounts",
    BankTransactions = "bankTransactions",
    BillCreditNotes = "billCreditNotes",
    BillPayments = "billPayments",
    Bills = "bills",
    CashFlowStatement = "cashFlowStatement",
    ChartOfAccounts = "chartOfAccounts",
    Company = "company",
    CreditNotes = "creditNotes",
    Customers = "customers",
    DirectCosts = "directCosts",
    DirectIncomes = "directIncomes",
    Invoices = "invoices",
    ItemReceipts = "itemReceipts",
    Items = "items",
    JournalEntries = "journalEntries",
    Journals = "journals",
    PaymentMethods = "paymentMethods",
    Payments = "payments",
    ProfitAndLoss = "profitAndLoss",
    PurchaseOrders = "purchaseOrders",
    SalesOrders = "salesOrders",
    Suppliers = "suppliers",
    TaxRates = "taxRates",
    TrackingCategories = "trackingCategories",
    Transfers = "transfers",
    BankingAccountBalances = "banking-accountBalances",
    BankingAccounts = "banking-accounts",
    BankingTransactionCategories = "banking-transactionCategories",
    BankingTransactions = "banking-transactions",
    CommerceCompanyInfo = "commerce-companyInfo",
    CommerceCustomers = "commerce-customers",
    CommerceDisputes = "commerce-disputes",
    CommerceLocations = "commerce-locations",
    CommerceOrders = "commerce-orders",
    CommercePaymentMethods = "commerce-paymentMethods",
    CommercePayments = "commerce-payments",
    CommerceProductCategories = "commerce-productCategories",
    CommerceProducts = "commerce-products",
    CommerceTaxComponents = "commerce-taxComponents",
    CommerceTransactions = "commerce-transactions",
}

/**
 * Describes support for a given datatype and associated operations
 */
export type DataTypeFeature = {
    /**
     * Available Data types
     */
    dataType?: DataTypes | undefined;
    supportedFeatures: Array<SupportedFeature>;
};

/** @internal */
export const DataTypes$ = z.nativeEnum(DataTypes);

/** @internal */
export namespace DataTypeFeature$ {
    export type Inbound = {
        dataType?: DataTypes | undefined;
        supportedFeatures: Array<SupportedFeature$.Inbound>;
    };

    export const inboundSchema: z.ZodType<DataTypeFeature, z.ZodTypeDef, Inbound> = z
        .object({
            dataType: DataTypes$.optional(),
            supportedFeatures: z.array(SupportedFeature$.inboundSchema),
        })
        .transform((v) => {
            return {
                ...(v.dataType === undefined ? null : { dataType: v.dataType }),
                supportedFeatures: v.supportedFeatures,
            };
        });

    export type Outbound = {
        dataType?: DataTypes | undefined;
        supportedFeatures: Array<SupportedFeature$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DataTypeFeature> = z
        .object({
            dataType: DataTypes$.optional(),
            supportedFeatures: z.array(SupportedFeature$.outboundSchema),
        })
        .transform((v) => {
            return {
                ...(v.dataType === undefined ? null : { dataType: v.dataType }),
                supportedFeatures: v.supportedFeatures,
            };
        });
}
