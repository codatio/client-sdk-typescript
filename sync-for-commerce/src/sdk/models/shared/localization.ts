/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type Localization = {
    /**
     * `True` if required.
     */
    required?: boolean | undefined;
    /**
     * Value of the property.
     */
    text?: string | null | undefined;
};

/** @internal */
export namespace Localization$ {
    export type Inbound = {
        required?: boolean | undefined;
        text?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<Localization, z.ZodTypeDef, Inbound> = z
        .object({
            required: z.boolean().optional(),
            text: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.required === undefined ? null : { required: v.required }),
                ...(v.text === undefined ? null : { text: v.text }),
            };
        });

    export type Outbound = {
        required?: boolean | undefined;
        text?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Localization> = z
        .object({
            required: z.boolean().optional(),
            text: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.required === undefined ? null : { required: v.required }),
                ...(v.text === undefined ? null : { text: v.text }),
            };
        });
}
