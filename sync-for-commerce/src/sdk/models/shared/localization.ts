/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Localization = {
  /**
   * Value of the property.
   */
  text?: string | null | undefined;
  /**
   * `True` if required.
   */
  required?: boolean | undefined;
};

/** @internal */
export const Localization$inboundSchema: z.ZodType<
  Localization,
  z.ZodTypeDef,
  unknown
> = z.object({
  text: z.nullable(z.string()).optional(),
  required: z.boolean().optional(),
});

/** @internal */
export type Localization$Outbound = {
  text?: string | null | undefined;
  required?: boolean | undefined;
};

/** @internal */
export const Localization$outboundSchema: z.ZodType<
  Localization$Outbound,
  z.ZodTypeDef,
  Localization
> = z.object({
  text: z.nullable(z.string()).optional(),
  required: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Localization$ {
  /** @deprecated use `Localization$inboundSchema` instead. */
  export const inboundSchema = Localization$inboundSchema;
  /** @deprecated use `Localization$outboundSchema` instead. */
  export const outboundSchema = Localization$outboundSchema;
  /** @deprecated use `Localization$Outbound` instead. */
  export type Outbound = Localization$Outbound;
}

export function localizationToJSON(localization: Localization): string {
  return JSON.stringify(Localization$outboundSchema.parse(localization));
}

export function localizationFromJSON(
  jsonString: string,
): SafeParseResult<Localization, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Localization$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Localization' from JSON`,
  );
}
