/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type VisibleAccounts = {
  /**
   * Visible accounts on sync flow.
   */
  visibleAccounts?: Array<string> | null | undefined;
};

/** @internal */
export const VisibleAccounts$inboundSchema: z.ZodType<
  VisibleAccounts,
  z.ZodTypeDef,
  unknown
> = z.object({
  visibleAccounts: z.nullable(z.array(z.string())).optional(),
});

/** @internal */
export type VisibleAccounts$Outbound = {
  visibleAccounts?: Array<string> | null | undefined;
};

/** @internal */
export const VisibleAccounts$outboundSchema: z.ZodType<
  VisibleAccounts$Outbound,
  z.ZodTypeDef,
  VisibleAccounts
> = z.object({
  visibleAccounts: z.nullable(z.array(z.string())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VisibleAccounts$ {
  /** @deprecated use `VisibleAccounts$inboundSchema` instead. */
  export const inboundSchema = VisibleAccounts$inboundSchema;
  /** @deprecated use `VisibleAccounts$outboundSchema` instead. */
  export const outboundSchema = VisibleAccounts$outboundSchema;
  /** @deprecated use `VisibleAccounts$Outbound` instead. */
  export type Outbound = VisibleAccounts$Outbound;
}

export function visibleAccountsToJSON(
  visibleAccounts: VisibleAccounts,
): string {
  return JSON.stringify(VisibleAccounts$outboundSchema.parse(visibleAccounts));
}

export function visibleAccountsFromJSON(
  jsonString: string,
): SafeParseResult<VisibleAccounts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VisibleAccounts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VisibleAccounts' from JSON`,
  );
}
