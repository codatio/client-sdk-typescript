/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type VisibleAccounts = {
    /**
     * Visible accounts on sync flow.
     */
    visibleAccounts?: Array<string> | null | undefined;
};

/** @internal */
export namespace VisibleAccounts$ {
    export type Inbound = {
        visibleAccounts?: Array<string> | null | undefined;
    };

    export const inboundSchema: z.ZodType<VisibleAccounts, z.ZodTypeDef, Inbound> = z
        .object({
            visibleAccounts: z.nullable(z.array(z.string())).optional(),
        })
        .transform((v) => {
            return {
                ...(v.visibleAccounts === undefined
                    ? null
                    : { visibleAccounts: v.visibleAccounts }),
            };
        });

    export type Outbound = {
        visibleAccounts?: Array<string> | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, VisibleAccounts> = z
        .object({
            visibleAccounts: z.nullable(z.array(z.string())).optional(),
        })
        .transform((v) => {
            return {
                ...(v.visibleAccounts === undefined
                    ? null
                    : { visibleAccounts: v.visibleAccounts }),
            };
        });
}
