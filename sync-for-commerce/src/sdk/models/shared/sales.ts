/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ConfigAccount, ConfigAccount$ } from "./configaccount";
import { Customer, Customer$ } from "./customer";
import { Grouping, Grouping$ } from "./grouping";
import { InvoiceStatus, InvoiceStatus$ } from "./invoicestatus";
import { NewTaxRates, NewTaxRates$ } from "./newtaxrates";
import { TaxRateAmount, TaxRateAmount$ } from "./taxrateamount";
import { z } from "zod";

export type Sales = {
    accounts?: Record<string, ConfigAccount> | null | undefined;
    grouping?: Grouping | undefined;
    invoiceStatus?: InvoiceStatus | undefined;
    newTaxRates?: NewTaxRates | undefined;
    salesCustomer?: Customer | undefined;
    /**
     * Boolean indicator for syncing sales.
     */
    syncSales?: boolean | undefined;
    taxRates?: Record<string, TaxRateAmount> | null | undefined;
};

/** @internal */
export namespace Sales$ {
    export type Inbound = {
        accounts?: Record<string, ConfigAccount$.Inbound> | null | undefined;
        grouping?: Grouping$.Inbound | undefined;
        invoiceStatus?: InvoiceStatus$.Inbound | undefined;
        newTaxRates?: NewTaxRates$.Inbound | undefined;
        salesCustomer?: Customer$.Inbound | undefined;
        syncSales?: boolean | undefined;
        taxRates?: Record<string, TaxRateAmount$.Inbound> | null | undefined;
    };

    export const inboundSchema: z.ZodType<Sales, z.ZodTypeDef, Inbound> = z
        .object({
            accounts: z.nullable(z.record(ConfigAccount$.inboundSchema)).optional(),
            grouping: Grouping$.inboundSchema.optional(),
            invoiceStatus: InvoiceStatus$.inboundSchema.optional(),
            newTaxRates: NewTaxRates$.inboundSchema.optional(),
            salesCustomer: Customer$.inboundSchema.optional(),
            syncSales: z.boolean().optional(),
            taxRates: z.nullable(z.record(TaxRateAmount$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.accounts === undefined ? null : { accounts: v.accounts }),
                ...(v.grouping === undefined ? null : { grouping: v.grouping }),
                ...(v.invoiceStatus === undefined ? null : { invoiceStatus: v.invoiceStatus }),
                ...(v.newTaxRates === undefined ? null : { newTaxRates: v.newTaxRates }),
                ...(v.salesCustomer === undefined ? null : { salesCustomer: v.salesCustomer }),
                ...(v.syncSales === undefined ? null : { syncSales: v.syncSales }),
                ...(v.taxRates === undefined ? null : { taxRates: v.taxRates }),
            };
        });

    export type Outbound = {
        accounts?: Record<string, ConfigAccount$.Outbound> | null | undefined;
        grouping?: Grouping$.Outbound | undefined;
        invoiceStatus?: InvoiceStatus$.Outbound | undefined;
        newTaxRates?: NewTaxRates$.Outbound | undefined;
        salesCustomer?: Customer$.Outbound | undefined;
        syncSales?: boolean | undefined;
        taxRates?: Record<string, TaxRateAmount$.Outbound> | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Sales> = z
        .object({
            accounts: z.nullable(z.record(ConfigAccount$.outboundSchema)).optional(),
            grouping: Grouping$.outboundSchema.optional(),
            invoiceStatus: InvoiceStatus$.outboundSchema.optional(),
            newTaxRates: NewTaxRates$.outboundSchema.optional(),
            salesCustomer: Customer$.outboundSchema.optional(),
            syncSales: z.boolean().optional(),
            taxRates: z.nullable(z.record(TaxRateAmount$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.accounts === undefined ? null : { accounts: v.accounts }),
                ...(v.grouping === undefined ? null : { grouping: v.grouping }),
                ...(v.invoiceStatus === undefined ? null : { invoiceStatus: v.invoiceStatus }),
                ...(v.newTaxRates === undefined ? null : { newTaxRates: v.newTaxRates }),
                ...(v.salesCustomer === undefined ? null : { salesCustomer: v.salesCustomer }),
                ...(v.syncSales === undefined ? null : { syncSales: v.syncSales }),
                ...(v.taxRates === undefined ? null : { taxRates: v.taxRates }),
            };
        });
}
