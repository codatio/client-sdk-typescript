/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ConfigAccount, ConfigAccount$ } from "./configaccount";
import { z } from "zod";

export type NewPayments = {
    accounts?: Record<string, ConfigAccount> | null | undefined;
    /**
     * Boolean indicator for syncing payments.
     */
    syncPayments?: boolean | undefined;
};

/** @internal */
export namespace NewPayments$ {
    export type Inbound = {
        accounts?: Record<string, ConfigAccount$.Inbound> | null | undefined;
        syncPayments?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<NewPayments, z.ZodTypeDef, Inbound> = z
        .object({
            accounts: z.nullable(z.record(ConfigAccount$.inboundSchema)).optional(),
            syncPayments: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.accounts === undefined ? null : { accounts: v.accounts }),
                ...(v.syncPayments === undefined ? null : { syncPayments: v.syncPayments }),
            };
        });

    export type Outbound = {
        accounts?: Record<string, ConfigAccount$.Outbound> | null | undefined;
        syncPayments?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, NewPayments> = z
        .object({
            accounts: z.nullable(z.record(ConfigAccount$.outboundSchema)).optional(),
            syncPayments: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.accounts === undefined ? null : { accounts: v.accounts }),
                ...(v.syncPayments === undefined ? null : { syncPayments: v.syncPayments }),
            };
        });
}
