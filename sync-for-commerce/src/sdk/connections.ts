/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { connectionsCreate } from "../funcs/connectionsCreate.js";
import { connectionsGetSyncFlowUrl } from "../funcs/connectionsGetSyncFlowUrl.js";
import { connectionsList } from "../funcs/connectionsList.js";
import { connectionsUpdateAuthorization } from "../funcs/connectionsUpdateAuthorization.js";
import { connectionsUpdateConnection } from "../funcs/connectionsUpdateConnection.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Connections extends ClientSDK {
  /**
   * Start new sync flow
   *
   * @remarks
   * Create a new company and connections. Get a URL for Sync Flow, including a one time passcode.
   */
  async getSyncFlowUrl(
    request: operations.GetSyncFlowUrlRequest,
    options?: RequestOptions,
  ): Promise<shared.SyncFlowUrl> {
    return unwrapAsync(connectionsGetSyncFlowUrl(
      this,
      request,
      options,
    ));
  }

  /**
   * List connections
   *
   * @remarks
   * List the connections for a company.
   */
  async list(
    request: operations.ListConnectionsRequest,
    options?: RequestOptions,
  ): Promise<shared.Connections> {
    return unwrapAsync(connectionsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create connection
   *
   * @remarks
   * Creates a connection for the company by providing a valid `platformKey`.
   *
   * Use the [List Integrations](https://docs.codat.io/platform-api#/operations/list-integrations) endpoint to access valid platform keys.
   */
  async create(
    request: operations.CreateConnectionRequest,
    options?: RequestOptions,
  ): Promise<shared.Connection> {
    return unwrapAsync(connectionsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Update connection
   *
   * @remarks
   * Update a data connection
   */
  async updateConnection(
    request: operations.UpdateConnectionRequest,
    options?: RequestOptions,
  ): Promise<shared.Connection> {
    return unwrapAsync(connectionsUpdateConnection(
      this,
      request,
      options,
    ));
  }

  /**
   * Update authorization
   *
   * @remarks
   * Update data connection's authorization.
   */
  async updateAuthorization(
    request: operations.UpdateConnectionAuthorizationRequest,
    options?: RequestOptions,
  ): Promise<shared.Connection> {
    return unwrapAsync(connectionsUpdateAuthorization(
      this,
      request,
      options,
    ));
  }
}
