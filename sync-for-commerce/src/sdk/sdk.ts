/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks/hooks.js";
import { SDKOptions, serverURLFromOptions } from "../lib/config.js";
import { HTTPClient } from "../lib/http.js";
import { ClientSDK } from "../lib/sdks.js";
import { AdvancedControls } from "./advancedcontrols.js";
import { Connections } from "./connections.js";
import { Integrations } from "./integrations.js";
import { Sync } from "./sync.js";
import { SyncFlowSettings } from "./syncflowsettings.js";

export class CodatSyncCommerce extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    private _connections?: Connections;
    get connections(): Connections {
        return (this._connections ??= new Connections(this.options$));
    }

    private _advancedControls?: AdvancedControls;
    get advancedControls(): AdvancedControls {
        return (this._advancedControls ??= new AdvancedControls(this.options$));
    }

    private _integrations?: Integrations;
    get integrations(): Integrations {
        return (this._integrations ??= new Integrations(this.options$));
    }

    private _syncFlowSettings?: SyncFlowSettings;
    get syncFlowSettings(): SyncFlowSettings {
        return (this._syncFlowSettings ??= new SyncFlowSettings(this.options$));
    }

    private _sync?: Sync;
    get sync(): Sync {
        return (this._sync ??= new Sync(this.options$));
    }
}
