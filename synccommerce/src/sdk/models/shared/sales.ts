/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ConfigAccount } from "./configaccount";
import { Customer } from "./customer";
import { Grouping } from "./grouping";
import { InvoiceStatus } from "./invoicestatus";
import { NewTaxRates } from "./newtaxrates";
import { TaxRateAmount } from "./taxrateamount";
import { Expose, plainToInstance, Transform, Type } from "class-transformer";

export class Sales extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: ConfigAccount })
  @Expose({ name: "accounts" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, ConfigAccount> = {};
      for (const key in value) {
        obj[key] = plainToInstance(ConfigAccount, value[key] as ConfigAccount, {
          excludeExtraneousValues: true,
        });
      }
      return obj;
    },
    { toClassOnly: true }
  )
  accounts?: Record<string, ConfigAccount>;

  @SpeakeasyMetadata()
  @Expose({ name: "grouping" })
  @Type(() => Grouping)
  grouping?: Grouping;

  @SpeakeasyMetadata()
  @Expose({ name: "invoiceStatus" })
  @Type(() => InvoiceStatus)
  invoiceStatus?: InvoiceStatus;

  @SpeakeasyMetadata()
  @Expose({ name: "newTaxRates" })
  @Type(() => NewTaxRates)
  newTaxRates?: NewTaxRates;

  @SpeakeasyMetadata()
  @Expose({ name: "salesCustomer" })
  @Type(() => Customer)
  salesCustomer?: Customer;

  /**
   * Boolean indicator for syncing sales.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "syncSales" })
  syncSales?: boolean;

  @SpeakeasyMetadata({ elemType: TaxRateAmount })
  @Expose({ name: "taxRates" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, TaxRateAmount> = {};
      for (const key in value) {
        obj[key] = plainToInstance(TaxRateAmount, value[key] as TaxRateAmount, {
          excludeExtraneousValues: true,
        });
      }
      return obj;
    },
    { toClassOnly: true }
  )
  taxRates?: Record<string, TaxRateAmount>;
}
