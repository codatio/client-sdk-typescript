/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { SourceTypeEnum } from "./sourcetypeenum";
import { Expose, Type } from "class-transformer";

/**
 * Available Data types
 */
export enum IntegrationDatatypeFeatureDataTypeEnum {
  AccountTransactions = "accountTransactions",
  BalanceSheet = "balanceSheet",
  BankAccounts = "bankAccounts",
  BankTransactions = "bankTransactions",
  BillCreditNotes = "billCreditNotes",
  BillPayments = "billPayments",
  Bills = "bills",
  CashFlowStatement = "cashFlowStatement",
  ChartOfAccounts = "chartOfAccounts",
  Company = "company",
  CreditNotes = "creditNotes",
  Customers = "customers",
  DirectCosts = "directCosts",
  DirectIncomes = "directIncomes",
  Invoices = "invoices",
  Items = "items",
  JournalEntries = "journalEntries",
  Journals = "journals",
  PaymentMethods = "paymentMethods",
  Payments = "payments",
  ProfitAndLoss = "profitAndLoss",
  PurchaseOrders = "purchaseOrders",
  SalesOrders = "salesOrders",
  Suppliers = "suppliers",
  TaxRates = "taxRates",
  TrackingCategories = "trackingCategories",
  Transfers = "transfers",
  BankingAccountBalances = "banking-accountBalances",
  BankingAccounts = "banking-accounts",
  BankingTransactionCategories = "banking-transactionCategories",
  BankingTransactions = "banking-transactions",
  CommerceCompanyInfo = "commerce-companyInfo",
  CommerceCustomers = "commerce-customers",
  CommerceDisputes = "commerce-disputes",
  CommerceLocations = "commerce-locations",
  CommerceOrders = "commerce-orders",
  CommercePaymentMethods = "commerce-paymentMethods",
  CommercePayments = "commerce-payments",
  CommerceProductCategories = "commerce-productCategories",
  CommerceProducts = "commerce-products",
  CommerceTaxComponents = "commerce-taxComponents",
  CommerceTransactions = "commerce-transactions",
}

export enum IntegrationDatatypeFeatureSupportedFeaturesFeatureStateEnum {
  Release = "Release",
  Beta = "Beta",
  Deprecated = "Deprecated",
  NotSupported = "NotSupported",
  NotImplemented = "NotImplemented",
}

export enum IntegrationDatatypeFeatureSupportedFeaturesFeatureTypeEnum {
  Get = "Get",
  Post = "Post",
  Categorization = "Categorization",
  Delete = "Delete",
  Put = "Put",
  GetAsPdf = "GetAsPdf",
  DownloadAttachment = "DownloadAttachment",
  GetAttachment = "GetAttachment",
  GetAttachments = "GetAttachments",
  UploadAttachment = "UploadAttachment",
}

export class IntegrationDatatypeFeatureSupportedFeatures extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "featureState" })
  featureState: IntegrationDatatypeFeatureSupportedFeaturesFeatureStateEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "featureType" })
  featureType: IntegrationDatatypeFeatureSupportedFeaturesFeatureTypeEnum;
}

/**
 * Describes support for a given datatype and associated operations
 */
export class IntegrationDatatypeFeature extends SpeakeasyBase {
  /**
   * Available Data types
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dataType" })
  dataType?: IntegrationDatatypeFeatureDataTypeEnum;

  @SpeakeasyMetadata({ elemType: IntegrationDatatypeFeatureSupportedFeatures })
  @Expose({ name: "supportedFeatures" })
  @Type(() => IntegrationDatatypeFeatureSupportedFeatures)
  supportedFeatures: IntegrationDatatypeFeatureSupportedFeatures[];
}

/**
 * An integration that Codat supports
 */
export class Integration extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "dataProvidedBy" })
  dataProvidedBy?: string;

  @SpeakeasyMetadata({ elemType: IntegrationDatatypeFeature })
  @Expose({ name: "datatypeFeatures" })
  @Type(() => IntegrationDatatypeFeature)
  datatypeFeatures?: IntegrationDatatypeFeature[];

  /**
   * Whether this integration is enabled for your customers to use
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enabled" })
  enabled: boolean;

  /**
   * A Codat ID representing the integration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "integrationId" })
  integrationId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "isBeta" })
  isBeta?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "isOfflineConnector" })
  isOfflineConnector?: boolean;

  /**
   * A unique 4-letter key to represent a platform in each integration. View [accounting](https://docs.codat.io/integrations/accounting/accounting-platform-keys), [banking](https://docs.codat.io/integrations/banking/banking-platform-keys), and [commerce](https://docs.codat.io/integrations/commerce/commerce-platform-keys) platform keys.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "key" })
  key: string;

  @SpeakeasyMetadata()
  @Expose({ name: "logoUrl" })
  logoUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * A source-specific ID used to distinguish between different sources originating from the same data connection. In general, a data connection is a single data source. However, for TrueLayer, `sourceId` is associated with a specific bank and has a many-to-one relationship with the `integrationId`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sourceId" })
  sourceId?: string;

  /**
   * The type of platform of the connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sourceType" })
  sourceType?: SourceTypeEnum;
}
