/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ConfigAccount } from "./configaccount";
import { Expose, plainToInstance, Transform } from "class-transformer";

export class NewPayments extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: ConfigAccount })
  @Expose({ name: "accounts" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, ConfigAccount> = {};
      for (const key in value) {
        obj[key] = plainToInstance(ConfigAccount, value[key] as ConfigAccount, {
          excludeExtraneousValues: true,
        });
      }
      return obj;
    },
    { toClassOnly: true }
  )
  accounts?: Record<string, ConfigAccount>;

  /**
   * Boolean indicator for syncing payments.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "syncPayments" })
  syncPayments?: boolean;
}
