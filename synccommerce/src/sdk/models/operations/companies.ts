/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

export class CompaniesRequest extends SpeakeasyBase {
  /**
   * Field to order results by. [Read more](https://docs.codat.io/using-the-api/ordering-results).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=orderBy",
  })
  orderBy?: string;

  /**
   * Page number. [Read more](https://docs.codat.io/using-the-api/paging).
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=page" })
  page: number;

  /**
   * Number of records to return in a page. [Read more](https://docs.codat.io/using-the-api/paging).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=pageSize",
  })
  pageSize?: number;

  /**
   * Codat query string. [Read more](https://docs.codat.io/using-the-api/querying).
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=query" })
  query?: string;
}

export class Companies200ApplicationJSONLinksCurrent extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "href" })
  href?: string;
}

export class Companies200ApplicationJSONLinksNext extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "href" })
  href?: string;
}

export class Companies200ApplicationJSONLinksPrevious extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "href" })
  href?: string;
}

export class Companies200ApplicationJSONLinksSelf extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "href" })
  href?: string;
}

export class Companies200ApplicationJSONLinks extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "current" })
  @Type(() => Companies200ApplicationJSONLinksCurrent)
  current?: Companies200ApplicationJSONLinksCurrent;

  @SpeakeasyMetadata()
  @Expose({ name: "next" })
  @Type(() => Companies200ApplicationJSONLinksNext)
  next?: Companies200ApplicationJSONLinksNext;

  @SpeakeasyMetadata()
  @Expose({ name: "previous" })
  @Type(() => Companies200ApplicationJSONLinksPrevious)
  previous?: Companies200ApplicationJSONLinksPrevious;

  @SpeakeasyMetadata()
  @Expose({ name: "self" })
  @Type(() => Companies200ApplicationJSONLinksSelf)
  self?: Companies200ApplicationJSONLinksSelf;
}

export class Companies200ApplicationJSONResultsDataConnectionsDataConnectionErrors extends SpeakeasyBase {
  /**
   * Message on the data connection error.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "errorMessage" })
  errorMessage?: string;

  /**
   * In Codat's data model, dates and times are represented using the ISO 8601 standard. Date and time fields are formatted as strings.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "erroredOnUtc" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  erroredOnUtc?: Date;

  /**
   * Codat's error status code for the connection error.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "statusCode" })
  statusCode?: string;

  /**
   * Descriptive text for the data connection error.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "statusText" })
  statusText?: string;
}

/**
 * The type of platform of the connection.
 */
export enum Companies200ApplicationJSONResultsDataConnectionsSourceTypeEnum {
  Accounting = "Accounting",
  Banking = "Banking",
  Commerce = "Commerce",
  Other = "Other",
  Unknown = "Unknown",
}

/**
 * The current authorization status of the data connection.
 */
export enum Companies200ApplicationJSONResultsDataConnectionsStatusEnum {
  PendingAuth = "PendingAuth",
  Linked = "Linked",
  Unlinked = "Unlinked",
  Deauthorized = "Deauthorized",
}

export class Companies200ApplicationJSONResultsDataConnections extends SpeakeasyBase {
  /**
   * In Codat's data model, dates and times are represented using the ISO 8601 standard. Date and time fields are formatted as string.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  created?: Date;

  /**
   * Array containing errors on data connections.
   */
  @SpeakeasyMetadata({
    elemType:
      Companies200ApplicationJSONResultsDataConnectionsDataConnectionErrors,
  })
  @Expose({ name: "dataConnectionErrors" })
  @Type(
    () => Companies200ApplicationJSONResultsDataConnectionsDataConnectionErrors
  )
  dataConnectionErrors?: Companies200ApplicationJSONResultsDataConnectionsDataConnectionErrors[];

  /**
   * Unique identifier for a company's data connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  /**
   * A Codat ID representing the integration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "integrationId" })
  integrationId: string;

  /**
   * In Codat's data model, dates and times are represented using the ISO 8601 standard. Date and time fields are formatted as string.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lastSync" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastSync?: Date;

  /**
   * Whitelabelled link site URL for the user link flow.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "linkUrl" })
  linkUrl: string;

  /**
   * The name of the platform to which the data connection is established.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "platformName" })
  platformName: string;

  /**
   * A source-specific ID used to distinguish between different sources originating from the same data connection. In general, a data connection is a single data source. However, for TrueLayer, sourceId is associated with a specific bank and has a many-to-one relationship with the integrationId.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sourceId" })
  sourceId: string;

  /**
   * The type of platform of the connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sourceType" })
  sourceType?: Companies200ApplicationJSONResultsDataConnectionsSourceTypeEnum;

  /**
   * The current authorization status of the data connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: Companies200ApplicationJSONResultsDataConnectionsStatusEnum;
}

export class Companies200ApplicationJSONResults extends SpeakeasyBase {
  /**
   * The date the data connection was established.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  created?: Date;

  /**
   * Name of the Codat user who created the data connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createdByUserName" })
  createdByUserName?: string;

  @SpeakeasyMetadata({
    elemType: Companies200ApplicationJSONResultsDataConnections,
  })
  @Expose({ name: "dataConnections" })
  @Type(() => Companies200ApplicationJSONResultsDataConnections)
  dataConnections: Companies200ApplicationJSONResultsDataConnections[];

  /**
   * Unique identifier for your SMB in Codat.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  /**
   * The date time for the previous sync operation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lastSync" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastSync?: Date;

  /**
   * The name of the company.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Additional information about the company. This can be used to store foreign IDs, references, etc.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "platform" })
  platform: string;

  /**
   * The redirect Link URL enabling the customer to start their auth flow journey for the company.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "redirect" })
  redirect: string;
}

/**
 * Used to represent what can be returned by an endpoint that supports paging.
 *
 * @remarks
 * Usable with the [ProducesResponseType] attribute on a controller action.
 */
export class Companies200ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "_links" })
  @Type(() => Companies200ApplicationJSONLinks)
  links?: Companies200ApplicationJSONLinks;

  @SpeakeasyMetadata()
  @Expose({ name: "pageNumber" })
  pageNumber?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "pageSize" })
  pageSize?: number;

  @SpeakeasyMetadata({ elemType: Companies200ApplicationJSONResults })
  @Expose({ name: "results" })
  @Type(() => Companies200ApplicationJSONResults)
  results?: Companies200ApplicationJSONResults[];

  @SpeakeasyMetadata()
  @Expose({ name: "totalResults" })
  totalResults?: number;
}

export class CompaniesResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  companies200ApplicationJSONObject?: Companies200ApplicationJSON;
}
