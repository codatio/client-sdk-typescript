/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class AddDataConnectionRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody?: string;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=companyId",
  })
  companyId: string;
}

export class AddDataConnection200ApplicationJSONDataConnectionErrors extends SpeakeasyBase {
  /**
   * Message on the data connection error.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "errorMessage" })
  errorMessage?: string;

  /**
   * In Codat's data model, dates and times are represented using the ISO 8601 standard. Date and time fields are formatted as strings.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "erroredOnUtc" })
  erroredOnUtc?: string;

  /**
   * Codat's error status code for the connection error.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "statusCode" })
  statusCode?: string;

  /**
   * Descriptive text for the data connection error.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "statusText" })
  statusText?: string;
}

/**
 * The type of platform of the connection.
 */
export enum AddDataConnection200ApplicationJSONSourceTypeEnum {
  Accounting = "Accounting",
  Banking = "Banking",
  Commerce = "Commerce",
  Other = "Other",
  Unknown = "Unknown",
}

/**
 * The current authorization status of the data connection.
 */
export enum AddDataConnection200ApplicationJSONStatusEnum {
  PendingAuth = "PendingAuth",
  Linked = "Linked",
  Unlinked = "Unlinked",
  Deauthorized = "Deauthorized",
}

/**
 * Success
 */
export class AddDataConnection200ApplicationJSON extends SpeakeasyBase {
  /**
   * In Codat's data model, dates and times are represented using the ISO 8601 standard. Date and time fields are formatted as string.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created" })
  created?: string;

  /**
   * Array containing errors on data connections.
   */
  @SpeakeasyMetadata({
    elemType: AddDataConnection200ApplicationJSONDataConnectionErrors,
  })
  @Expose({ name: "dataConnectionErrors" })
  @Type(() => AddDataConnection200ApplicationJSONDataConnectionErrors)
  dataConnectionErrors?: AddDataConnection200ApplicationJSONDataConnectionErrors[];

  /**
   * Unique identifier for a company's data connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  /**
   * A Codat ID representing the integration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "integrationId" })
  integrationId: string;

  /**
   * In Codat's data model, dates and times are represented using the ISO 8601 standard. Date and time fields are formatted as string.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lastSync" })
  lastSync?: string;

  /**
   * Whitelabelled link site URL for the user link flow.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "linkUrl" })
  linkUrl: string;

  /**
   * The name of the platform to which the data connection is established.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "platformName" })
  platformName: string;

  /**
   * A source-specific ID used to distinguish between different sources originating from the same data connection. In general, a data connection is a single data source. However, for TrueLayer, sourceId is associated with a specific bank and has a many-to-one relationship with the integrationId.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sourceId" })
  sourceId: string;

  /**
   * The type of platform of the connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sourceType" })
  sourceType?: AddDataConnection200ApplicationJSONSourceTypeEnum;

  /**
   * The current authorization status of the data connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: AddDataConnection200ApplicationJSONStatusEnum;
}

export class AddDataConnectionResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  addDataConnection200ApplicationJSONObject?: AddDataConnection200ApplicationJSON;
}
