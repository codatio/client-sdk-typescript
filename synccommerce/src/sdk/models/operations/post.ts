/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, plainToInstance, Transform, Type } from "class-transformer";

export class PostRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=companyId",
  })
  companyId: string;
}

export class Post200ApplicationJSONFeesAccountsAccountOptions extends SpeakeasyBase {
  /**
   * Classification of the type of G/L account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "classification" })
  classification?: string;

  /**
   * Identifier for the account, unique for the company.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Name of the account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Reference given to each nominal account for a business. It ensures money is allocated to the correct account. This code isn't a unique identifier in the Codat system.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nominalCode" })
  nominalCode?: string;
}

/**
 * G/L account object for configuration.
 */
export class Post200ApplicationJSONFeesAccounts extends SpeakeasyBase {
  /**
   * Object containing account options.
   */
  @SpeakeasyMetadata({
    elemType: Post200ApplicationJSONFeesAccountsAccountOptions,
  })
  @Expose({ name: "accountOptions" })
  @Type(() => Post200ApplicationJSONFeesAccountsAccountOptions)
  accountOptions?: Post200ApplicationJSONFeesAccountsAccountOptions[];

  /**
   * Descriprtive text for sales configuration section.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "descriptionText" })
  descriptionText?: string;

  /**
   * Label text for sales configuration section.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labelText" })
  labelText?: string;

  /**
   * Required section to be configured for sync.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "required" })
  required?: boolean;

  /**
   * Selected account id from the list of available accounts.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "selectedAccountId" })
  selectedAccountId?: string;
}

export class Post200ApplicationJSONFeesFeesSupplierSupplierOptions extends SpeakeasyBase {
  /**
   * Unique identifier for the option.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Name value of the option.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

export class Post200ApplicationJSONFeesFeesSupplier extends SpeakeasyBase {
  /**
   * Selected supplier id from the list of supplier records on the accounting software.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "selectedSupplierId" })
  selectedSupplierId?: string;

  /**
   * List of supplier options from the list of supplier records on the accounting software.
   */
  @SpeakeasyMetadata({
    elemType: Post200ApplicationJSONFeesFeesSupplierSupplierOptions,
  })
  @Expose({ name: "supplierOptions" })
  @Type(() => Post200ApplicationJSONFeesFeesSupplierSupplierOptions)
  supplierOptions?: Post200ApplicationJSONFeesFeesSupplierSupplierOptions[];
}

export class Post200ApplicationJSONFees extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: Post200ApplicationJSONFeesAccounts })
  @Expose({ name: "accounts" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, Post200ApplicationJSONFeesAccounts> = {};
      for (const key in value) {
        obj[key] = plainToInstance(
          Post200ApplicationJSONFeesAccounts,
          value[key] as Post200ApplicationJSONFeesAccounts,
          { excludeExtraneousValues: true }
        );
      }
      return obj;
    },
    { toClassOnly: true }
  )
  accounts?: Record<string, Post200ApplicationJSONFeesAccounts>;

  @SpeakeasyMetadata()
  @Expose({ name: "feesSupplier" })
  @Type(() => Post200ApplicationJSONFeesFeesSupplier)
  feesSupplier?: Post200ApplicationJSONFeesFeesSupplier;

  /**
   * Boolean indicator to enable syncing fees.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "syncFees" })
  syncFees?: boolean;
}

export class Post200ApplicationJSONNewPaymentsAccountsAccountOptions extends SpeakeasyBase {
  /**
   * Classification of the type of G/L account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "classification" })
  classification?: string;

  /**
   * Identifier for the account, unique for the company.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Name of the account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Reference given to each nominal account for a business. It ensures money is allocated to the correct account. This code isn't a unique identifier in the Codat system.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nominalCode" })
  nominalCode?: string;
}

/**
 * G/L account object for configuration.
 */
export class Post200ApplicationJSONNewPaymentsAccounts extends SpeakeasyBase {
  /**
   * Object containing account options.
   */
  @SpeakeasyMetadata({
    elemType: Post200ApplicationJSONNewPaymentsAccountsAccountOptions,
  })
  @Expose({ name: "accountOptions" })
  @Type(() => Post200ApplicationJSONNewPaymentsAccountsAccountOptions)
  accountOptions?: Post200ApplicationJSONNewPaymentsAccountsAccountOptions[];

  /**
   * Descriprtive text for sales configuration section.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "descriptionText" })
  descriptionText?: string;

  /**
   * Label text for sales configuration section.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labelText" })
  labelText?: string;

  /**
   * Required section to be configured for sync.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "required" })
  required?: boolean;

  /**
   * Selected account id from the list of available accounts.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "selectedAccountId" })
  selectedAccountId?: string;
}

export class Post200ApplicationJSONNewPayments extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: Post200ApplicationJSONNewPaymentsAccounts })
  @Expose({ name: "accounts" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, Post200ApplicationJSONNewPaymentsAccounts> = {};
      for (const key in value) {
        obj[key] = plainToInstance(
          Post200ApplicationJSONNewPaymentsAccounts,
          value[key] as Post200ApplicationJSONNewPaymentsAccounts,
          { excludeExtraneousValues: true }
        );
      }
      return obj;
    },
    { toClassOnly: true }
  )
  accounts?: Record<string, Post200ApplicationJSONNewPaymentsAccounts>;

  /**
   * Boolean indicator for syncing payments.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "syncPayments" })
  syncPayments?: boolean;
}

export class Post200ApplicationJSONPaymentsAccountsAccountOptions extends SpeakeasyBase {
  /**
   * Classification of the type of G/L account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "classification" })
  classification?: string;

  /**
   * Identifier for the account, unique for the company.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Name of the account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Reference given to each nominal account for a business. It ensures money is allocated to the correct account. This code isn't a unique identifier in the Codat system.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nominalCode" })
  nominalCode?: string;
}

/**
 * G/L account object for configuration.
 */
export class Post200ApplicationJSONPaymentsAccounts extends SpeakeasyBase {
  /**
   * Object containing account options.
   */
  @SpeakeasyMetadata({
    elemType: Post200ApplicationJSONPaymentsAccountsAccountOptions,
  })
  @Expose({ name: "accountOptions" })
  @Type(() => Post200ApplicationJSONPaymentsAccountsAccountOptions)
  accountOptions?: Post200ApplicationJSONPaymentsAccountsAccountOptions[];

  /**
   * Descriprtive text for sales configuration section.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "descriptionText" })
  descriptionText?: string;

  /**
   * Label text for sales configuration section.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labelText" })
  labelText?: string;

  /**
   * Required section to be configured for sync.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "required" })
  required?: boolean;

  /**
   * Selected account id from the list of available accounts.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "selectedAccountId" })
  selectedAccountId?: string;
}

export class Post200ApplicationJSONPayments extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: Post200ApplicationJSONPaymentsAccounts })
  @Expose({ name: "accounts" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, Post200ApplicationJSONPaymentsAccounts> = {};
      for (const key in value) {
        obj[key] = plainToInstance(
          Post200ApplicationJSONPaymentsAccounts,
          value[key] as Post200ApplicationJSONPaymentsAccounts,
          { excludeExtraneousValues: true }
        );
      }
      return obj;
    },
    { toClassOnly: true }
  )
  accounts?: Record<string, Post200ApplicationJSONPaymentsAccounts>;

  /**
   * Boolean indicator for syncing sales.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "syncPayments" })
  syncPayments?: boolean;
}

export class Post200ApplicationJSONSalesAccountsAccountOptions extends SpeakeasyBase {
  /**
   * Classification of the type of G/L account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "classification" })
  classification?: string;

  /**
   * Identifier for the account, unique for the company.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Name of the account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Reference given to each nominal account for a business. It ensures money is allocated to the correct account. This code isn't a unique identifier in the Codat system.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nominalCode" })
  nominalCode?: string;
}

/**
 * G/L account object for configuration.
 */
export class Post200ApplicationJSONSalesAccounts extends SpeakeasyBase {
  /**
   * Object containing account options.
   */
  @SpeakeasyMetadata({
    elemType: Post200ApplicationJSONSalesAccountsAccountOptions,
  })
  @Expose({ name: "accountOptions" })
  @Type(() => Post200ApplicationJSONSalesAccountsAccountOptions)
  accountOptions?: Post200ApplicationJSONSalesAccountsAccountOptions[];

  /**
   * Descriprtive text for sales configuration section.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "descriptionText" })
  descriptionText?: string;

  /**
   * Label text for sales configuration section.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labelText" })
  labelText?: string;

  /**
   * Required section to be configured for sync.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "required" })
  required?: boolean;

  /**
   * Selected account id from the list of available accounts.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "selectedAccountId" })
  selectedAccountId?: string;
}

export class Post200ApplicationJSONSalesGroupingGroupingLevelsInvoiceLevel extends SpeakeasyBase {
  /**
   * Options for grouping sales.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "groupByOptions" })
  groupByOptions?: string[];

  /**
   * Selected array of grouping options.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "selectedGroupByOptions" })
  selectedGroupByOptions?: string[];
}

export class Post200ApplicationJSONSalesGroupingGroupingLevelsInvoiceLineLevel extends SpeakeasyBase {
  /**
   * Options for grouping on invoice lines.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "groupByOptions" })
  groupByOptions?: string[];

  /**
   * Invoice line level selection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "selectedGroupByOptions" })
  selectedGroupByOptions?: string[];
}

export class Post200ApplicationJSONSalesGroupingGroupingLevels extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "invoiceLevel" })
  @Type(() => Post200ApplicationJSONSalesGroupingGroupingLevelsInvoiceLevel)
  invoiceLevel?: Post200ApplicationJSONSalesGroupingGroupingLevelsInvoiceLevel;

  @SpeakeasyMetadata()
  @Expose({ name: "invoiceLineLevel" })
  @Type(() => Post200ApplicationJSONSalesGroupingGroupingLevelsInvoiceLineLevel)
  invoiceLineLevel?: Post200ApplicationJSONSalesGroupingGroupingLevelsInvoiceLineLevel;
}

export class Post200ApplicationJSONSalesGroupingGroupingPeriod extends SpeakeasyBase {
  /**
   * Array of grouping period options.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "groupingPeriodOptions" })
  groupingPeriodOptions?: string[];

  /**
   * Grouping period i.e. Daily sales.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "selectedGroupingPeriod" })
  selectedGroupingPeriod?: string;
}

export class Post200ApplicationJSONSalesGrouping extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "groupingLevels" })
  @Type(() => Post200ApplicationJSONSalesGroupingGroupingLevels)
  groupingLevels?: Post200ApplicationJSONSalesGroupingGroupingLevels;

  @SpeakeasyMetadata()
  @Expose({ name: "groupingPeriod" })
  @Type(() => Post200ApplicationJSONSalesGroupingGroupingPeriod)
  groupingPeriod?: Post200ApplicationJSONSalesGroupingGroupingPeriod;
}

export class Post200ApplicationJSONSalesInvoiceStatus extends SpeakeasyBase {
  /**
   * Options for invoice statuses.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "invoiceStatusOptions" })
  invoiceStatusOptions?: string[];

  /**
   * Selected option for invoice status for invoice to be synced.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "selectedInvoiceStatus" })
  selectedInvoiceStatus?: string;
}

export class Post200ApplicationJSONSalesNewTaxRatesAccountingTaxRateOptions extends SpeakeasyBase {
  /**
   * Unique identifier for the option.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Name value of the option.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

export class Post200ApplicationJSONSalesNewTaxRatesCommerceTaxRateOptions extends SpeakeasyBase {
  /**
   * Unique identifier for the option.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Name value of the option.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

export class Post200ApplicationJSONSalesNewTaxRatesDefaultZeroTaxRateOptions extends SpeakeasyBase {
  /**
   * Unique identifier for the option.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Name value of the option.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

export class Post200ApplicationJSONSalesNewTaxRatesTaxRateMappings extends SpeakeasyBase {
  /**
   * Selected tax rate id from the list of tax rates on the accounting software.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "selectedAccountingTaxRateId" })
  selectedAccountingTaxRateId?: string;

  /**
   * Selected tax component id from the list of tax components on the commerce software.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "selectedCommerceTaxRateIds" })
  selectedCommerceTaxRateIds?: string[];
}

export class Post200ApplicationJSONSalesNewTaxRates extends SpeakeasyBase {
  /**
   * Array of accounting tax rate options.
   */
  @SpeakeasyMetadata({
    elemType: Post200ApplicationJSONSalesNewTaxRatesAccountingTaxRateOptions,
  })
  @Expose({ name: "accountingTaxRateOptions" })
  @Type(() => Post200ApplicationJSONSalesNewTaxRatesAccountingTaxRateOptions)
  accountingTaxRateOptions?: Post200ApplicationJSONSalesNewTaxRatesAccountingTaxRateOptions[];

  /**
   * Array of tax component options.
   */
  @SpeakeasyMetadata({
    elemType: Post200ApplicationJSONSalesNewTaxRatesCommerceTaxRateOptions,
  })
  @Expose({ name: "commerceTaxRateOptions" })
  @Type(() => Post200ApplicationJSONSalesNewTaxRatesCommerceTaxRateOptions)
  commerceTaxRateOptions?: Post200ApplicationJSONSalesNewTaxRatesCommerceTaxRateOptions[];

  /**
   * Default zero tax rate selected for sync.
   */
  @SpeakeasyMetadata({
    elemType: Post200ApplicationJSONSalesNewTaxRatesDefaultZeroTaxRateOptions,
  })
  @Expose({ name: "defaultZeroTaxRateOptions" })
  @Type(() => Post200ApplicationJSONSalesNewTaxRatesDefaultZeroTaxRateOptions)
  defaultZeroTaxRateOptions?: Post200ApplicationJSONSalesNewTaxRatesDefaultZeroTaxRateOptions[];

  /**
   * Default tax rate selected for sync.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "selectedDefaultZeroTaxRateId" })
  selectedDefaultZeroTaxRateId?: string;

  /**
   * Array of tax component to rate mapppings.
   */
  @SpeakeasyMetadata({
    elemType: Post200ApplicationJSONSalesNewTaxRatesTaxRateMappings,
  })
  @Expose({ name: "taxRateMappings" })
  @Type(() => Post200ApplicationJSONSalesNewTaxRatesTaxRateMappings)
  taxRateMappings?: Post200ApplicationJSONSalesNewTaxRatesTaxRateMappings[];
}

export class Post200ApplicationJSONSalesSalesCustomerCustomerOptions extends SpeakeasyBase {
  /**
   * Unique identifier for the option.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Name value of the option.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

export class Post200ApplicationJSONSalesSalesCustomer extends SpeakeasyBase {
  /**
   * List of customer options from the list of customer records on the accounting software.
   */
  @SpeakeasyMetadata({
    elemType: Post200ApplicationJSONSalesSalesCustomerCustomerOptions,
  })
  @Expose({ name: "customerOptions" })
  @Type(() => Post200ApplicationJSONSalesSalesCustomerCustomerOptions)
  customerOptions?: Post200ApplicationJSONSalesSalesCustomerCustomerOptions[];

  /**
   * Selected customer id from the list of customer records on the accounting software.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "selectedCustomerId" })
  selectedCustomerId?: string;
}

export class Post200ApplicationJSONSalesTaxRatesTaxRateOptions extends SpeakeasyBase {
  /**
   * Unique identifier for the option.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Name value of the option.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

export class Post200ApplicationJSONSalesTaxRates extends SpeakeasyBase {
  /**
   * Selected tax rate id from the list of tax rates on the accounting software.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "selectedTaxRateId" })
  selectedTaxRateId?: string;

  /**
   * Array of tax rate options object.
   */
  @SpeakeasyMetadata({
    elemType: Post200ApplicationJSONSalesTaxRatesTaxRateOptions,
  })
  @Expose({ name: "taxRateOptions" })
  @Type(() => Post200ApplicationJSONSalesTaxRatesTaxRateOptions)
  taxRateOptions?: Post200ApplicationJSONSalesTaxRatesTaxRateOptions[];
}

export class Post200ApplicationJSONSales extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: Post200ApplicationJSONSalesAccounts })
  @Expose({ name: "accounts" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, Post200ApplicationJSONSalesAccounts> = {};
      for (const key in value) {
        obj[key] = plainToInstance(
          Post200ApplicationJSONSalesAccounts,
          value[key] as Post200ApplicationJSONSalesAccounts,
          { excludeExtraneousValues: true }
        );
      }
      return obj;
    },
    { toClassOnly: true }
  )
  accounts?: Record<string, Post200ApplicationJSONSalesAccounts>;

  @SpeakeasyMetadata()
  @Expose({ name: "grouping" })
  @Type(() => Post200ApplicationJSONSalesGrouping)
  grouping?: Post200ApplicationJSONSalesGrouping;

  @SpeakeasyMetadata()
  @Expose({ name: "invoiceStatus" })
  @Type(() => Post200ApplicationJSONSalesInvoiceStatus)
  invoiceStatus?: Post200ApplicationJSONSalesInvoiceStatus;

  @SpeakeasyMetadata()
  @Expose({ name: "newTaxRates" })
  @Type(() => Post200ApplicationJSONSalesNewTaxRates)
  newTaxRates?: Post200ApplicationJSONSalesNewTaxRates;

  @SpeakeasyMetadata()
  @Expose({ name: "salesCustomer" })
  @Type(() => Post200ApplicationJSONSalesSalesCustomer)
  salesCustomer?: Post200ApplicationJSONSalesSalesCustomer;

  /**
   * Boolean indicator for syncing sales.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "syncSales" })
  syncSales?: boolean;

  @SpeakeasyMetadata({ elemType: Post200ApplicationJSONSalesTaxRates })
  @Expose({ name: "taxRates" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, Post200ApplicationJSONSalesTaxRates> = {};
      for (const key in value) {
        obj[key] = plainToInstance(
          Post200ApplicationJSONSalesTaxRates,
          value[key] as Post200ApplicationJSONSalesTaxRates,
          { excludeExtraneousValues: true }
        );
      }
      return obj;
    },
    { toClassOnly: true }
  )
  taxRates?: Record<string, Post200ApplicationJSONSalesTaxRates>;
}

/**
 * Success
 */
export class Post200ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "fees" })
  @Type(() => Post200ApplicationJSONFees)
  fees?: Post200ApplicationJSONFees;

  @SpeakeasyMetadata()
  @Expose({ name: "newPayments" })
  @Type(() => Post200ApplicationJSONNewPayments)
  newPayments?: Post200ApplicationJSONNewPayments;

  @SpeakeasyMetadata()
  @Expose({ name: "payments" })
  @Type(() => Post200ApplicationJSONPayments)
  payments?: Post200ApplicationJSONPayments;

  @SpeakeasyMetadata()
  @Expose({ name: "sales" })
  @Type(() => Post200ApplicationJSONSales)
  sales?: Post200ApplicationJSONSales;
}

export class PostResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  post200ApplicationJSONObject?: Post200ApplicationJSON;
}
