/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class ListCommerceTransactionsRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=companyId",
  })
  companyId: string;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=connectionId",
  })
  connectionId: string;

  /**
   * Field to order results by. [Read more](https://docs.codat.io/using-the-api/ordering-results).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=orderBy",
  })
  orderBy?: string;

  /**
   * Page number. [Read more](https://docs.codat.io/using-the-api/paging).
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=page" })
  page: number;

  /**
   * Number of records to return in a page. [Read more](https://docs.codat.io/using-the-api/paging).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=pageSize",
  })
  pageSize?: number;

  /**
   * Codat query string. [Read more](https://docs.codat.io/using-the-api/querying).
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=query" })
  query?: string;
}

export class ListCommerceTransactions200ApplicationJSONLinksHypertextReference extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "href" })
  href?: string;
}

export class ListCommerceTransactions200ApplicationJSONLinks extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "current" })
  @Type(() => ListCommerceTransactions200ApplicationJSONLinksHypertextReference)
  current: ListCommerceTransactions200ApplicationJSONLinksHypertextReference;

  @SpeakeasyMetadata()
  @Expose({ name: "next" })
  @Type(() => ListCommerceTransactions200ApplicationJSONLinksHypertextReference)
  next?: ListCommerceTransactions200ApplicationJSONLinksHypertextReference;

  @SpeakeasyMetadata()
  @Expose({ name: "previous" })
  @Type(() => ListCommerceTransactions200ApplicationJSONLinksHypertextReference)
  previous?: ListCommerceTransactions200ApplicationJSONLinksHypertextReference;

  @SpeakeasyMetadata()
  @Expose({ name: "self" })
  @Type(() => ListCommerceTransactions200ApplicationJSONLinksHypertextReference)
  self: ListCommerceTransactions200ApplicationJSONLinksHypertextReference;
}

export enum ListCommerceTransactions200ApplicationJSONSourceModifiedDateRecordRefTypeEnum {
  Fee = "Fee",
  Order = "Order",
  Payment = "Payment",
  ServiceCharge = "ServiceCharge",
  Unknown = "Unknown",
}

export class ListCommerceTransactions200ApplicationJSONSourceModifiedDateRecordRef extends SpeakeasyBase {
  /**
   * The unique identitifer of the record being referenced
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: ListCommerceTransactions200ApplicationJSONSourceModifiedDateRecordRefTypeEnum;
}

/**
 * The type of the platform transaction:
 *
 * @remarks
 * - `Unknown`
 * - `FailedPayout` — Failed transfer of funds from the seller's merchant account to their bank account.
 * - `Payment` — Credit and debit card payments.
 * - `PaymentFee` — Payment provider's fee on each card payment.
 * - `PaymentFeeRefund` — Payment provider's fee that has been refunded to the seller.
 * - `Payout` — Transfer of funds from the seller's merchant account to their bank account.
 * - `Refund` — Refunds to a customer's credit or debit card.
 * - `Transfer` — Secure transfer of funds to the seller's bank account.
 */
export enum ListCommerceTransactions200ApplicationJSONSourceModifiedDateTypeEnum {
  Payment = "Payment",
  Refund = "Refund",
  Payout = "Payout",
  FailedPayout = "FailedPayout",
  Transfer = "Transfer",
  PaymentFee = "PaymentFee",
  PaymentFeeRefund = "PaymentFeeRefund",
  Unknown = "Unknown",
}

/**
 * Details of all financial transactions recorded in the commerce or point of sale system are added to the Transactions data type. For example, payments, service charges, and fees.
 *
 * @remarks
 *
 * You can use data from the Transactions endpoints to calculate key metrics, such as:
 * - Transaction volumes
 * - Average transaction volume
 * - Average transaction value
 * - Returns
 * - Payouts
 *
 * Explore our [data coverage](https://knowledge.codat.io/supported-features/commerce?view=tab-by-data-type&dataType=commerce-transactions) for this data type.
 */
export class ListCommerceTransactions200ApplicationJSONSourceModifiedDate extends SpeakeasyBase {
  /**
   * The date the entity was created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createdDate" })
  createdDate?: string;

  /**
   * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
   *
   * @remarks
   *
   * ## Unknown currencies
   *
   * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction.
   *
   * There are only a very small number of edge cases where this currency code is returned by the Codat system.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency" })
  currency?: string;

  /**
   * A unique, persistent identifier for this record
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  /**
   * The date on which this record was last modified in Codat.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "modifiedDate" })
  modifiedDate?: string;

  /**
   * The date on which this record was created in the originating system
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sourceCreatedDate" })
  sourceCreatedDate?: string;

  /**
   * The date on which this record was last modified in the originating system
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sourceModifiedDate" })
  sourceModifiedDate?: string;

  /**
   * Non-standardised transaction type data from the commerce platform
   */
  @SpeakeasyMetadata()
  @Expose({ name: "subType" })
  subType?: string;

  /**
   * The total transaction amount
   */
  @SpeakeasyMetadata()
  @Expose({ name: "totalAmount" })
  totalAmount?: number;

  /**
   * Link to the source event which triggered this transaction
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transactionSourceRef" })
  @Type(
    () => ListCommerceTransactions200ApplicationJSONSourceModifiedDateRecordRef
  )
  transactionSourceRef?: ListCommerceTransactions200ApplicationJSONSourceModifiedDateRecordRef;

  /**
   * The type of the platform transaction:
   *
   * @remarks
   * - `Unknown`
   * - `FailedPayout` — Failed transfer of funds from the seller's merchant account to their bank account.
   * - `Payment` — Credit and debit card payments.
   * - `PaymentFee` — Payment provider's fee on each card payment.
   * - `PaymentFeeRefund` — Payment provider's fee that has been refunded to the seller.
   * - `Payout` — Transfer of funds from the seller's merchant account to their bank account.
   * - `Refund` — Refunds to a customer's credit or debit card.
   * - `Transfer` — Secure transfer of funds to the seller's bank account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: ListCommerceTransactions200ApplicationJSONSourceModifiedDateTypeEnum;
}

/**
 * OK
 */
export class ListCommerceTransactions200ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "_links" })
  @Type(() => ListCommerceTransactions200ApplicationJSONLinks)
  links: ListCommerceTransactions200ApplicationJSONLinks;

  @SpeakeasyMetadata()
  @Expose({ name: "pageNumber" })
  pageNumber: number;

  @SpeakeasyMetadata()
  @Expose({ name: "pageSize" })
  pageSize: number;

  @SpeakeasyMetadata({
    elemType: ListCommerceTransactions200ApplicationJSONSourceModifiedDate,
  })
  @Expose({ name: "results" })
  @Type(() => ListCommerceTransactions200ApplicationJSONSourceModifiedDate)
  results?: ListCommerceTransactions200ApplicationJSONSourceModifiedDate[];

  @SpeakeasyMetadata()
  @Expose({ name: "totalResults" })
  totalResults: number;
}

export class ListCommerceTransactionsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * OK
   */
  @SpeakeasyMetadata()
  listCommerceTransactions200ApplicationJSONObject?: ListCommerceTransactions200ApplicationJSON;
}
